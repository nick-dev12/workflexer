---
description: Bonnes pratiques √† respecter syst√©matiquement
globs: 
alwaysApply: false
---
## üîß Bonnes pratiques √† respecter syst√©matiquement

## R√®gles sp√©cifiques pour Cursor
- cree troujous les styles dans un fichier separer qui portera le nom du fichier au quel il est ratacher
- Toujours cr√©er les fichiers par √©tapes progressives pour √©viter les limites de tokens
- Diviser la g√©n√©ration de code en plusieurs commandes distinctes
- Structure d'impl√©mentation recommand√©e:
  1. Cr√©er d'abord le squelette du fichier avec les imports et la structure de base
  2. Ajouter les classes/fonctions principales sans leur impl√©mentation d√©taill√©e
  3. Impl√©menter les m√©thodes/fonctions une par une
  4. Finaliser avec les commentaires et la documentation
- Pour les fichiers PHP:
  1. Commencer par la d√©claration <?php et les imports/requires
  2. Ajouter les d√©finitions de classes/fonctions
  3. Impl√©menter la logique m√©tier
  4. Ajouter le code HTML si n√©cessaire
- Pour les fichiers HTML/CSS/JS:
  1. Cr√©er d'abord la structure HTML de base
  2. Ajouter les styles CSS essentiels
  3. Impl√©menter le JavaScript par fonctionnalit√©s
- Toujours demander confirmation avant de passer √† l'√©tape suivante
- Valider chaque section avant de continuer
- Ensuite, cr√©e un **fichier CSS s√©par√©** contenant les styles associ√©s
- Puis, cr√©e un **fichier JS s√©par√©** avec les scripts n√©cessaires


### PHP
- Utiliser des classes, des namespaces et des m√©thodes claires
- Respecter la s√©paration des responsabilit√©s
- S√©curiser toutes les entr√©es/sorties
- Toujours commenter la logique m√©tier

### JavaScript
- Modulariser le code (fichiers s√©par√©s, fonctions pures, code r√©utilisable)
- Utiliser `let`, `const` au lieu de `var`
- √âviter les d√©pendances inutiles
- Prioriser les √©v√©nements d√©l√©gu√©s et les animations l√©g√®res
- Ensuite, cr√©e un **fichier CSS s√©par√©** contenant les styles associ√©s
- Puis, cr√©e un **fichier JS s√©par√©** avec les scripts n√©cessaires

### CSS
- cree troujous les styles dans un fichier separer qui portera le nom du fichier au quel il est ratacher
- Utiliser des classes coh√©rentes et lisibles
- √âviter les r√©p√©titions de code (DRY)
- Utiliser des variables CSS, des mixins ou des utility classes si applicable
- S‚Äôinspirer des frameworks modernes (ex: Tailwind, SCSS, BEM)
- Ensuite, cr√©e un **fichier CSS s√©par√©** contenant les styles associ√©s
- Puis, cr√©e un **fichier JS s√©par√©** avec les scripts n√©cessaires

---

## Cr√©ation progressive des fichiers
- Diviser la cr√©ation de fichiers en sections logiques (imports, configuration, fonctions, classes, etc.)
- Impl√©menter d'abord le squelette du fichier avant d'ajouter les d√©tails
- Cr√©er et tester les fonctions une par une
- Pour les fichiers complexes, commencer par les d√©pendances et les imports
- Ajouter les commentaires de documentation en m√™me temps que le code
- Cr√©er d'abord la structure HTML avant d'ajouter le JavaScript et le CSS
- Impl√©menter les fonctionnalit√©s critiques en premier, puis ajouter les fonctionnalit√©s secondaires
- Tester chaque section avant de passer √† la suivante
- Pour les classes, impl√©menter d'abord les propri√©t√©s et la structure, puis les m√©thodes
- Diviser les requ√™tes SQL complexes en plusieurs √©tapes pour faciliter le d√©bogage

- cree troujous les styles dans un fichier separer qui portera le nom du fichier au quel il est ratacher