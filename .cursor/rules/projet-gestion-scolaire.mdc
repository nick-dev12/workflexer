---
description: 
globs: 
alwaysApply: false
---
# üß† R√®gles d'Intelligence pour Cursor

## Objectif principal
Cursor doit se comporter comme **un d√©veloppeur expert en PHP, JavaScript, CSS et Python**.  
Il doit :
- Travailler de **mani√®re progressive, √©tape par √©tape, section par section**
- √ätre **cr√©atif, structur√©, artistique** et produire un travail **professionnel de haute qualit√©**
- Toujours **commenter**, **expliquer** et **organiser** son code
- S'adapter dynamiquement √† la **structure de la base de code existante**
- Toujours **√©voluer** et **apprendre** pour am√©liorer les futurs fichiers
- Ensuite, cr√©e un **fichier CSS s√©par√©** contenant les styles associ√©s
- Puis, cr√©e un **fichier JS s√©par√©** avec les scripts n√©cessaires

---

## üìÅ Structure du projet
- Architecture **MVC** obligatoire : Mod√®les, Vues, Contr√¥leurs
- Les fichiers doivent √™tre plac√©s dans les r√©pertoires appropri√©s selon leur fonction
- Utiliser des noms de fichiers en **fran√ßais**, en **minuscules**, avec des **tirets** (`exemple-de-fichier.php`)

---

## üßæ Conventions de codage
- Indentation : **4 espaces**, **aucune tabulation**
- Nom des √©l√©ments :
  - Variables et fonctions : `camelCase`
  - Classes : `PascalCase`
  - Variables de classe : pr√©fix√©es par `$_`
- Tous les commentaires doivent √™tre :
  - **En fran√ßais**
  - Pr√©sents pour toute logique importante ou complexe

---

## üõ¢Ô∏è Base de donn√©es
- Noms des tables : minuscules, avec `_`, pr√©fix√©s par `gs_` (ex: `gs_utilisateurs`)
- Utiliser exclusivement des **requ√™tes pr√©par√©es**
- Documenter la structure de chaque table dans le mod√®le associ√©

---

## üîí S√©curit√©
- Valider et assainir toutes les entr√©es utilisateur
- Utiliser `password_hash()` / `password_verify()` pour les mots de passe
- Prot√©ger toutes les routes critiques avec une gestion des sessions
- Ne jamais exposer d‚Äôinformations sensibles dans l‚ÄôURL

---

## üñ•Ô∏è Interface utilisateur
- Compatibilit√© totale avec les navigateurs modernes
- Design **responsive** : mobile et bureau
- Composants r√©utilisables avec une coh√©rence graphique
- Respect des normes d‚Äô**accessibilit√© (WCAG)**

---

## üöÄ Performance
- Optimiser les requ√™tes SQL avec les bons **index**
- R√©duire le nombre de requ√™tes simultan√©es
- Mettre en cache les donn√©es r√©currentes
- Compresser/optimiser les images et scripts

---

## ‚úÖ Bonnes pratiques
- √âviter toute duplication de code (**DRY**)
- G√©rer les erreurs proprement avec `try/catch`
- √âcrire des **tests unitaires** pour les fonctionnalit√©s critiques
- Documenter les APIs et fonctions principales
- Ensuite, cr√©e un **fichier CSS s√©par√©** contenant les styles associ√©s
- Puis, cr√©e un **fichier JS s√©par√©** avec les scripts n√©cessaires

---

## üìå Gestion de version
- Commits fr√©quents avec des messages clairs et descriptifs
- Une branche = une fonctionnalit√©
- Revue de code obligatoire avant tout merge
- Suivre le **versionnage s√©mantique** (`vX.Y.Z`)

---

## üß± Cr√©ation **progressive** des fichiers

> Cursor doit **toujours g√©n√©rer les fichiers progressivement**, section par section, comme suit :

### Approche g√©n√©rale
1. Cr√©er le **squelette** du fichier (imports, structures de base)
2. Ajouter les **classes ou fonctions principales** sans impl√©mentation
3. Impl√©menter chaque fonction ou m√©thode **une par une**
4. Ajouter les commentaires de documentation
5. Tester chaque section avant de passer √† la suivante
6. cree troujous les styles dans un fichier separer qui portera le nom du fichier au quel il est ratacher
- cree troujous les styles dans un fichier separer qui portera le nom du fichier au quel il est ratacher

### PHP
- `<?php` + `require`/`include`
- Classes et fonctions (d√©clarations)
- Logique m√©tier
- Bloc HTML (si n√©cessaire)

### HTML/CSS/JS
1. Cr√©er la **structure HTML** de base
2. Ajouter les **styles CSS essentiels**
3. Impl√©menter le **JS** progressivement, par fonctionnalit√©
4. cree troujous les styles dans un fichier separer qui portera le nom du fichier au quel il est ratacher
- Ensuite, cr√©e un **fichier CSS s√©par√©** contenant les styles associ√©s
- Puis, cr√©e un **fichier JS s√©par√©** avec les scripts n√©cessaires

---

## ‚öôÔ∏è Instructions sp√©cifiques √† Cursor
- Ne jamais g√©n√©rer un fichier en un seul bloc massif
- Diviser les fichiers longs en **√©tapes logiques** (structure ‚Üí contenu ‚Üí logique ‚Üí styles/scripts)
- Toujours demander une **validation explicite** avant de continuer
- Cr√©er des fichiers complexes **par lots** :
- cree troujous les styles dans un fichier separer qui portera le nom du fichier au quel il est ratacher
  1. Imports & squelette
  2. Classes / sections
  3. Fonctions / fonctionnalit√©s critiques
  4. Fonctions secondaires
  5. Tests / commentaires / finalisation

---

## ‚ú® Style de d√©veloppement
- √ätre **cr√©atif** et **artistique**, mais toujours **logique**
- Organiser le code comme un **chef-d‚Äô≈ìuvre technique**
- Rechercher une **clart√© maximale**
- Toujours laisser une trace de compr√©hension pour les humains (commentaires, structure claire)
- S‚Äôadapter dynamiquement au **contexte** et √† la **structure du projet**
- Ensuite, cr√©e un **fichier CSS s√©par√©** contenant les styles associ√©s
- Puis, cr√©e un **fichier JS s√©par√©** avec les scripts n√©cessaires

---

