[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "RequestValidationError",
        "importPath": "fastapi.exceptions",
        "description": "fastapi.exceptions",
        "isExtraImport": true,
        "detail": "fastapi.exceptions",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Set",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "MatchingRequest",
        "importPath": "api1.models",
        "description": "api1.models",
        "isExtraImport": true,
        "detail": "api1.models",
        "documentation": {}
    },
    {
        "label": "MatchingResponse",
        "importPath": "api1.models",
        "description": "api1.models",
        "isExtraImport": true,
        "detail": "api1.models",
        "documentation": {}
    },
    {
        "label": "MatchingResponseV2",
        "importPath": "api1.models",
        "description": "api1.models",
        "isExtraImport": true,
        "detail": "api1.models",
        "documentation": {}
    },
    {
        "label": "MatchingRequestV2",
        "importPath": "api1.models",
        "description": "api1.models",
        "isExtraImport": true,
        "detail": "api1.models",
        "documentation": {}
    },
    {
        "label": "ContexteAnalyse",
        "importPath": "api1.models",
        "description": "api1.models",
        "isExtraImport": true,
        "detail": "api1.models",
        "documentation": {}
    },
    {
        "label": "analyze_compatibility_v2",
        "importPath": "api1.utils",
        "description": "api1.utils",
        "isExtraImport": true,
        "detail": "api1.utils",
        "documentation": {}
    },
    {
        "label": "extract_keywords_from_description",
        "importPath": "api1.utils",
        "description": "api1.utils",
        "isExtraImport": true,
        "detail": "api1.utils",
        "documentation": {}
    },
    {
        "label": "api1.config",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "api1.config",
        "description": "api1.config",
        "detail": "api1.config",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "validator",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "find_packages",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "uvicorn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uvicorn",
        "description": "uvicorn",
        "detail": "uvicorn",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "SentenceTransformer",
        "importPath": "sentence_transformers",
        "description": "sentence_transformers",
        "isExtraImport": true,
        "detail": "sentence_transformers",
        "documentation": {}
    },
    {
        "label": "util",
        "importPath": "sentence_transformers",
        "description": "sentence_transformers",
        "isExtraImport": true,
        "detail": "sentence_transformers",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "config",
        "description": "config",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "CandidatProfile",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "JobOffer",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "MatchingResponse",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "MatchingResponseV2",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Formation",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Experience",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Competence",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Langue",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "ExigenceFormation",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "ExigenceExperience",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "AnalyseCategorielle",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "AnalyseDetaillee",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "PointFort",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "PointAmelioration",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Suggestion",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "CorrespondanceItem",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "ElementManquant",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "ContexteAnalyse",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "spacy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "spacy",
        "description": "spacy",
        "detail": "spacy",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "WEIGHTS",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "WEIGHTS = {\n    \"competences\": float(\n        os.getenv(\"COMPETENCES_WEIGHT\", 0.40)\n    ),  # 40% pour les compétences\n    \"formation\": float(\n        os.getenv(\"FORMATION_WEIGHT\", 0.20)\n    ),  # 20% pour la formation/diplômes\n    \"experience\": float(\n        os.getenv(\"EXPERIENCE_WEIGHT\", 0.20)\n    ),  # 20% pour l'expérience professionnelle",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "COMPATIBILITY_THRESHOLDS",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "COMPATIBILITY_THRESHOLDS = {\n    \"excellent\": float(\n        os.getenv(\"THRESHOLD_EXCELLENT\", 0.85)\n    ),  # Au-dessus de 85% = excellente compatibilité\n    \"good\": float(\n        os.getenv(\"THRESHOLD_GOOD\", 0.70)\n    ),  # Entre 70% et 85% = bonne compatibilité\n    \"moderate\": float(\n        os.getenv(\"THRESHOLD_MODERATE\", 0.50)\n    ),  # Entre 50% et 70% = compatibilité moyenne",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "COMPATIBILITY_MESSAGES",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "COMPATIBILITY_MESSAGES = {\n    \"excellent\": \"Votre profil correspond parfaitement à cette offre!\",\n    \"good\": \"Votre profil correspond bien à cette offre.\",\n    \"moderate\": \"Votre profil correspond partiellement à cette offre.\",\n    \"low\": \"Votre profil correspond peu à cette offre.\",\n    \"poor\": \"Votre profil ne correspond pas à cette offre.\",\n}\n# Nombre maximum de points forts et points à améliorer à retourner\nMAX_STRENGTHS = int(os.getenv(\"MAX_STRENGTHS\", 5))\nMAX_IMPROVEMENTS = int(os.getenv(\"MAX_IMPROVEMENTS\", 5))",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "MAX_STRENGTHS",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "MAX_STRENGTHS = int(os.getenv(\"MAX_STRENGTHS\", 5))\nMAX_IMPROVEMENTS = int(os.getenv(\"MAX_IMPROVEMENTS\", 5))\n# Configuration de l'API\nAPI_CONFIG = {\n    \"title\": \"API de Matching WorkFlexer\",\n    \"description\": (\n        \"API pour analyser la compatibilité entre un profil candidat et \"\n        \"une offre d'emploi\"\n    ),\n    \"version\": os.getenv(\"API_VERSION\", \"2.0.0\"),",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "MAX_IMPROVEMENTS",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "MAX_IMPROVEMENTS = int(os.getenv(\"MAX_IMPROVEMENTS\", 5))\n# Configuration de l'API\nAPI_CONFIG = {\n    \"title\": \"API de Matching WorkFlexer\",\n    \"description\": (\n        \"API pour analyser la compatibilité entre un profil candidat et \"\n        \"une offre d'emploi\"\n    ),\n    \"version\": os.getenv(\"API_VERSION\", \"2.0.0\"),\n    \"docs_url\": \"/docs\",",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "API_CONFIG",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "API_CONFIG = {\n    \"title\": \"API de Matching WorkFlexer\",\n    \"description\": (\n        \"API pour analyser la compatibilité entre un profil candidat et \"\n        \"une offre d'emploi\"\n    ),\n    \"version\": os.getenv(\"API_VERSION\", \"2.0.0\"),\n    \"docs_url\": \"/docs\",\n    \"redoc_url\": \"/redoc\",\n}",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "SIMILARITY_THRESHOLD",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "SIMILARITY_THRESHOLD = float(os.getenv(\"MODEL_SIMILARITY_THRESHOLD\", 0.75))\n# Configuration du logging\nLOG_CONFIG = {\n    \"level\": os.getenv(\"LOG_LEVEL\", \"INFO\"),\n    \"format\": \"%(asctime)s - %(name)s - %(levelname)s - %(message)s\",\n    \"filename\": os.getenv(\"LOG_FILE\", \"api_matching.log\"),\n}\n# Configuration CORS\nCORS_CONFIG = {\n    \"allow_origins\": os.getenv(\"CORS_ALLOWED_ORIGINS\", \"*\").split(\",\"),",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "LOG_CONFIG",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "LOG_CONFIG = {\n    \"level\": os.getenv(\"LOG_LEVEL\", \"INFO\"),\n    \"format\": \"%(asctime)s - %(name)s - %(levelname)s - %(message)s\",\n    \"filename\": os.getenv(\"LOG_FILE\", \"api_matching.log\"),\n}\n# Configuration CORS\nCORS_CONFIG = {\n    \"allow_origins\": os.getenv(\"CORS_ALLOWED_ORIGINS\", \"*\").split(\",\"),\n    \"allow_credentials\": True,\n    \"allow_methods\": [\"*\"],",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "CORS_CONFIG",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "CORS_CONFIG = {\n    \"allow_origins\": os.getenv(\"CORS_ALLOWED_ORIGINS\", \"*\").split(\",\"),\n    \"allow_credentials\": True,\n    \"allow_methods\": [\"*\"],\n    \"allow_headers\": [\"*\"],\n}\n# Nouvelles configurations pour l'analyse avancée\nADVANCED_CONFIG = {\n    # Seuils pour les niveaux d'adéquation\n    \"adequation_thresholds\": {",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "ADVANCED_CONFIG",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "ADVANCED_CONFIG = {\n    # Seuils pour les niveaux d'adéquation\n    \"adequation_thresholds\": {\n        \"excellent\": float(os.getenv(\"ADEQUATION_EXCELLENT\", 0.75)),\n        \"bon\": float(os.getenv(\"ADEQUATION_BON\", 0.50)),\n        \"moyen\": float(os.getenv(\"ADEQUATION_MOYEN\", 0.30)),\n        \"faible\": float(os.getenv(\"ADEQUATION_FAIBLE\", 0.0)),\n    },\n    # Poids par défaut pour l'analyse avancée\n    \"default_weights\": {",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "LEARNING_RESOURCES",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "LEARNING_RESOURCES = {\n    \"competences\": {\n        \"droit des contrats\": [\n            {\n                \"titre\": \"Formation en droit des contrats\",\n                \"type\": \"cours\",\n                \"url\": \"https://www.coursera.org/learn/contrats\",\n                \"duree\": \"4 semaines\",\n                \"niveau\": \"débutant\",\n            },",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "logger = logging.getLogger(\"api_matching\")\n# Configuration de l'API\napp = FastAPI(\n    title=config.API_CONFIG[\"title\"],\n    description=config.API_CONFIG[\"description\"],\n    version=config.API_CONFIG[\"version\"],\n    docs_url=config.API_CONFIG[\"docs_url\"],\n    redoc_url=config.API_CONFIG[\"redoc_url\"],\n)\n# Configuration CORS",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "app = FastAPI(\n    title=config.API_CONFIG[\"title\"],\n    description=config.API_CONFIG[\"description\"],\n    version=config.API_CONFIG[\"version\"],\n    docs_url=config.API_CONFIG[\"docs_url\"],\n    redoc_url=config.API_CONFIG[\"redoc_url\"],\n)\n# Configuration CORS\napp.add_middleware(\n    CORSMiddleware,",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Formation",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class Formation(BaseModel):\n    niveau: str\n    domaine: str\n    etablissement: Optional[str] = None\n    annee_obtention: Optional[int] = None\n    description: Optional[str] = None\n    date_debut: Optional[str] = None\n    date_fin: Optional[str] = None\n    en_cours: bool = False\n    type_formation: Optional[str] = None",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Experience",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class Experience(BaseModel):\n    titre_poste: str\n    entreprise: Optional[str] = None\n    duree_mois: int = 0\n    description: str = \"\"\n    competences: List[str] = Field(default_factory=list)\n    secteur: Optional[str] = None\n    date_debut: Optional[str] = None\n    date_fin: Optional[str] = None\n    en_cours: bool = False",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Competence",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class Competence(BaseModel):\n    nom: str\n    niveau: int = Field(ge=1, le=5, default=1)\n    annees_experience: float = 0.0\n    certifications: List[str] = Field(default_factory=list)\n    derniere_utilisation: Optional[str] = None\n    contexte_utilisation: List[str] = Field(default_factory=list)\n    type_competence: str = \"Technique\"\n    projets_associes: List[str] = Field(default_factory=list)\n    @validator('niveau')",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Langue",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class Langue(BaseModel):\n    nom: str\n    niveau: str = \"A1\"\n    certifications: List[str] = Field(default_factory=list)\n    date_certification: Optional[str] = None\n    contexte_utilisation: List[str] = Field(default_factory=list)\n    sejours_linguistiques: List[Dict[str, str]] = Field(default_factory=list)\n    @validator('niveau')\n    def validate_niveau(cls, v):\n        niveaux_valides = ['A1', 'A2', 'B1', 'B2', 'C1', 'C2']",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "ProjetPersonnel",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class ProjetPersonnel(BaseModel):\n    titre: str\n    description: str = \"\"\n    technologies: List[str] = Field(default_factory=list)\n    date_debut: Optional[str] = None\n    date_fin: Optional[str] = None\n    en_cours: bool = False\n    url: Optional[str] = None\n    images: List[str] = Field(default_factory=list)\n    competences_developpees: List[str] = Field(default_factory=list)",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "CandidatProfile",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class CandidatProfile(BaseModel):\n    id: int\n    formations: List[Formation] = Field(default_factory=list)\n    experiences: List[Experience] = Field(default_factory=list)\n    competences: List[Competence] = Field(default_factory=list)\n    langues: List[Langue] = Field(default_factory=list)\n    centres_interet: List[str] = Field(default_factory=list)\n    projets: List[ProjetPersonnel] = Field(default_factory=list)\n    disponibilite: Optional[str] = None\n    mobilite: Dict[str, Union[bool, List[str]]] = Field(default_factory=dict)",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "ExigenceFormation",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class ExigenceFormation(BaseModel):\n    niveau_minimum: str = \"Non spécifié\"\n    niveau_valeur: int = 0\n    domaines_acceptes: List[str] = Field(default_factory=list)\n    formation_obligatoire: bool = False\n    formations_alternatives: List[str] = Field(default_factory=list)\n    equivalences_acceptees: List[str] = Field(default_factory=list)\n    specialisations_preferees: List[str] = Field(default_factory=list)\nclass ExigenceExperience(BaseModel):\n    niveau: str = \"Non spécifié\"",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "ExigenceExperience",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class ExigenceExperience(BaseModel):\n    niveau: str = \"Non spécifié\"\n    duree_minimum_mois: int = 0\n    secteurs_acceptes: List[str] = Field(default_factory=list)\n    competences_requises: List[str] = Field(default_factory=list)\n    mots_cles_poste: List[str] = Field(default_factory=list)\n    niveaux_responsabilite: List[str] = Field(default_factory=list)\n    contextes_valorises: List[str] = Field(default_factory=list)\n    type_experience: List[str] = Field(default_factory=list)\nclass JobOffer(BaseModel):",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "JobOffer",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class JobOffer(BaseModel):\n    id: int\n    titre: str\n    description: str = \"\"\n    formation_requise: ExigenceFormation = Field(\n        default_factory=ExigenceFormation\n    )\n    experience_requise: ExigenceExperience = Field(\n        default_factory=ExigenceExperience\n    )",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "CompetenceAnalysis",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class CompetenceAnalysis(BaseModel):\n    score: float\n    niveau_actuel: int\n    niveau_requis: int\n    experience_pertinente: List[str] = Field(default_factory=list)\n    projets_pertinents: List[str] = Field(default_factory=list)\n    certifications_pertinentes: List[str] = Field(default_factory=list)\n    suggestions_amelioration: List[str] = Field(default_factory=list)\nclass DetailedScore(BaseModel):\n    score: float",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "DetailedScore",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class DetailedScore(BaseModel):\n    score: float\n    details: List[str] = Field(default_factory=list)\n    points_forts: List[str] = Field(default_factory=list)\n    points_faibles: List[str] = Field(default_factory=list)\n    recommandations: List[str] = Field(default_factory=list)\n    analyse_detaillee: Optional[Dict[str, Union[float, str, List[str]]]] = None\nclass ReportSection(BaseModel):\n    titre: str\n    score: float",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "ReportSection",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class ReportSection(BaseModel):\n    titre: str\n    score: float\n    points_forts: List[str] = Field(default_factory=list)\n    points_faibles: List[str] = Field(default_factory=list)\nclass MatchingScore(BaseModel):\n    formation: DetailedScore\n    experience: DetailedScore\n    competences: DetailedScore\n    langues: DetailedScore",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "MatchingScore",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class MatchingScore(BaseModel):\n    formation: DetailedScore\n    experience: DetailedScore\n    competences: DetailedScore\n    langues: DetailedScore\n    global_score: float\n    profil_completion: Dict[\n        str, Dict[str, Union[float, Dict[str, Union[int, float]]]]\n    ]\n    lacunes_critiques: List[Dict[str, str]] = Field(default_factory=list)",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "MatchingRequest",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class MatchingRequest(BaseModel):\n    candidate: CandidatProfile\n    job_offer: JobOffer\n    options: Dict[str, bool] = Field(default_factory=dict)\nclass ProfileCompletionDetails(BaseModel):\n    formations: float\n    experiences: float\n    competences: float\n    langues: float\nclass ProfileCompletionScore(BaseModel):",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "ProfileCompletionDetails",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class ProfileCompletionDetails(BaseModel):\n    formations: float\n    experiences: float\n    competences: float\n    langues: float\nclass ProfileCompletionScore(BaseModel):\n    score: float\n    details: ProfileCompletionDetails\n# Nouveaux modèles pour une meilleure structuration des résultats\nclass PointFort(BaseModel):",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "ProfileCompletionScore",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class ProfileCompletionScore(BaseModel):\n    score: float\n    details: ProfileCompletionDetails\n# Nouveaux modèles pour une meilleure structuration des résultats\nclass PointFort(BaseModel):\n    \"\"\"Représente un point fort du candidat par rapport à l'offre\"\"\"\n    description: str\n    categorie: str  # formation, experience, competence, langue\n    importance: str = \"normal\"  # critique, important, normal\n    details: Optional[str] = None",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "PointFort",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class PointFort(BaseModel):\n    \"\"\"Représente un point fort du candidat par rapport à l'offre\"\"\"\n    description: str\n    categorie: str  # formation, experience, competence, langue\n    importance: str = \"normal\"  # critique, important, normal\n    details: Optional[str] = None\n    impact_score: Optional[float] = None  # Impact sur le score global (0-1)\nclass PointAmelioration(BaseModel):\n    \"\"\"Représente un point à améliorer pour le candidat\"\"\"\n    description: str",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "PointAmelioration",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class PointAmelioration(BaseModel):\n    \"\"\"Représente un point à améliorer pour le candidat\"\"\"\n    description: str\n    categorie: str\n    priorite: str = \"normale\"\n    suggestion: Optional[str] = None\n    impact_potentiel: Optional[float] = None\n    ressources: Optional[List[Dict[str, str]]] = None\nclass CorrespondanceItem(BaseModel):\n    \"\"\"Élément de correspondance entre le profil et l'offre\"\"\"",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "CorrespondanceItem",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class CorrespondanceItem(BaseModel):\n    \"\"\"Élément de correspondance entre le profil et l'offre\"\"\"\n    element_profil: str\n    element_offre: str\n    niveau_correspondance: float  # 0 à 1\n    categorie: str\n    details_correspondance: Optional[str] = None\n    similarite_semantique: Optional[float] = None\nclass ElementManquant(BaseModel):\n    \"\"\"Élément requis par l'offre mais absent du profil\"\"\"",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "ElementManquant",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class ElementManquant(BaseModel):\n    \"\"\"Élément requis par l'offre mais absent du profil\"\"\"\n    description: str\n    categorie: str\n    importance: str = \"normale\"\n    suggestion_acquisition: Optional[str] = None\n    impact_sur_score: Optional[float] = None\n    difficulte_acquisition: Optional[str] = None\nclass AnalyseCategorielle(BaseModel):\n    \"\"\"Analyse détaillée d'une catégorie (formation, expérience, etc.)\"\"\"",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "AnalyseCategorielle",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class AnalyseCategorielle(BaseModel):\n    \"\"\"Analyse détaillée d'une catégorie (formation, expérience, etc.)\"\"\"\n    categorie: str\n    score: float\n    elements_correspondants: List[CorrespondanceItem] = Field(\n        default_factory=list\n    )\n    elements_manquants: List[ElementManquant] = Field(default_factory=list)\n    points_forts: List[str] = Field(default_factory=list)\n    points_amelioration: List[str] = Field(default_factory=list)",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "AnalyseDetaillee",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class AnalyseDetaillee(BaseModel):\n    \"\"\"Analyse détaillée de la compatibilité\"\"\"\n    formation: AnalyseCategorielle\n    experience: AnalyseCategorielle\n    competences: AnalyseCategorielle\n    langues: AnalyseCategorielle\n    facteurs_bonus: Optional[Dict[str, float]] = None\n    facteurs_malus: Optional[Dict[str, float]] = None\nclass Suggestion(BaseModel):\n    \"\"\"Suggestion d'amélioration pour le candidat\"\"\"",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Suggestion",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class Suggestion(BaseModel):\n    \"\"\"Suggestion d'amélioration pour le candidat\"\"\"\n    categorie: str\n    description: str\n    priorite: str = \"normale\"  # haute, moyenne, normale\n    impact_estime: str = \"moyen\"  # fort, moyen, faible\n    ressources_recommandees: Optional[List[Dict[str, str]]] = None\n    temps_acquisition_estime: Optional[str] = None  # court, moyen, long terme\n    cout_acquisition_estime: Optional[str] = None  # faible, modéré, élevé\nclass ContexteAnalyse(BaseModel):",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "ContexteAnalyse",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class ContexteAnalyse(BaseModel):\n    \"\"\"Contexte de l'analyse effectuée\"\"\"\n    timestamp: str = Field(default_factory=lambda: datetime.now().isoformat())\n    version_api: str = \"2.0.0\"\n    niveau_confiance: str = \"haute\"\n    modeles_utilises: Optional[Dict[str, str]] = None  # Modèles NLP utilisés\n    parametres_analyse: Optional[Dict[str, Any]] = None  # Paramètres utilisés\n    temps_analyse_ms: Optional[int] = None  # Temps d'analyse en millisecondes\n    source_donnees: Optional[str] = None  # Source des données analysées\nclass MatchingResponseV2(BaseModel):",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "MatchingResponseV2",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class MatchingResponseV2(BaseModel):\n    \"\"\"Nouvelle version du modèle de réponse pour l'API\"\"\"\n    score_global: float\n    niveau_adequation: str  # Excellent, Bon, Moyen, À améliorer\n    resume: str\n    points_forts: List[PointFort] = Field(default_factory=list)\n    points_amelioration: List[PointAmelioration] = Field(default_factory=list)\n    analyse_detaillee: AnalyseDetaillee\n    suggestions: List[Suggestion] = Field(default_factory=list)\n    contexte_analyse: ContexteAnalyse = Field(default_factory=ContexteAnalyse)",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "MatchingResponse",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class MatchingResponse(BaseModel):\n    \"\"\"Modèle de réponse pour l'API (version actuelle)\"\"\"\n    global_score: float\n    completion: ProfileCompletionScore\n    analyses: Dict[str, ReportSection]\n    synthesis: str\n    adequation_globale: str\n    contexte_analyse: Dict[str, Union[str, float, bool]] = Field(\n        default_factory=lambda: {\n            \"timestamp\": datetime.now().isoformat(),",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "AnalysisOptions",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class AnalysisOptions(BaseModel):\n    \"\"\"Options avancées pour personnaliser l'analyse\"\"\"\n    poids_formation: float = 0.25\n    poids_experience: float = 0.30\n    poids_competences: float = 0.35\n    poids_langues: float = 0.10\n    seuil_similarite_semantique: float = 0.75\n    activer_analyse_semantique: bool = True\n    activer_suggestions_personnalisees: bool = True\n    niveau_detail_analyse: str = \"complet\"  # simple, standard, complet",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "MatchingRequestV2",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class MatchingRequestV2(BaseModel):\n    \"\"\"Requête d'analyse avec options avancées\"\"\"\n    candidate: CandidatProfile\n    job_offer: JobOffer\n    options: Optional[AnalysisOptions] = Field(default_factory=AnalysisOptions)",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "start_api",
        "kind": 2,
        "importPath": "start_api",
        "description": "start_api",
        "peekOfCode": "def start_api():\n    \"\"\"Démarre l'API avec les paramètres configurés\"\"\"\n    try:\n        # Récupération du port depuis les variables d'environnement ou utilisation de la valeur par défaut\n        port = int(os.getenv(\"API_PORT\", 8000))\n        # Récupération du niveau de log\n        log_level = os.getenv(\"LOG_LEVEL\", \"info\").lower()\n        print(f\"Démarrage de l'API WorkFlexer sur le port {port}...\")\n        print(f\"Documentation interactive disponible à l'adresse: http://localhost:{port}/docs\")\n        print(f\"Documentation ReDoc disponible à l'adresse: http://localhost:{port}/redoc\")",
        "detail": "start_api",
        "documentation": {}
    },
    {
        "label": "normalize_text",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def normalize_text(text: str) -> str:\n    \"\"\"\n    Normalise un texte en utilisant spaCy pour le lemmatisation et la standardisation.\n    Args:\n        text (str): Texte à normaliser\n    Returns:\n        str: Texte normalisé\n    \"\"\"\n    if not text:\n        return \"\"",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "extract_keywords_with_spacy",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def extract_keywords_with_spacy(description: str) -> List[str]:\n    \"\"\"\n    Extrait les mots-clés pertinents en utilisant spaCy.\n    Args:\n        description (str): Description du texte\n    Returns:\n        List[str]: Liste des mots-clés extraits\n    \"\"\"\n    doc = nlp(description)\n    # Extraction des entités nommées et des noms communs",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "compare_niveau_etudes",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def compare_niveau_etudes(niveau_candidat: str, niveau_requis: str) -> float:\n    \"\"\"\n    Compare les niveaux d'études avec une approche plus flexible.\n    Args:\n        niveau_candidat (str): Niveau d'études du candidat\n        niveau_requis (str): Niveau d'études requis\n    Returns:\n        float: Score de compatibilité (0.0 à 1.0)\n    \"\"\"\n    # Normalisation des textes",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "compare_experience",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def compare_experience(experience_candidat: str, experience_requise: str) -> float:\n    \"\"\"\n    Compare les expériences avec une approche flexible.\n    Args:\n        experience_candidat (str): Expérience du candidat\n        experience_requise (str): Expérience requise\n    Returns:\n        float: Score de compatibilité (0.0 à 1.0)\n    \"\"\"\n    # Extraction des durées",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "extract_keywords_from_description",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def extract_keywords_from_description(description: str) -> List[str]:\n    \"\"\"\n    Extrait les mots-clés pertinents d'une description de poste.\n    Args:\n        description (str): Description du poste\n    Returns:\n        List[str]: Liste des mots-clés extraits\n    \"\"\"\n    # Liste de mots à ignorer\n    stop_words = {",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "get_niveau_etudes_value",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def get_niveau_etudes_value(niveau: str) -> int:\n    \"\"\"Convertit un niveau d'études en valeur numérique standardisée.\"\"\"\n    niveau = niveau.strip()\n    for key, data in NIVEAU_ETUDES_MAP.items():\n        if niveau == key or niveau in data[\"equivalents\"]:\n            return data[\"niveau\"]\n    return 0\ndef analyze_profile_completion(profile: CandidatProfile) -> Dict:\n    \"\"\"Analyse le niveau de complétion du profil.\"\"\"\n    scores = {}",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "analyze_profile_completion",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def analyze_profile_completion(profile: CandidatProfile) -> Dict:\n    \"\"\"Analyse le niveau de complétion du profil.\"\"\"\n    scores = {}\n    # Vérification des formations\n    if profile.formations:\n        formations_score = sum(\n            1 for f in profile.formations if f.niveau and f.domaine and f.etablissement\n        ) / len(profile.formations)\n        scores[\"formations\"] = formations_score\n    else:",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "analyze_formation_compatibility",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def analyze_formation_compatibility(\n    formations: List[Formation],\n    exigence: ExigenceFormation,\n    niveau_etude_profil: Optional[str],\n    niveau_etude_valeur: Optional[int] = None\n) -> Tuple[float, List[str], List[str]]:\n    \"\"\"Analyse de la compatibilité des formations, incluant le niveau d'étude global.\"\"\"\n    points_forts = []\n    recommendations = []\n    score_total = 0.0",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "calculate_domain_similarity",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def calculate_domain_similarity(domain1: str, domain2: str) -> float:\n    \"\"\"\n    Calcule la similarité sémantique entre deux domaines de formation\n    en utilisant une approche plus stricte et rigoureuse.\n    Args:\n        domain1: Premier domaine\n        domain2: Deuxième domaine\n    Returns:\n        Score de similarité entre 0 et 1\n    \"\"\"",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "analyze_experience_compatibility",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def analyze_experience_compatibility(\n    experiences: List[Experience],\n    exigence: ExigenceExperience,\n    niveau_experience_valeur: Optional[int] = None\n) -> Tuple[float, List[str], List[str]]:\n    \"\"\"Analyse approfondie de la compatibilité des expériences professionnelles.\"\"\"\n    points_forts = []\n    recommendations = []\n    # Analyse de la durée d'expérience\n    if niveau_experience_valeur is not None:",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "analyze_compatibility_v2",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def analyze_compatibility_v2(candidate: CandidatProfile, offer: JobOffer) -> MatchingResponseV2:\n    \"\"\"\n    Analyse de compatibilité V2 avec une logique métier et une analyse contextuelle.\n    \"\"\"\n    # 1. Analyse de la trajectoire professionnelle\n    path_analysis = _analyze_career_path(candidate.experiences, offer.titre)\n    # 2. Analyse de la formation\n    etude_candidat_val = candidate.niveau_etude_valeur or 0\n    etude_offre_val = offer.formation_requise.niveau_valeur or 0\n    score_formation = 0.0",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "generate_section_resume",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def generate_section_resume(categorie: str, score: float, details: List[str], recommandations: List[str]) -> str:\n    \"\"\"Génère un résumé textuel pour une section d'analyse.\"\"\"\n    score_pct = round(score * 100)\n    if score_pct >= 80:\n        niveau = \"excellente\"\n    elif score_pct >= 60:\n        niveau = \"bonne\"\n    elif score_pct >= 40:\n        niveau = \"moyenne\"\n    else:",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "semantic_model",
        "kind": 5,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "semantic_model = SentenceTransformer(\"paraphrase-multilingual-MiniLM-L12-v2\")\nlogger = logging.getLogger(__name__)\n# Charger le modèle français de spaCy\ntry:\n    nlp = spacy.load(\"fr_core_news_sm\")\nexcept OSError:\n    print(\"Téléchargement du modèle spaCy français...\")\n    spacy.cli.download(\"fr_core_news_sm\")\n    nlp = spacy.load(\"fr_core_news_sm\")\n# Constantes pour l'analyse",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "logger = logging.getLogger(__name__)\n# Charger le modèle français de spaCy\ntry:\n    nlp = spacy.load(\"fr_core_news_sm\")\nexcept OSError:\n    print(\"Téléchargement du modèle spaCy français...\")\n    spacy.cli.download(\"fr_core_news_sm\")\n    nlp = spacy.load(\"fr_core_news_sm\")\n# Constantes pour l'analyse\nCOMPLETION_THRESHOLD = config.WEIGHTS.get(\"completion_threshold\", 0.7)",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "COMPLETION_THRESHOLD",
        "kind": 5,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "COMPLETION_THRESHOLD = config.WEIGHTS.get(\"completion_threshold\", 0.7)\nEXPERIENCE_WEIGHT = config.WEIGHTS.get(\"experience\", 0.35)\nFORMATION_WEIGHT = config.WEIGHTS.get(\"formation\", 0.25)\nCOMPETENCES_WEIGHT = config.WEIGHTS.get(\"competences\", 0.25)\nLANGUES_WEIGHT = config.WEIGHTS.get(\"langues\", 0.15)\n# Poids pour le calcul du score global\nWEIGHTS = {\n    \"formation\": 0.25,\n    \"experience\": 0.35,\n    \"competences\": 0.30,",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "EXPERIENCE_WEIGHT",
        "kind": 5,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "EXPERIENCE_WEIGHT = config.WEIGHTS.get(\"experience\", 0.35)\nFORMATION_WEIGHT = config.WEIGHTS.get(\"formation\", 0.25)\nCOMPETENCES_WEIGHT = config.WEIGHTS.get(\"competences\", 0.25)\nLANGUES_WEIGHT = config.WEIGHTS.get(\"langues\", 0.15)\n# Poids pour le calcul du score global\nWEIGHTS = {\n    \"formation\": 0.25,\n    \"experience\": 0.35,\n    \"competences\": 0.30,\n    \"langues\": 0.10,",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "FORMATION_WEIGHT",
        "kind": 5,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "FORMATION_WEIGHT = config.WEIGHTS.get(\"formation\", 0.25)\nCOMPETENCES_WEIGHT = config.WEIGHTS.get(\"competences\", 0.25)\nLANGUES_WEIGHT = config.WEIGHTS.get(\"langues\", 0.15)\n# Poids pour le calcul du score global\nWEIGHTS = {\n    \"formation\": 0.25,\n    \"experience\": 0.35,\n    \"competences\": 0.30,\n    \"langues\": 0.10,\n}",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "COMPETENCES_WEIGHT",
        "kind": 5,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "COMPETENCES_WEIGHT = config.WEIGHTS.get(\"competences\", 0.25)\nLANGUES_WEIGHT = config.WEIGHTS.get(\"langues\", 0.15)\n# Poids pour le calcul du score global\nWEIGHTS = {\n    \"formation\": 0.25,\n    \"experience\": 0.35,\n    \"competences\": 0.30,\n    \"langues\": 0.10,\n}\nSIMILARITY_THRESHOLD = 0.7  # Seuil pour la similarité sémantique des compétences",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "LANGUES_WEIGHT",
        "kind": 5,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "LANGUES_WEIGHT = config.WEIGHTS.get(\"langues\", 0.15)\n# Poids pour le calcul du score global\nWEIGHTS = {\n    \"formation\": 0.25,\n    \"experience\": 0.35,\n    \"competences\": 0.30,\n    \"langues\": 0.10,\n}\nSIMILARITY_THRESHOLD = 0.7  # Seuil pour la similarité sémantique des compétences\n# Fonction de normalisation linguistique",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "WEIGHTS",
        "kind": 5,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "WEIGHTS = {\n    \"formation\": 0.25,\n    \"experience\": 0.35,\n    \"competences\": 0.30,\n    \"langues\": 0.10,\n}\nSIMILARITY_THRESHOLD = 0.7  # Seuil pour la similarité sémantique des compétences\n# Fonction de normalisation linguistique\ndef normalize_text(text: str) -> str:\n    \"\"\"",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "SIMILARITY_THRESHOLD",
        "kind": 5,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "SIMILARITY_THRESHOLD = 0.7  # Seuil pour la similarité sémantique des compétences\n# Fonction de normalisation linguistique\ndef normalize_text(text: str) -> str:\n    \"\"\"\n    Normalise un texte en utilisant spaCy pour le lemmatisation et la standardisation.\n    Args:\n        text (str): Texte à normaliser\n    Returns:\n        str: Texte normalisé\n    \"\"\"",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "NIVEAU_ETUDES_MAP",
        "kind": 5,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "NIVEAU_ETUDES_MAP = {\n    \"Bac\": {\"niveau\": 1, \"equivalents\": [\"Baccalauréat\", \"High School\"]},\n    \"Bac+2\": {\"niveau\": 2, \"equivalents\": [\"DUT\", \"BTS\", \"DEUG\"]},\n    \"Bac+3\": {\"niveau\": 3, \"equivalents\": [\"Licence\", \"Bachelor\"]},\n    \"Bac+4\": {\"niveau\": 4, \"equivalents\": [\"Maîtrise\", \"Master 1\"]},\n    \"Bac+5\": {\"niveau\": 5, \"equivalents\": [\"Master\", \"Ingénieur\", \"MBA\"]},\n    \"Doctorat\": {\"niveau\": 8, \"equivalents\": [\"PhD\", \"Doctorate\"]},\n}\ndef get_niveau_etudes_value(niveau: str) -> int:\n    \"\"\"Convertit un niveau d'études en valeur numérique standardisée.\"\"\"",
        "detail": "utils",
        "documentation": {}
    }
]