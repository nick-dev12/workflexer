[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "RequestValidationError",
        "importPath": "fastapi.exceptions",
        "description": "fastapi.exceptions",
        "isExtraImport": true,
        "detail": "fastapi.exceptions",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Set",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "MatchingRequest",
        "importPath": "api1.models",
        "description": "api1.models",
        "isExtraImport": true,
        "detail": "api1.models",
        "documentation": {}
    },
    {
        "label": "MatchingResponse",
        "importPath": "api1.models",
        "description": "api1.models",
        "isExtraImport": true,
        "detail": "api1.models",
        "documentation": {}
    },
    {
        "label": "MatchingResponseV2",
        "importPath": "api1.models",
        "description": "api1.models",
        "isExtraImport": true,
        "detail": "api1.models",
        "documentation": {}
    },
    {
        "label": "MatchingRequestV2",
        "importPath": "api1.models",
        "description": "api1.models",
        "isExtraImport": true,
        "detail": "api1.models",
        "documentation": {}
    },
    {
        "label": "ContexteAnalyse",
        "importPath": "api1.models",
        "description": "api1.models",
        "isExtraImport": true,
        "detail": "api1.models",
        "documentation": {}
    },
    {
        "label": "analyze_compatibility",
        "importPath": "api1.utils",
        "description": "api1.utils",
        "isExtraImport": true,
        "detail": "api1.utils",
        "documentation": {}
    },
    {
        "label": "normalize_text",
        "importPath": "api1.utils",
        "description": "api1.utils",
        "isExtraImport": true,
        "detail": "api1.utils",
        "documentation": {}
    },
    {
        "label": "api1.config",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "api1.config",
        "description": "api1.config",
        "detail": "api1.config",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "validator",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "find_packages",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "spacy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "spacy",
        "description": "spacy",
        "detail": "spacy",
        "documentation": {}
    },
    {
        "label": "nltk",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "nltk",
        "description": "nltk",
        "detail": "nltk",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "uvicorn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uvicorn",
        "description": "uvicorn",
        "detail": "uvicorn",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "SentenceTransformer",
        "importPath": "sentence_transformers",
        "description": "sentence_transformers",
        "isExtraImport": true,
        "detail": "sentence_transformers",
        "documentation": {}
    },
    {
        "label": "util",
        "importPath": "sentence_transformers",
        "description": "sentence_transformers",
        "isExtraImport": true,
        "detail": "sentence_transformers",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "stopwords",
        "importPath": "nltk.corpus",
        "description": "nltk.corpus",
        "isExtraImport": true,
        "detail": "nltk.corpus",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "config",
        "description": "config",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "CandidatProfile",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "JobOffer",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "MatchingResponse",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "MatchingResponseV2",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Formation",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Experience",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Competence",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Langue",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "ExigenceFormation",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "ExigenceExperience",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "AnalyseCategorielle",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "AnalyseDetaillee",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "PointFort",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "PointAmelioration",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Suggestion",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "CorrespondanceItem",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "ElementManquant",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "WEIGHTS",
        "kind": 5,
        "importPath": "api1.config",
        "description": "api1.config",
        "peekOfCode": "WEIGHTS = {\n    \"competences\": float(\n        os.getenv(\"COMPETENCES_WEIGHT\", 0.40)\n    ),  # 40% pour les compétences\n    \"formation\": float(\n        os.getenv(\"FORMATION_WEIGHT\", 0.20)\n    ),  # 20% pour la formation/diplômes\n    \"experience\": float(\n        os.getenv(\"EXPERIENCE_WEIGHT\", 0.20)\n    ),  # 20% pour l'expérience professionnelle",
        "detail": "api1.config",
        "documentation": {}
    },
    {
        "label": "COMPATIBILITY_THRESHOLDS",
        "kind": 5,
        "importPath": "api1.config",
        "description": "api1.config",
        "peekOfCode": "COMPATIBILITY_THRESHOLDS = {\n    \"excellent\": float(\n        os.getenv(\"THRESHOLD_EXCELLENT\", 0.85)\n    ),  # Au-dessus de 85% = excellente compatibilité\n    \"good\": float(\n        os.getenv(\"THRESHOLD_GOOD\", 0.70)\n    ),  # Entre 70% et 85% = bonne compatibilité\n    \"moderate\": float(\n        os.getenv(\"THRESHOLD_MODERATE\", 0.50)\n    ),  # Entre 50% et 70% = compatibilité moyenne",
        "detail": "api1.config",
        "documentation": {}
    },
    {
        "label": "COMPATIBILITY_MESSAGES",
        "kind": 5,
        "importPath": "api1.config",
        "description": "api1.config",
        "peekOfCode": "COMPATIBILITY_MESSAGES = {\n    \"excellent\": \"Votre profil correspond parfaitement à cette offre!\",\n    \"good\": \"Votre profil correspond bien à cette offre.\",\n    \"moderate\": \"Votre profil correspond partiellement à cette offre.\",\n    \"low\": \"Votre profil correspond peu à cette offre.\",\n    \"poor\": \"Votre profil ne correspond pas à cette offre.\",\n}\n# Nombre maximum de points forts et points à améliorer à retourner\nMAX_STRENGTHS = int(os.getenv(\"MAX_STRENGTHS\", 5))\nMAX_IMPROVEMENTS = int(os.getenv(\"MAX_IMPROVEMENTS\", 5))",
        "detail": "api1.config",
        "documentation": {}
    },
    {
        "label": "MAX_STRENGTHS",
        "kind": 5,
        "importPath": "api1.config",
        "description": "api1.config",
        "peekOfCode": "MAX_STRENGTHS = int(os.getenv(\"MAX_STRENGTHS\", 5))\nMAX_IMPROVEMENTS = int(os.getenv(\"MAX_IMPROVEMENTS\", 5))\n# Nouveaux seuils de similarité par catégorie\nSIMILARITY_THRESHOLDS = {\n    \"competences\": float(os.getenv(\"COMPETENCES_SIMILARITY_THRESHOLD\", 0.75)),\n    \"domaines_formation\": float(os.getenv(\"FORMATION_SIMILARITY_THRESHOLD\", 0.65)),\n}\n# Configuration de l'API\nAPI_CONFIG = {\n    \"title\": \"API de Matching WorkFlexer\",",
        "detail": "api1.config",
        "documentation": {}
    },
    {
        "label": "MAX_IMPROVEMENTS",
        "kind": 5,
        "importPath": "api1.config",
        "description": "api1.config",
        "peekOfCode": "MAX_IMPROVEMENTS = int(os.getenv(\"MAX_IMPROVEMENTS\", 5))\n# Nouveaux seuils de similarité par catégorie\nSIMILARITY_THRESHOLDS = {\n    \"competences\": float(os.getenv(\"COMPETENCES_SIMILARITY_THRESHOLD\", 0.75)),\n    \"domaines_formation\": float(os.getenv(\"FORMATION_SIMILARITY_THRESHOLD\", 0.65)),\n}\n# Configuration de l'API\nAPI_CONFIG = {\n    \"title\": \"API de Matching WorkFlexer\",\n    \"description\": \"API pour analyser la compatibilité entre un profil candidat et une offre d'emploi\",",
        "detail": "api1.config",
        "documentation": {}
    },
    {
        "label": "SIMILARITY_THRESHOLDS",
        "kind": 5,
        "importPath": "api1.config",
        "description": "api1.config",
        "peekOfCode": "SIMILARITY_THRESHOLDS = {\n    \"competences\": float(os.getenv(\"COMPETENCES_SIMILARITY_THRESHOLD\", 0.75)),\n    \"domaines_formation\": float(os.getenv(\"FORMATION_SIMILARITY_THRESHOLD\", 0.65)),\n}\n# Configuration de l'API\nAPI_CONFIG = {\n    \"title\": \"API de Matching WorkFlexer\",\n    \"description\": \"API pour analyser la compatibilité entre un profil candidat et une offre d'emploi\",\n    \"version\": os.getenv(\"API_VERSION\", \"2.0.0\"),\n    \"docs_url\": \"/docs\",",
        "detail": "api1.config",
        "documentation": {}
    },
    {
        "label": "API_CONFIG",
        "kind": 5,
        "importPath": "api1.config",
        "description": "api1.config",
        "peekOfCode": "API_CONFIG = {\n    \"title\": \"API de Matching WorkFlexer\",\n    \"description\": \"API pour analyser la compatibilité entre un profil candidat et une offre d'emploi\",\n    \"version\": os.getenv(\"API_VERSION\", \"2.0.0\"),\n    \"docs_url\": \"/docs\",\n    \"redoc_url\": \"/redoc\",\n}\n# Configuration du logging\nLOG_CONFIG = {\n    \"level\": os.getenv(\"LOG_LEVEL\", \"INFO\"),",
        "detail": "api1.config",
        "documentation": {}
    },
    {
        "label": "LOG_CONFIG",
        "kind": 5,
        "importPath": "api1.config",
        "description": "api1.config",
        "peekOfCode": "LOG_CONFIG = {\n    \"level\": os.getenv(\"LOG_LEVEL\", \"INFO\"),\n    \"format\": \"%(asctime)s - %(name)s - %(levelname)s - %(message)s\",\n    \"filename\": os.getenv(\"LOG_FILE\", \"api_matching.log\"),\n}\n# Configuration CORS\nCORS_CONFIG = {\n    \"allow_origins\": os.getenv(\"CORS_ALLOWED_ORIGINS\", \"*\").split(\",\"),\n    \"allow_credentials\": True,\n    \"allow_methods\": [\"*\"],",
        "detail": "api1.config",
        "documentation": {}
    },
    {
        "label": "CORS_CONFIG",
        "kind": 5,
        "importPath": "api1.config",
        "description": "api1.config",
        "peekOfCode": "CORS_CONFIG = {\n    \"allow_origins\": os.getenv(\"CORS_ALLOWED_ORIGINS\", \"*\").split(\",\"),\n    \"allow_credentials\": True,\n    \"allow_methods\": [\"*\"],\n    \"allow_headers\": [\"*\"],\n}\n# Nouvelles configurations pour l'analyse avancée\nADVANCED_CONFIG = {\n    # Seuils pour les niveaux d'adéquation\n    \"adequation_thresholds\": {",
        "detail": "api1.config",
        "documentation": {}
    },
    {
        "label": "ADVANCED_CONFIG",
        "kind": 5,
        "importPath": "api1.config",
        "description": "api1.config",
        "peekOfCode": "ADVANCED_CONFIG = {\n    # Seuils pour les niveaux d'adéquation\n    \"adequation_thresholds\": {\n        \"excellent\": float(os.getenv(\"ADEQUATION_EXCELLENT\", 0.75)),\n        \"bon\": float(os.getenv(\"ADEQUATION_BON\", 0.50)),\n        \"moyen\": float(os.getenv(\"ADEQUATION_MOYEN\", 0.30)),\n        \"faible\": float(os.getenv(\"ADEQUATION_FAIBLE\", 0.0)),\n    },\n    # Poids par défaut pour l'analyse avancée\n    \"default_weights\": {",
        "detail": "api1.config",
        "documentation": {}
    },
    {
        "label": "LEARNING_RESOURCES",
        "kind": 5,
        "importPath": "api1.config",
        "description": "api1.config",
        "peekOfCode": "LEARNING_RESOURCES = {\n    \"competences\": {\n        \"droit des contrats\": [\n            {\n                \"titre\": \"Formation en droit des contrats\",\n                \"type\": \"cours\",\n                \"url\": \"https://www.coursera.org/learn/contrats\",\n                \"duree\": \"4 semaines\",\n                \"niveau\": \"débutant\",\n            },",
        "detail": "api1.config",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "api1.main",
        "description": "api1.main",
        "peekOfCode": "logger = logging.getLogger(\"api_matching\")\n# Configuration de l'API\napp = FastAPI(\n    title=config.API_CONFIG[\"title\"],\n    description=config.API_CONFIG[\"description\"],\n    version=config.API_CONFIG[\"version\"],\n    docs_url=config.API_CONFIG[\"docs_url\"],\n    redoc_url=config.API_CONFIG[\"redoc_url\"],\n)\n# Configuration CORS",
        "detail": "api1.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "api1.main",
        "description": "api1.main",
        "peekOfCode": "app = FastAPI(\n    title=config.API_CONFIG[\"title\"],\n    description=config.API_CONFIG[\"description\"],\n    version=config.API_CONFIG[\"version\"],\n    docs_url=config.API_CONFIG[\"docs_url\"],\n    redoc_url=config.API_CONFIG[\"redoc_url\"],\n)\n# Configuration CORS\napp.add_middleware(\n    CORSMiddleware,",
        "detail": "api1.main",
        "documentation": {}
    },
    {
        "label": "Formation",
        "kind": 6,
        "importPath": "api1.models",
        "description": "api1.models",
        "peekOfCode": "class Formation(BaseModel):\n    niveau: str\n    domaine: str\n    etablissement: Optional[str] = None\n    annee_obtention: Optional[int] = None\n    description: Optional[str] = None\n    date_debut: Optional[str] = None\n    date_fin: Optional[str] = None\n    en_cours: bool = False\n    type_formation: Optional[str] = None",
        "detail": "api1.models",
        "documentation": {}
    },
    {
        "label": "Experience",
        "kind": 6,
        "importPath": "api1.models",
        "description": "api1.models",
        "peekOfCode": "class Experience(BaseModel):\n    titre_poste: str\n    entreprise: Optional[str] = None\n    duree_mois: int = 0\n    description: str = \"\"\n    competences: List[str] = Field(default_factory=list)\n    secteur: Optional[str] = None\n    date_debut: Optional[str] = None\n    date_fin: Optional[str] = None\n    en_cours: bool = False",
        "detail": "api1.models",
        "documentation": {}
    },
    {
        "label": "Competence",
        "kind": 6,
        "importPath": "api1.models",
        "description": "api1.models",
        "peekOfCode": "class Competence(BaseModel):\n    nom: str\n    niveau: int = Field(ge=1, le=5, default=1)\n    annees_experience: float = 0.0\n    certifications: List[str] = Field(default_factory=list)\n    derniere_utilisation: Optional[str] = None\n    contexte_utilisation: List[str] = Field(default_factory=list)\n    type_competence: str = \"Technique\"\n    projets_associes: List[str] = Field(default_factory=list)\n    @validator('niveau')",
        "detail": "api1.models",
        "documentation": {}
    },
    {
        "label": "Langue",
        "kind": 6,
        "importPath": "api1.models",
        "description": "api1.models",
        "peekOfCode": "class Langue(BaseModel):\n    nom: str\n    niveau: str = \"A1\"\n    certifications: List[str] = Field(default_factory=list)\n    date_certification: Optional[str] = None\n    contexte_utilisation: List[str] = Field(default_factory=list)\n    sejours_linguistiques: List[Dict[str, str]] = Field(default_factory=list)\n    @validator('niveau')\n    def validate_niveau(cls, v):\n        niveaux_valides = ['A1', 'A2', 'B1', 'B2', 'C1', 'C2']",
        "detail": "api1.models",
        "documentation": {}
    },
    {
        "label": "ProjetPersonnel",
        "kind": 6,
        "importPath": "api1.models",
        "description": "api1.models",
        "peekOfCode": "class ProjetPersonnel(BaseModel):\n    titre: str\n    description: str = \"\"\n    technologies: List[str] = Field(default_factory=list)\n    date_debut: Optional[str] = None\n    date_fin: Optional[str] = None\n    en_cours: bool = False\n    url: Optional[str] = None\n    images: List[str] = Field(default_factory=list)\n    competences_developpees: List[str] = Field(default_factory=list)",
        "detail": "api1.models",
        "documentation": {}
    },
    {
        "label": "CandidatProfile",
        "kind": 6,
        "importPath": "api1.models",
        "description": "api1.models",
        "peekOfCode": "class CandidatProfile(BaseModel):\n    id: int\n    formations: List[Formation] = Field(default_factory=list)\n    experiences: List[Experience] = Field(default_factory=list)\n    competences: List[Competence] = Field(default_factory=list)\n    langues: List[Langue] = Field(default_factory=list)\n    centres_interet: List[str] = Field(default_factory=list)\n    projets: List[ProjetPersonnel] = Field(default_factory=list)\n    disponibilite: Optional[str] = None\n    mobilite: Dict[str, Union[bool, List[str]]] = Field(default_factory=dict)",
        "detail": "api1.models",
        "documentation": {}
    },
    {
        "label": "ExigenceFormation",
        "kind": 6,
        "importPath": "api1.models",
        "description": "api1.models",
        "peekOfCode": "class ExigenceFormation(BaseModel):\n    niveau_minimum: str = \"Non spécifié\"\n    niveau_valeur: int = 0\n    domaines_acceptes: List[str] = Field(default_factory=list)\n    formation_obligatoire: bool = False\n    formations_alternatives: List[str] = Field(default_factory=list)\n    equivalences_acceptees: List[str] = Field(default_factory=list)\n    specialisations_preferees: List[str] = Field(default_factory=list)\nclass ExigenceExperience(BaseModel):\n    niveau: str = \"Non spécifié\"",
        "detail": "api1.models",
        "documentation": {}
    },
    {
        "label": "ExigenceExperience",
        "kind": 6,
        "importPath": "api1.models",
        "description": "api1.models",
        "peekOfCode": "class ExigenceExperience(BaseModel):\n    niveau: str = \"Non spécifié\"\n    duree_minimum_mois: int = 0\n    secteurs_acceptes: List[str] = Field(default_factory=list)\n    competences_requises: List[str] = Field(default_factory=list)\n    mots_cles_poste: List[str] = Field(default_factory=list)\n    niveaux_responsabilite: List[str] = Field(default_factory=list)\n    contextes_valorises: List[str] = Field(default_factory=list)\n    type_experience: List[str] = Field(default_factory=list)\nclass JobOffer(BaseModel):",
        "detail": "api1.models",
        "documentation": {}
    },
    {
        "label": "JobOffer",
        "kind": 6,
        "importPath": "api1.models",
        "description": "api1.models",
        "peekOfCode": "class JobOffer(BaseModel):\n    id: int\n    titre: str\n    description: str = \"\"\n    formation_requise: ExigenceFormation = Field(default_factory=ExigenceFormation)\n    experience_requise: ExigenceExperience = Field(default_factory=ExigenceExperience)\n    competences_requises: List[Competence] = Field(default_factory=list)\n    langues_requises: List[Langue] = Field(default_factory=list)\n    secteur: str\n    type_contrat: str",
        "detail": "api1.models",
        "documentation": {}
    },
    {
        "label": "CompetenceAnalysis",
        "kind": 6,
        "importPath": "api1.models",
        "description": "api1.models",
        "peekOfCode": "class CompetenceAnalysis(BaseModel):\n    score: float\n    niveau_actuel: int\n    niveau_requis: int\n    experience_pertinente: List[str] = Field(default_factory=list)\n    projets_pertinents: List[str] = Field(default_factory=list)\n    certifications_pertinentes: List[str] = Field(default_factory=list)\n    suggestions_amelioration: List[str] = Field(default_factory=list)\nclass DetailedScore(BaseModel):\n    score: float",
        "detail": "api1.models",
        "documentation": {}
    },
    {
        "label": "DetailedScore",
        "kind": 6,
        "importPath": "api1.models",
        "description": "api1.models",
        "peekOfCode": "class DetailedScore(BaseModel):\n    score: float\n    details: List[str] = Field(default_factory=list)\n    points_forts: List[str] = Field(default_factory=list)\n    points_faibles: List[str] = Field(default_factory=list)\n    recommandations: List[str] = Field(default_factory=list)\n    analyse_detaillee: Optional[Dict[str, Union[float, str, List[str]]]] = None\nclass ReportSection(BaseModel):\n    titre: str\n    score: float",
        "detail": "api1.models",
        "documentation": {}
    },
    {
        "label": "ReportSection",
        "kind": 6,
        "importPath": "api1.models",
        "description": "api1.models",
        "peekOfCode": "class ReportSection(BaseModel):\n    titre: str\n    score: float\n    points_forts: List[str] = Field(default_factory=list)\n    points_faibles: List[str] = Field(default_factory=list)\nclass MatchingScore(BaseModel):\n    formation: DetailedScore\n    experience: DetailedScore\n    competences: DetailedScore\n    langues: DetailedScore",
        "detail": "api1.models",
        "documentation": {}
    },
    {
        "label": "MatchingScore",
        "kind": 6,
        "importPath": "api1.models",
        "description": "api1.models",
        "peekOfCode": "class MatchingScore(BaseModel):\n    formation: DetailedScore\n    experience: DetailedScore\n    competences: DetailedScore\n    langues: DetailedScore\n    global_score: float\n    profil_completion: Dict[str, Dict[str, Union[float, Dict[str, Union[int, float]]]]]\n    lacunes_critiques: List[Dict[str, str]] = Field(default_factory=list)\n    atouts_majeurs: List[Dict[str, str]] = Field(default_factory=list)\n    suggestions_amelioration: List[Dict[str, str]] = Field(default_factory=list)",
        "detail": "api1.models",
        "documentation": {}
    },
    {
        "label": "MatchingRequest",
        "kind": 6,
        "importPath": "api1.models",
        "description": "api1.models",
        "peekOfCode": "class MatchingRequest(BaseModel):\n    candidate: CandidatProfile\n    job_offer: JobOffer\n    options: Dict[str, bool] = Field(default_factory=dict)\nclass ProfileCompletionDetails(BaseModel):\n    formations: float\n    experiences: float\n    competences: float\n    langues: float\nclass ProfileCompletionScore(BaseModel):",
        "detail": "api1.models",
        "documentation": {}
    },
    {
        "label": "ProfileCompletionDetails",
        "kind": 6,
        "importPath": "api1.models",
        "description": "api1.models",
        "peekOfCode": "class ProfileCompletionDetails(BaseModel):\n    formations: float\n    experiences: float\n    competences: float\n    langues: float\nclass ProfileCompletionScore(BaseModel):\n    score: float\n    details: ProfileCompletionDetails\n# Nouveaux modèles pour une meilleure structuration des résultats\nclass PointFort(BaseModel):",
        "detail": "api1.models",
        "documentation": {}
    },
    {
        "label": "ProfileCompletionScore",
        "kind": 6,
        "importPath": "api1.models",
        "description": "api1.models",
        "peekOfCode": "class ProfileCompletionScore(BaseModel):\n    score: float\n    details: ProfileCompletionDetails\n# Nouveaux modèles pour une meilleure structuration des résultats\nclass PointFort(BaseModel):\n    \"\"\"Représente un point fort du candidat par rapport à l'offre\"\"\"\n    description: str\n    categorie: str  # formation, experience, competence, langue\n    importance: str = \"normal\"  # critique, important, normal\n    details: Optional[str] = None",
        "detail": "api1.models",
        "documentation": {}
    },
    {
        "label": "PointFort",
        "kind": 6,
        "importPath": "api1.models",
        "description": "api1.models",
        "peekOfCode": "class PointFort(BaseModel):\n    \"\"\"Représente un point fort du candidat par rapport à l'offre\"\"\"\n    description: str\n    categorie: str  # formation, experience, competence, langue\n    importance: str = \"normal\"  # critique, important, normal\n    details: Optional[str] = None\n    impact_score: Optional[float] = None  # Impact sur le score global (0-1)\nclass PointAmelioration(BaseModel):\n    \"\"\"Représente un point à améliorer pour le candidat\"\"\"\n    description: str",
        "detail": "api1.models",
        "documentation": {}
    },
    {
        "label": "PointAmelioration",
        "kind": 6,
        "importPath": "api1.models",
        "description": "api1.models",
        "peekOfCode": "class PointAmelioration(BaseModel):\n    \"\"\"Représente un point à améliorer pour le candidat\"\"\"\n    description: str\n    categorie: str  # formation, experience, competence, langue\n    priorite: str = \"normale\"  # haute, moyenne, normale\n    suggestion: Optional[str] = None\n    impact_potentiel: Optional[float] = None  # Impact potentiel sur le score (0-1)\n    ressources: Optional[List[Dict[str, str]]] = None  # Ressources pour s'améliorer\nclass CorrespondanceItem(BaseModel):\n    \"\"\"Élément de correspondance entre le profil et l'offre\"\"\"",
        "detail": "api1.models",
        "documentation": {}
    },
    {
        "label": "CorrespondanceItem",
        "kind": 6,
        "importPath": "api1.models",
        "description": "api1.models",
        "peekOfCode": "class CorrespondanceItem(BaseModel):\n    \"\"\"Élément de correspondance entre le profil et l'offre\"\"\"\n    element_profil: str\n    element_offre: str\n    niveau_correspondance: float  # 0 à 1\n    categorie: str  # formation, experience, competence, langue\n    details_correspondance: Optional[str] = None\n    similarite_semantique: Optional[float] = None  # Pour les correspondances sémantiques\nclass ElementManquant(BaseModel):\n    \"\"\"Élément requis par l'offre mais absent du profil\"\"\"",
        "detail": "api1.models",
        "documentation": {}
    },
    {
        "label": "ElementManquant",
        "kind": 6,
        "importPath": "api1.models",
        "description": "api1.models",
        "peekOfCode": "class ElementManquant(BaseModel):\n    \"\"\"Élément requis par l'offre mais absent du profil\"\"\"\n    description: str\n    categorie: str\n    importance: str = \"normale\"  # critique, importante, normale\n    suggestion_acquisition: Optional[str] = None\n    impact_sur_score: Optional[float] = None  # Impact sur le score global (0-1)\n    difficulte_acquisition: Optional[str] = None  # facile, modérée, difficile\nclass AnalyseCategorielle(BaseModel):\n    \"\"\"Analyse détaillée d'une catégorie (formation, expérience, etc.)\"\"\"",
        "detail": "api1.models",
        "documentation": {}
    },
    {
        "label": "AnalyseCategorielle",
        "kind": 6,
        "importPath": "api1.models",
        "description": "api1.models",
        "peekOfCode": "class AnalyseCategorielle(BaseModel):\n    \"\"\"Analyse détaillée d'une catégorie (formation, expérience, etc.)\"\"\"\n    categorie: str\n    score: float\n    elements_correspondants: List[CorrespondanceItem] = Field(default_factory=list)\n    elements_manquants: List[ElementManquant] = Field(default_factory=list)\n    points_forts: List[str] = Field(default_factory=list)\n    points_amelioration: List[str] = Field(default_factory=list)\n    resume: str = \"\"\n    poids_dans_score_global: Optional[float] = None  # Poids de cette catégorie (0-1)",
        "detail": "api1.models",
        "documentation": {}
    },
    {
        "label": "AnalyseDetaillee",
        "kind": 6,
        "importPath": "api1.models",
        "description": "api1.models",
        "peekOfCode": "class AnalyseDetaillee(BaseModel):\n    \"\"\"Analyse détaillée de la compatibilité\"\"\"\n    formation: AnalyseCategorielle\n    experience: AnalyseCategorielle\n    competences: AnalyseCategorielle\n    langues: AnalyseCategorielle\n    facteurs_bonus: Optional[Dict[str, float]] = None  # Facteurs bonus (ex: mobilité)\n    facteurs_malus: Optional[Dict[str, float]] = None  # Facteurs malus (ex: disponibilité)\nclass Suggestion(BaseModel):\n    \"\"\"Suggestion d'amélioration pour le candidat\"\"\"",
        "detail": "api1.models",
        "documentation": {}
    },
    {
        "label": "Suggestion",
        "kind": 6,
        "importPath": "api1.models",
        "description": "api1.models",
        "peekOfCode": "class Suggestion(BaseModel):\n    \"\"\"Suggestion d'amélioration pour le candidat\"\"\"\n    categorie: str\n    description: str\n    priorite: str = \"normale\"  # haute, moyenne, normale\n    impact_estime: str = \"moyen\"  # fort, moyen, faible\n    ressources_recommandees: Optional[List[Dict[str, str]]] = None\n    temps_acquisition_estime: Optional[str] = None  # court, moyen, long terme\n    cout_acquisition_estime: Optional[str] = None  # faible, modéré, élevé\nclass ContexteAnalyse(BaseModel):",
        "detail": "api1.models",
        "documentation": {}
    },
    {
        "label": "ContexteAnalyse",
        "kind": 6,
        "importPath": "api1.models",
        "description": "api1.models",
        "peekOfCode": "class ContexteAnalyse(BaseModel):\n    \"\"\"Contexte de l'analyse effectuée\"\"\"\n    timestamp: str = Field(default_factory=lambda: datetime.now().isoformat())\n    version_api: str = \"2.0.0\"\n    niveau_confiance: str = \"haute\"\n    modeles_utilises: Optional[Dict[str, str]] = None  # Modèles NLP utilisés\n    parametres_analyse: Optional[Dict[str, Any]] = None  # Paramètres utilisés\n    temps_analyse_ms: Optional[int] = None  # Temps d'analyse en millisecondes\n    source_donnees: Optional[str] = None  # Source des données analysées\nclass MatchingResponseV2(BaseModel):",
        "detail": "api1.models",
        "documentation": {}
    },
    {
        "label": "MatchingResponseV2",
        "kind": 6,
        "importPath": "api1.models",
        "description": "api1.models",
        "peekOfCode": "class MatchingResponseV2(BaseModel):\n    \"\"\"Nouvelle version du modèle de réponse pour l'API\"\"\"\n    score_global: float\n    niveau_adequation: str  # Excellent, Bon, Moyen, À améliorer\n    resume: str\n    points_forts: List[PointFort] = Field(default_factory=list)\n    points_amelioration: List[PointAmelioration] = Field(default_factory=list)\n    analyse_detaillee: AnalyseDetaillee\n    suggestions: List[Suggestion] = Field(default_factory=list)\n    contexte_analyse: ContexteAnalyse = Field(default_factory=ContexteAnalyse)",
        "detail": "api1.models",
        "documentation": {}
    },
    {
        "label": "MatchingResponse",
        "kind": 6,
        "importPath": "api1.models",
        "description": "api1.models",
        "peekOfCode": "class MatchingResponse(BaseModel):\n    \"\"\"Modèle de réponse pour l'API (version actuelle)\"\"\"\n    global_score: float\n    completion: ProfileCompletionScore\n    analyses: Dict[str, ReportSection]\n    synthesis: str\n    adequation_globale: str\n    contexte_analyse: Dict[str, Union[str, float, bool]] = Field(\n        default_factory=lambda: {\n            \"timestamp\": datetime.now().isoformat(),",
        "detail": "api1.models",
        "documentation": {}
    },
    {
        "label": "AnalysisOptions",
        "kind": 6,
        "importPath": "api1.models",
        "description": "api1.models",
        "peekOfCode": "class AnalysisOptions(BaseModel):\n    \"\"\"Options avancées pour personnaliser l'analyse\"\"\"\n    poids_formation: float = 0.25\n    poids_experience: float = 0.30\n    poids_competences: float = 0.35\n    poids_langues: float = 0.10\n    seuil_similarite_semantique: float = 0.75\n    activer_analyse_semantique: bool = True\n    activer_suggestions_personnalisees: bool = True\n    niveau_detail_analyse: str = \"complet\"  # simple, standard, complet",
        "detail": "api1.models",
        "documentation": {}
    },
    {
        "label": "MatchingRequestV2",
        "kind": 6,
        "importPath": "api1.models",
        "description": "api1.models",
        "peekOfCode": "class MatchingRequestV2(BaseModel):\n    \"\"\"Requête d'analyse avec options avancées\"\"\"\n    candidate: CandidatProfile\n    job_offer: JobOffer\n    options: Optional[AnalysisOptions] = Field(default_factory=AnalysisOptions)",
        "detail": "api1.models",
        "documentation": {}
    },
    {
        "label": "install_spacy_model",
        "kind": 2,
        "importPath": "api1.setup_models",
        "description": "api1.setup_models",
        "peekOfCode": "def install_spacy_model(model_name=\"fr_core_news_sm\"):\n    \"\"\"\n    Downloads and installs a spaCy model if it's not already installed.\n    \"\"\"\n    try:\n        print(f\"Checking for spaCy model: {model_name}...\")\n        spacy.load(model_name)\n        print(f\"Model '{model_name}' is already installed.\")\n    except OSError:\n        print(f\"Model '{model_name}' not found. Downloading...\")",
        "detail": "api1.setup_models",
        "documentation": {}
    },
    {
        "label": "download_nltk_data",
        "kind": 2,
        "importPath": "api1.setup_models",
        "description": "api1.setup_models",
        "peekOfCode": "def download_nltk_data():\n    \"\"\"\n    Downloads required NLTK data if not already present.\n    \"\"\"\n    try:\n        print(\"Checking for NLTK 'punkt' tokenizer...\")\n        nltk.data.find('tokenizers/punkt')\n        print(\"'punkt' is already downloaded.\")\n    except nltk.downloader.DownloadError:\n        print(\"NLTK 'punkt' not found. Downloading...\")",
        "detail": "api1.setup_models",
        "documentation": {}
    },
    {
        "label": "start_api",
        "kind": 2,
        "importPath": "api1.start_api",
        "description": "api1.start_api",
        "peekOfCode": "def start_api():\n    \"\"\"Démarre l'API avec les paramètres configurés\"\"\"\n    try:\n        # Récupération du port depuis les variables d'environnement ou utilisation de la valeur par défaut\n        port = int(os.getenv(\"API_PORT\", 8000))\n        # Récupération du niveau de log\n        log_level = os.getenv(\"LOG_LEVEL\", \"info\").lower()\n        print(f\"Démarrage de l'API WorkFlexer sur le port {port}...\")\n        print(f\"Documentation interactive disponible à l'adresse: http://localhost:{port}/docs\")\n        print(f\"Documentation ReDoc disponible à l'adresse: http://localhost:{port}/redoc\")",
        "detail": "api1.start_api",
        "documentation": {}
    },
    {
        "label": "normalize_text",
        "kind": 2,
        "importPath": "api1.utils",
        "description": "api1.utils",
        "peekOfCode": "def normalize_text(text: str) -> List[str]:\n    \"\"\"\n    Nettoie, tokenise, lemmatise le texte et supprime les mots vides en utilisant spaCy.\n    Retourne une liste de lemmes normalisés pour une comparaison sémantique efficace.\n    \"\"\"\n    if not nlp or not text or not isinstance(text, str):\n        return []\n    # 1. Mise en minuscules et suppression de la ponctuation non pertinente\n    text = text.lower()\n    text = re.sub(r'[^\\w\\s]', ' ', text)",
        "detail": "api1.utils",
        "documentation": {}
    },
    {
        "label": "get_semantic_similarity",
        "kind": 2,
        "importPath": "api1.utils",
        "description": "api1.utils",
        "peekOfCode": "def get_semantic_similarity(text1: str, text2: str) -> float:\n    \"\"\"\n    Calcule la similarité sémantique entre deux textes en utilisant le SentenceTransformer chargé.\n    \"\"\"\n    if not sentence_model or not text1 or not text2:\n        return 0.0\n    try:\n        # L'encodage et la comparaison sont plus efficaces ainsi\n        embeddings = sentence_model.encode([text1, text2], convert_to_tensor=True, show_progress_bar=False)\n        cosine_score = util.pytorch_cos_sim(embeddings[0], embeddings[1])",
        "detail": "api1.utils",
        "documentation": {}
    },
    {
        "label": "get_niveau_etudes_value",
        "kind": 2,
        "importPath": "api1.utils",
        "description": "api1.utils",
        "peekOfCode": "def get_niveau_etudes_value(niveau: str) -> int:\n    \"\"\"Convertit un niveau d'études en valeur numérique standardisée.\"\"\"\n    niveau = niveau.strip()\n    for key, data in NIVEAU_ETUDES_MAP.items():\n        if niveau == key or niveau in data[\"equivalents\"]:\n            return data[\"niveau\"]\n    return 0\ndef analyze_profile_completion(profile: CandidatProfile) -> Dict:\n    \"\"\"Analyse le niveau de complétion du profil.\"\"\"\n    scores = {}",
        "detail": "api1.utils",
        "documentation": {}
    },
    {
        "label": "analyze_profile_completion",
        "kind": 2,
        "importPath": "api1.utils",
        "description": "api1.utils",
        "peekOfCode": "def analyze_profile_completion(profile: CandidatProfile) -> Dict:\n    \"\"\"Analyse le niveau de complétion du profil.\"\"\"\n    scores = {}\n    # Vérification des formations\n    if profile.formations:\n        formations_score = sum(\n            1 for f in profile.formations if f.niveau and f.domaine and f.etablissement\n        ) / len(profile.formations)\n        scores[\"formations\"] = formations_score\n    else:",
        "detail": "api1.utils",
        "documentation": {}
    },
    {
        "label": "analyze_formation_compatibility",
        "kind": 2,
        "importPath": "api1.utils",
        "description": "api1.utils",
        "peekOfCode": "def analyze_formation_compatibility(\n    formations: List[Formation],\n    exigence: ExigenceFormation,\n    niveau_etude_profil: Optional[str],\n    niveau_etude_valeur: Optional[int] = None\n) -> Tuple[float, List[str], List[str]]:\n    \"\"\"Analyse de la compatibilité des formations, incluant le niveau d'étude global.\"\"\"\n    points_forts = []\n    recommendations = []\n    score_total = 0.0",
        "detail": "api1.utils",
        "documentation": {}
    },
    {
        "label": "calculate_domain_similarity",
        "kind": 2,
        "importPath": "api1.utils",
        "description": "api1.utils",
        "peekOfCode": "def calculate_domain_similarity(domain1: str, domain2: str) -> float:\n    \"\"\"\n    Calcule la similarité sémantique entre deux domaines de formation\n    en utilisant une approche plus stricte et rigoureuse.\n    Args:\n        domain1: Premier domaine\n        domain2: Deuxième domaine\n    Returns:\n        Score de similarité entre 0 et 1\n    \"\"\"",
        "detail": "api1.utils",
        "documentation": {}
    },
    {
        "label": "analyze_experience_compatibility",
        "kind": 2,
        "importPath": "api1.utils",
        "description": "api1.utils",
        "peekOfCode": "def analyze_experience_compatibility(\n    experiences: List[Experience],\n    exigence: ExigenceExperience,\n    job_description: str,\n    niveau_experience_valeur: Optional[int] = None\n) -> Tuple[float, List[str], List[str]]:\n    \"\"\"\n    Analyse la compatibilité de l'expérience, en combinant la durée et la pertinence sémantique.\n    \"\"\"\n    points_forts = []",
        "detail": "api1.utils",
        "documentation": {}
    },
    {
        "label": "analyze_competences_compatibility",
        "kind": 2,
        "importPath": "api1.utils",
        "description": "api1.utils",
        "peekOfCode": "def analyze_competences_compatibility(\n    candidate_competences: List[Competence], required_competences: List[Competence]\n) -> Tuple[float, List[CorrespondanceItem], List[ElementManquant], List[str], List[str]]:\n    \"\"\"\n    Analyse sémantique de la compatibilité des compétences.\n    Retourne: score, correspondances, manquants, points forts (strings), recommandations (strings)\n    \"\"\"\n    if not required_competences:\n        return 1.0, [], [], [\"Aucune compétence spécifique n'est requise.\"], []\n    if not candidate_competences:",
        "detail": "api1.utils",
        "documentation": {}
    },
    {
        "label": "analyze_langues_compatibility",
        "kind": 2,
        "importPath": "api1.utils",
        "description": "api1.utils",
        "peekOfCode": "def analyze_langues_compatibility(\n    langues: List[Langue], requises: List[Langue]\n) -> Tuple[float, List[str], List[str]]:\n    \"\"\"Analyse approfondie de la compatibilité des langues.\"\"\"\n    if not requises:\n        return 1.0, [\"Aucune exigence linguistique spécifique\"], []\n    score = 0\n    details = []\n    recommendations = []\n    points_forts = []",
        "detail": "api1.utils",
        "documentation": {}
    },
    {
        "label": "identify_critical_gaps",
        "kind": 2,
        "importPath": "api1.utils",
        "description": "api1.utils",
        "peekOfCode": "def identify_critical_gaps(\n    profile: CandidatProfile, offer: JobOffer\n) -> List[Dict[str, str]]:\n    \"\"\"Identifie les lacunes critiques du profil de manière détaillée.\"\"\"\n    gaps = []\n    # Analyse formation\n    if offer.formation_requise.formation_obligatoire:\n        niveau_requis = get_niveau_etudes_value(offer.formation_requise.niveau_minimum)\n        formations_suffisantes = [\n            f",
        "detail": "api1.utils",
        "documentation": {}
    },
    {
        "label": "generate_improvement_suggestions",
        "kind": 2,
        "importPath": "api1.utils",
        "description": "api1.utils",
        "peekOfCode": "def generate_improvement_suggestions(\n    profile: CandidatProfile, offer: JobOffer, recommendations: Dict[str, List[str]]\n) -> List[Dict[str, str]]:\n    \"\"\"\n    Génère des suggestions d'amélioration personnalisées basées sur le profil et l'offre.\n    \"\"\"\n    suggestions = []\n    # Analyse du secteur d'activité\n    secteur = offer.secteur\n    if secteur:",
        "detail": "api1.utils",
        "documentation": {}
    },
    {
        "label": "get_certifications_recommandees",
        "kind": 2,
        "importPath": "api1.utils",
        "description": "api1.utils",
        "peekOfCode": "def get_certifications_recommandees(secteur: str) -> List[str]:\n    \"\"\"Retourne les certifications recommandées pour un secteur donné.\"\"\"\n    certifications_par_secteur = {\n        \"Informatique\": [\n            \"ITIL Foundation\",\n            \"Certification Agile/Scrum\",\n            \"Certifications Cloud (AWS, Azure, GCP)\",\n        ],\n        \"Marketing\": [\n            \"Google Analytics\",",
        "detail": "api1.utils",
        "documentation": {}
    },
    {
        "label": "get_tendances_marche",
        "kind": 2,
        "importPath": "api1.utils",
        "description": "api1.utils",
        "peekOfCode": "def get_tendances_marche(secteur: str) -> List[str]:\n    \"\"\"Retourne les tendances actuelles du marché pour un secteur donné.\"\"\"\n    tendances_par_secteur = {\n        \"Informatique\": [\n            \"Intelligence Artificielle\",\n            \"DevOps\",\n            \"Cloud Computing\",\n            \"Cybersécurité\",\n        ],\n        \"Marketing\": [",
        "detail": "api1.utils",
        "documentation": {}
    },
    {
        "label": "niveau_satisfait_exigence",
        "kind": 2,
        "importPath": "api1.utils",
        "description": "api1.utils",
        "peekOfCode": "def niveau_satisfait_exigence(niveau_candidat: str, niveau_requis: str) -> bool:\n    \"\"\"Vérifie si le niveau d'études du candidat satisfait le niveau requis.\"\"\"\n    niveaux_ordre = {\n        \"Secondaire\": 1,\n        \"Bac\": 2,\n        \"Bac+1\": 3,\n        \"Bac+2\": 4,\n        \"Bac+3\": 5,\n        \"Licence\": 5,\n        \"Bac+4\": 6,",
        "detail": "api1.utils",
        "documentation": {}
    },
    {
        "label": "generate_synthesis",
        "kind": 2,
        "importPath": "api1.utils",
        "description": "api1.utils",
        "peekOfCode": "def generate_synthesis(global_score: float, analyses: Dict) -> str:\n    \"\"\"Génère une synthèse textuelle basée sur le score global et les analyses.\"\"\"\n    if global_score > 0.8:\n        level = \"Excellente\"\n    elif global_score > 0.6:\n        level = \"Bonne\"\n    elif global_score > 0.4:\n        level = \"Moyenne\"\n    else:\n        level = \"Faible\"",
        "detail": "api1.utils",
        "documentation": {}
    },
    {
        "label": "analyze_compatibility",
        "kind": 2,
        "importPath": "api1.utils",
        "description": "api1.utils",
        "peekOfCode": "def analyze_compatibility(candidate_data: Dict, job_offer_data: Dict) -> Dict:\n    \"\"\"\n    Analyse complète et nouvelle génération de rapport structuré V2,\n    en s'appuyant sur l'analyse sémantique.\n    \"\"\"\n    try:\n        # Validation et initialisation des objets Pydantic\n        profile = CandidatProfile(**candidate_data)\n        offer = JobOffer(**job_offer_data)\n        # --- Analyses détaillées par catégorie ---",
        "detail": "api1.utils",
        "documentation": {}
    },
    {
        "label": "generate_main_resume",
        "kind": 2,
        "importPath": "api1.utils",
        "description": "api1.utils",
        "peekOfCode": "def generate_main_resume(global_score: float, niveau_adequation: str, strongest_category: str, points_amelioration: List[PointAmelioration]) -> str:\n    \"\"\"Génère un résumé principal personnalisé et engageant.\"\"\"\n    score = round(global_score)\n    # Ensure \"Compétences\" has the accent for display\n    strongest_category_fr = strongest_category.lower().replace('competences', 'compétences')\n    if score > 85:\n        resume = f\"Félicitations ! Votre profil est en parfaite adéquation ({score}%) avec cette offre. Vos compétences et votre expérience semblent correspondre exactement à ce que l'entreprise recherche.\"\n    elif score > 70:\n        resume = f\"Très prometteur ! Votre profil correspond très bien ({score}%) à cette offre. Vous avez de solides atouts, notamment dans le domaine '{strongest_category_fr}'. Quelques ajustements pourraient vous rendre irrésistible.\"\n    elif score > 50:",
        "detail": "api1.utils",
        "documentation": {}
    },
    {
        "label": "generate_section_resume",
        "kind": 2,
        "importPath": "api1.utils",
        "description": "api1.utils",
        "peekOfCode": "def generate_section_resume(categorie: str, score: float) -> str:\n    \"\"\"Génère un résumé engageant pour une catégorie spécifique.\"\"\"\n    score_pct = round(score * 100)\n    resumes = {\n        \"formation\": {\n            \"excellent\": f\"Votre parcours académique ({score_pct}%) est un atout majeur pour ce poste.\",\n            \"bon\": f\"Votre formation ({score_pct}%) est solide et pertinente pour ce rôle.\",\n            \"moyen\": f\"Votre formation ({score_pct}%) est un bon point de départ, mais pourrait être complétée pour correspondre parfaitement à l'offre.\",\n            \"faible\": f\"Votre parcours de formation ({score_pct}%) semble assez éloigné des prérequis pour ce poste. Mettez en avant vos expériences concrètes.\",\n        },",
        "detail": "api1.utils",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "api1.utils",
        "description": "api1.utils",
        "peekOfCode": "logger = logging.getLogger(__name__)\n# --- Chargement des modèles et ressources NLP (une seule fois) ---\ntry:\n    logger.info(\"Loading NLP models as requested...\")\n    # Chargement du modèle spaCy pour le français\n    nlp = spacy.load(\"fr_core_news_sm\")\n    logger.info(\"spaCy model 'fr_core_news_sm' loaded successfully.\")\n    # Chargement du modèle SentenceTransformer pour les embeddings sémantiques\n    sentence_model = SentenceTransformer('distiluse-base-multilingual-cased-v1')\n    logger.info(\"SentenceTransformer model 'distiluse-base-multilingual-cased-v1' loaded successfully.\")",
        "detail": "api1.utils",
        "documentation": {}
    },
    {
        "label": "COMPLETION_THRESHOLD",
        "kind": 5,
        "importPath": "api1.utils",
        "description": "api1.utils",
        "peekOfCode": "COMPLETION_THRESHOLD = config.WEIGHTS.get(\"completion_threshold\", 0.7)\nEXPERIENCE_WEIGHT = config.WEIGHTS.get(\"experience\", 0.35)\nFORMATION_WEIGHT = config.WEIGHTS.get(\"formation\", 0.25)\nCOMPETENCES_WEIGHT = config.WEIGHTS.get(\"competences\", 0.25)\nLANGUES_WEIGHT = config.WEIGHTS.get(\"langues\", 0.15)\ndef normalize_text(text: str) -> List[str]:\n    \"\"\"\n    Nettoie, tokenise, lemmatise le texte et supprime les mots vides en utilisant spaCy.\n    Retourne une liste de lemmes normalisés pour une comparaison sémantique efficace.\n    \"\"\"",
        "detail": "api1.utils",
        "documentation": {}
    },
    {
        "label": "EXPERIENCE_WEIGHT",
        "kind": 5,
        "importPath": "api1.utils",
        "description": "api1.utils",
        "peekOfCode": "EXPERIENCE_WEIGHT = config.WEIGHTS.get(\"experience\", 0.35)\nFORMATION_WEIGHT = config.WEIGHTS.get(\"formation\", 0.25)\nCOMPETENCES_WEIGHT = config.WEIGHTS.get(\"competences\", 0.25)\nLANGUES_WEIGHT = config.WEIGHTS.get(\"langues\", 0.15)\ndef normalize_text(text: str) -> List[str]:\n    \"\"\"\n    Nettoie, tokenise, lemmatise le texte et supprime les mots vides en utilisant spaCy.\n    Retourne une liste de lemmes normalisés pour une comparaison sémantique efficace.\n    \"\"\"\n    if not nlp or not text or not isinstance(text, str):",
        "detail": "api1.utils",
        "documentation": {}
    },
    {
        "label": "FORMATION_WEIGHT",
        "kind": 5,
        "importPath": "api1.utils",
        "description": "api1.utils",
        "peekOfCode": "FORMATION_WEIGHT = config.WEIGHTS.get(\"formation\", 0.25)\nCOMPETENCES_WEIGHT = config.WEIGHTS.get(\"competences\", 0.25)\nLANGUES_WEIGHT = config.WEIGHTS.get(\"langues\", 0.15)\ndef normalize_text(text: str) -> List[str]:\n    \"\"\"\n    Nettoie, tokenise, lemmatise le texte et supprime les mots vides en utilisant spaCy.\n    Retourne une liste de lemmes normalisés pour une comparaison sémantique efficace.\n    \"\"\"\n    if not nlp or not text or not isinstance(text, str):\n        return []",
        "detail": "api1.utils",
        "documentation": {}
    },
    {
        "label": "COMPETENCES_WEIGHT",
        "kind": 5,
        "importPath": "api1.utils",
        "description": "api1.utils",
        "peekOfCode": "COMPETENCES_WEIGHT = config.WEIGHTS.get(\"competences\", 0.25)\nLANGUES_WEIGHT = config.WEIGHTS.get(\"langues\", 0.15)\ndef normalize_text(text: str) -> List[str]:\n    \"\"\"\n    Nettoie, tokenise, lemmatise le texte et supprime les mots vides en utilisant spaCy.\n    Retourne une liste de lemmes normalisés pour une comparaison sémantique efficace.\n    \"\"\"\n    if not nlp or not text or not isinstance(text, str):\n        return []\n    # 1. Mise en minuscules et suppression de la ponctuation non pertinente",
        "detail": "api1.utils",
        "documentation": {}
    },
    {
        "label": "LANGUES_WEIGHT",
        "kind": 5,
        "importPath": "api1.utils",
        "description": "api1.utils",
        "peekOfCode": "LANGUES_WEIGHT = config.WEIGHTS.get(\"langues\", 0.15)\ndef normalize_text(text: str) -> List[str]:\n    \"\"\"\n    Nettoie, tokenise, lemmatise le texte et supprime les mots vides en utilisant spaCy.\n    Retourne une liste de lemmes normalisés pour une comparaison sémantique efficace.\n    \"\"\"\n    if not nlp or not text or not isinstance(text, str):\n        return []\n    # 1. Mise en minuscules et suppression de la ponctuation non pertinente\n    text = text.lower()",
        "detail": "api1.utils",
        "documentation": {}
    },
    {
        "label": "NIVEAU_ETUDES_MAP",
        "kind": 5,
        "importPath": "api1.utils",
        "description": "api1.utils",
        "peekOfCode": "NIVEAU_ETUDES_MAP = {\n    \"Bac\": {\"niveau\": 1, \"equivalents\": [\"Baccalauréat\", \"High School\"]},\n    \"Bac+2\": {\"niveau\": 2, \"equivalents\": [\"DUT\", \"BTS\", \"DEUG\"]},\n    \"Bac+3\": {\"niveau\": 3, \"equivalents\": [\"Licence\", \"Bachelor\"]},\n    \"Bac+4\": {\"niveau\": 4, \"equivalents\": [\"Maîtrise\", \"Master 1\"]},\n    \"Bac+5\": {\"niveau\": 5, \"equivalents\": [\"Master\", \"Ingénieur\", \"MBA\"]},\n    \"Doctorat\": {\"niveau\": 8, \"equivalents\": [\"PhD\", \"Doctorate\"]},\n}\ndef get_niveau_etudes_value(niveau: str) -> int:\n    \"\"\"Convertit un niveau d'études en valeur numérique standardisée.\"\"\"",
        "detail": "api1.utils",
        "documentation": {}
    }
]