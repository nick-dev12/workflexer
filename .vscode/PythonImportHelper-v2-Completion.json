[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "RequestValidationError",
        "importPath": "fastapi.exceptions",
        "description": "fastapi.exceptions",
        "isExtraImport": true,
        "detail": "fastapi.exceptions",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Set",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Set",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Set",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Set",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "MatchingRequest",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "MatchingResponse",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "MatchingResponseV2",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "MatchingRequestV2",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "ContexteAnalyse",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "CandidatProfile",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "CandidatProfile",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "MatchingResponseV2",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "CandidatProfile",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "JobOffer",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "MatchingResponse",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "MatchingResponseV2",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Formation",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Experience",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Competence",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Langue",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "ExigenceFormation",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "ExigenceExperience",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "AnalyseCategorielle",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "AnalyseDetaillee",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "PointFort",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "PointAmelioration",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Suggestion",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "CorrespondanceItem",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "ElementManquant",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "ProjetPersonnel",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "ExtractedEntity",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "SectionEmbedding",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "SemanticSimilarity",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "AdvancedCompetenceAnalysis",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "HybridAnalysisResult",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "EntityMatchResult",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "SkillGapAnalysis",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "CareerProgressionAnalysis",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "IndustryRelevanceAnalysis",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "ContexteAnalyse",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "CandidatProfile",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "MatchingResponseV2",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "PointFort",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "PointAmelioration",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Suggestion",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "AnalyseCategorielle",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "ElementManquant",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "CorrespondanceItem",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "AnalyseDetaillee",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "CandidatProfile",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "MatchingResponseV2",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "PointFort",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "PointAmelioration",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Suggestion",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "AnalyseCategorielle",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "ElementManquant",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "CorrespondanceItem",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "AnalyseDetaillee",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "analyze_compatibility",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "normalize_text",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "analyze_compatibility_hybrid",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "analyze_compatibility",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "nlp",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "sentence_model",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "stop_words",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "normalize_text",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "get_semantic_similarity",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "create_focused_candidate_text",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "analyze_global_compatibility",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "generate_main_resume",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "generate_section_resume",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "nlp",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "sentence_model",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "stop_words",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "normalize_text",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "get_semantic_similarity",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "create_focused_candidate_text",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "analyze_global_compatibility",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "generate_main_resume",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "generate_section_resume",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "config",
        "description": "config",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "JobOfferDakar",
        "importPath": "models_dakar",
        "description": "models_dakar",
        "isExtraImport": true,
        "detail": "models_dakar",
        "documentation": {}
    },
    {
        "label": "CandidatProfileDakar",
        "importPath": "models_dakar",
        "description": "models_dakar",
        "isExtraImport": true,
        "detail": "models_dakar",
        "documentation": {}
    },
    {
        "label": "CandidatProfileDakar",
        "importPath": "models_dakar",
        "description": "models_dakar",
        "isExtraImport": true,
        "detail": "models_dakar",
        "documentation": {}
    },
    {
        "label": "JobOfferDakar",
        "importPath": "models_dakar",
        "description": "models_dakar",
        "isExtraImport": true,
        "detail": "models_dakar",
        "documentation": {}
    },
    {
        "label": "CandidatProfileDakar",
        "importPath": "models_dakar",
        "description": "models_dakar",
        "isExtraImport": true,
        "detail": "models_dakar",
        "documentation": {}
    },
    {
        "label": "FormationCandidatDakar",
        "importPath": "models_dakar",
        "description": "models_dakar",
        "isExtraImport": true,
        "detail": "models_dakar",
        "documentation": {}
    },
    {
        "label": "ExperienceCandidatDakar",
        "importPath": "models_dakar",
        "description": "models_dakar",
        "isExtraImport": true,
        "detail": "models_dakar",
        "documentation": {}
    },
    {
        "label": "LangueCandidatDakar",
        "importPath": "models_dakar",
        "description": "models_dakar",
        "isExtraImport": true,
        "detail": "models_dakar",
        "documentation": {}
    },
    {
        "label": "CandidatProfileDakar",
        "importPath": "models_dakar",
        "description": "models_dakar",
        "isExtraImport": true,
        "detail": "models_dakar",
        "documentation": {}
    },
    {
        "label": "FormationCandidatDakar",
        "importPath": "models_dakar",
        "description": "models_dakar",
        "isExtraImport": true,
        "detail": "models_dakar",
        "documentation": {}
    },
    {
        "label": "ExperienceCandidatDakar",
        "importPath": "models_dakar",
        "description": "models_dakar",
        "isExtraImport": true,
        "detail": "models_dakar",
        "documentation": {}
    },
    {
        "label": "LangueCandidatDakar",
        "importPath": "models_dakar",
        "description": "models_dakar",
        "isExtraImport": true,
        "detail": "models_dakar",
        "documentation": {}
    },
    {
        "label": "analyze_compatibility_dakar",
        "importPath": "utils_dakar",
        "description": "utils_dakar",
        "isExtraImport": true,
        "detail": "utils_dakar",
        "documentation": {}
    },
    {
        "label": "JobOfferSenjob",
        "importPath": "models_senjob",
        "description": "models_senjob",
        "isExtraImport": true,
        "detail": "models_senjob",
        "documentation": {}
    },
    {
        "label": "JobOfferSenjob",
        "importPath": "models_senjob",
        "description": "models_senjob",
        "isExtraImport": true,
        "detail": "models_senjob",
        "documentation": {}
    },
    {
        "label": "analyze_compatibility_senjob",
        "importPath": "utils_senjob",
        "description": "utils_senjob",
        "isExtraImport": true,
        "detail": "utils_senjob",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "validator",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "validator",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "find_packages",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "find_packages",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "spacy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "spacy",
        "description": "spacy",
        "detail": "spacy",
        "documentation": {}
    },
    {
        "label": "nltk",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "nltk",
        "description": "nltk",
        "detail": "nltk",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "uvicorn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uvicorn",
        "description": "uvicorn",
        "detail": "uvicorn",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "collections",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "collections",
        "description": "collections",
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "namedtuple",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "pickle",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pickle",
        "description": "pickle",
        "detail": "pickle",
        "documentation": {}
    },
    {
        "label": "hashlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hashlib",
        "description": "hashlib",
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "torch",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "torch",
        "description": "torch",
        "detail": "torch",
        "documentation": {}
    },
    {
        "label": "SentenceTransformer",
        "importPath": "sentence_transformers",
        "description": "sentence_transformers",
        "isExtraImport": true,
        "detail": "sentence_transformers",
        "documentation": {}
    },
    {
        "label": "util",
        "importPath": "sentence_transformers",
        "description": "sentence_transformers",
        "isExtraImport": true,
        "detail": "sentence_transformers",
        "documentation": {}
    },
    {
        "label": "stopwords",
        "importPath": "nltk.corpus",
        "description": "nltk.corpus",
        "isExtraImport": true,
        "detail": "nltk.corpus",
        "documentation": {}
    },
    {
        "label": "cosine_similarity",
        "importPath": "sklearn.metrics.pairwise",
        "description": "sklearn.metrics.pairwise",
        "isExtraImport": true,
        "detail": "sklearn.metrics.pairwise",
        "documentation": {}
    },
    {
        "label": "TfidfVectorizer",
        "importPath": "sklearn.feature_extraction.text",
        "description": "sklearn.feature_extraction.text",
        "isExtraImport": true,
        "detail": "sklearn.feature_extraction.text",
        "documentation": {}
    },
    {
        "label": "KMeans",
        "importPath": "sklearn.cluster",
        "description": "sklearn.cluster",
        "isExtraImport": true,
        "detail": "sklearn.cluster",
        "documentation": {}
    },
    {
        "label": "RotatingFileHandler",
        "importPath": "logging.handlers",
        "description": "logging.handlers",
        "isExtraImport": true,
        "detail": "logging.handlers",
        "documentation": {}
    },
    {
        "label": "RotatingFileHandler",
        "importPath": "logging.handlers",
        "description": "logging.handlers",
        "isExtraImport": true,
        "detail": "logging.handlers",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "errno",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "errno",
        "description": "errno",
        "detail": "errno",
        "documentation": {}
    },
    {
        "label": "LibraryPackage",
        "importPath": "googleapis.codegen.filesys.library_package",
        "description": "googleapis.codegen.filesys.library_package",
        "isExtraImport": true,
        "detail": "googleapis.codegen.filesys.library_package",
        "documentation": {}
    },
    {
        "label": "LibraryPackage",
        "importPath": "googleapis.codegen.filesys.library_package",
        "description": "googleapis.codegen.filesys.library_package",
        "isExtraImport": true,
        "detail": "googleapis.codegen.filesys.library_package",
        "documentation": {}
    },
    {
        "label": "LibraryPackage",
        "importPath": "googleapis.codegen.filesys.library_package",
        "description": "googleapis.codegen.filesys.library_package",
        "isExtraImport": true,
        "detail": "googleapis.codegen.filesys.library_package",
        "documentation": {}
    },
    {
        "label": "LibraryPackage",
        "importPath": "googleapis.codegen.filesys.library_package",
        "description": "googleapis.codegen.filesys.library_package",
        "isExtraImport": true,
        "detail": "googleapis.codegen.filesys.library_package",
        "documentation": {}
    },
    {
        "label": "contextlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "contextlib",
        "description": "contextlib",
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "six",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "six",
        "description": "six",
        "detail": "six",
        "documentation": {}
    },
    {
        "label": "files",
        "importPath": "googleapis.codegen.filesys",
        "description": "googleapis.codegen.filesys",
        "isExtraImport": true,
        "detail": "googleapis.codegen.filesys",
        "documentation": {}
    },
    {
        "label": "filesystem_library_package",
        "importPath": "googleapis.codegen.filesys",
        "description": "googleapis.codegen.filesys",
        "isExtraImport": true,
        "detail": "googleapis.codegen.filesys",
        "documentation": {}
    },
    {
        "label": "single_file_library_package",
        "importPath": "googleapis.codegen.filesys",
        "description": "googleapis.codegen.filesys",
        "isExtraImport": true,
        "detail": "googleapis.codegen.filesys",
        "documentation": {}
    },
    {
        "label": "tar_library_package",
        "importPath": "googleapis.codegen.filesys",
        "description": "googleapis.codegen.filesys",
        "isExtraImport": true,
        "detail": "googleapis.codegen.filesys",
        "documentation": {}
    },
    {
        "label": "zip_library_package",
        "importPath": "googleapis.codegen.filesys",
        "description": "googleapis.codegen.filesys",
        "isExtraImport": true,
        "detail": "googleapis.codegen.filesys",
        "documentation": {}
    },
    {
        "label": "files",
        "importPath": "googleapis.codegen.filesys",
        "description": "googleapis.codegen.filesys",
        "isExtraImport": true,
        "detail": "googleapis.codegen.filesys",
        "documentation": {}
    },
    {
        "label": "package_writer_foundry",
        "importPath": "googleapis.codegen.filesys",
        "description": "googleapis.codegen.filesys",
        "isExtraImport": true,
        "detail": "googleapis.codegen.filesys",
        "documentation": {}
    },
    {
        "label": "package_writer_foundry",
        "importPath": "googleapis.codegen.filesys",
        "description": "googleapis.codegen.filesys",
        "isExtraImport": true,
        "detail": "googleapis.codegen.filesys",
        "documentation": {}
    },
    {
        "label": "files",
        "importPath": "googleapis.codegen.filesys",
        "description": "googleapis.codegen.filesys",
        "isExtraImport": true,
        "detail": "googleapis.codegen.filesys",
        "documentation": {}
    },
    {
        "label": "files",
        "importPath": "googleapis.codegen.filesys",
        "description": "googleapis.codegen.filesys",
        "isExtraImport": true,
        "detail": "googleapis.codegen.filesys",
        "documentation": {}
    },
    {
        "label": "files",
        "importPath": "googleapis.codegen.filesys",
        "description": "googleapis.codegen.filesys",
        "isExtraImport": true,
        "detail": "googleapis.codegen.filesys",
        "documentation": {}
    },
    {
        "label": "files",
        "importPath": "googleapis.codegen.filesys",
        "description": "googleapis.codegen.filesys",
        "isExtraImport": true,
        "detail": "googleapis.codegen.filesys",
        "documentation": {}
    },
    {
        "label": "single_file_library_package",
        "importPath": "googleapis.codegen.filesys",
        "description": "googleapis.codegen.filesys",
        "isExtraImport": true,
        "detail": "googleapis.codegen.filesys",
        "documentation": {}
    },
    {
        "label": "tar_library_package",
        "importPath": "googleapis.codegen.filesys",
        "description": "googleapis.codegen.filesys",
        "isExtraImport": true,
        "detail": "googleapis.codegen.filesys",
        "documentation": {}
    },
    {
        "label": "zip_library_package",
        "importPath": "googleapis.codegen.filesys",
        "description": "googleapis.codegen.filesys",
        "isExtraImport": true,
        "detail": "googleapis.codegen.filesys",
        "documentation": {}
    },
    {
        "label": "zip_library_package",
        "importPath": "googleapis.codegen.filesys",
        "description": "googleapis.codegen.filesys",
        "isExtraImport": true,
        "detail": "googleapis.codegen.filesys",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "tarfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tarfile",
        "description": "tarfile",
        "detail": "tarfile",
        "documentation": {}
    },
    {
        "label": "zipfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "zipfile",
        "description": "zipfile",
        "detail": "zipfile",
        "documentation": {}
    },
    {
        "label": "html.parser",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "html.parser",
        "description": "html.parser",
        "detail": "html.parser",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "string",
        "description": "string",
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "Template",
        "importPath": "string",
        "description": "string",
        "isExtraImport": true,
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "collections.abc",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "collections.abc",
        "description": "collections.abc",
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "operator",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "operator",
        "description": "operator",
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "functools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "functools",
        "description": "functools",
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "parse",
        "importPath": "six.moves.urllib",
        "description": "six.moves.urllib",
        "isExtraImport": true,
        "detail": "six.moves.urllib",
        "documentation": {}
    },
    {
        "label": "data_types",
        "importPath": "googleapis.codegen",
        "description": "googleapis.codegen",
        "isExtraImport": true,
        "detail": "googleapis.codegen",
        "documentation": {}
    },
    {
        "label": "template_objects",
        "importPath": "googleapis.codegen",
        "description": "googleapis.codegen",
        "isExtraImport": true,
        "detail": "googleapis.codegen",
        "documentation": {}
    },
    {
        "label": "utilities",
        "importPath": "googleapis.codegen",
        "description": "googleapis.codegen",
        "isExtraImport": true,
        "detail": "googleapis.codegen",
        "documentation": {}
    },
    {
        "label": "template_objects",
        "importPath": "googleapis.codegen",
        "description": "googleapis.codegen",
        "isExtraImport": true,
        "detail": "googleapis.codegen",
        "documentation": {}
    },
    {
        "label": "template_objects",
        "importPath": "googleapis.codegen",
        "description": "googleapis.codegen",
        "isExtraImport": true,
        "detail": "googleapis.codegen",
        "documentation": {}
    },
    {
        "label": "template_helpers",
        "importPath": "googleapis.codegen",
        "description": "googleapis.codegen",
        "isExtraImport": true,
        "detail": "googleapis.codegen",
        "documentation": {}
    },
    {
        "label": "generator",
        "importPath": "googleapis.codegen",
        "description": "googleapis.codegen",
        "isExtraImport": true,
        "detail": "googleapis.codegen",
        "documentation": {}
    },
    {
        "label": "generator_lookup",
        "importPath": "googleapis.codegen",
        "description": "googleapis.codegen",
        "isExtraImport": true,
        "detail": "googleapis.codegen",
        "documentation": {}
    },
    {
        "label": "language_model",
        "importPath": "googleapis.codegen",
        "description": "googleapis.codegen",
        "isExtraImport": true,
        "detail": "googleapis.codegen",
        "documentation": {}
    },
    {
        "label": "generator_lookup",
        "importPath": "googleapis.codegen",
        "description": "googleapis.codegen",
        "isExtraImport": true,
        "detail": "googleapis.codegen",
        "documentation": {}
    },
    {
        "label": "template_helpers",
        "importPath": "googleapis.codegen",
        "description": "googleapis.codegen",
        "isExtraImport": true,
        "detail": "googleapis.codegen",
        "documentation": {}
    },
    {
        "label": "php_generator",
        "importPath": "googleapis.codegen",
        "description": "googleapis.codegen",
        "isExtraImport": true,
        "detail": "googleapis.codegen",
        "documentation": {}
    },
    {
        "label": "utilities",
        "importPath": "googleapis.codegen",
        "description": "googleapis.codegen",
        "isExtraImport": true,
        "detail": "googleapis.codegen",
        "documentation": {}
    },
    {
        "label": "api",
        "importPath": "googleapis.codegen",
        "description": "googleapis.codegen",
        "isExtraImport": true,
        "detail": "googleapis.codegen",
        "documentation": {}
    },
    {
        "label": "api_library_generator",
        "importPath": "googleapis.codegen",
        "description": "googleapis.codegen",
        "isExtraImport": true,
        "detail": "googleapis.codegen",
        "documentation": {}
    },
    {
        "label": "data_types",
        "importPath": "googleapis.codegen",
        "description": "googleapis.codegen",
        "isExtraImport": true,
        "detail": "googleapis.codegen",
        "documentation": {}
    },
    {
        "label": "language_model",
        "importPath": "googleapis.codegen",
        "description": "googleapis.codegen",
        "isExtraImport": true,
        "detail": "googleapis.codegen",
        "documentation": {}
    },
    {
        "label": "utilities",
        "importPath": "googleapis.codegen",
        "description": "googleapis.codegen",
        "isExtraImport": true,
        "detail": "googleapis.codegen",
        "documentation": {}
    },
    {
        "label": "api",
        "importPath": "googleapis.codegen",
        "description": "googleapis.codegen",
        "isExtraImport": true,
        "detail": "googleapis.codegen",
        "documentation": {}
    },
    {
        "label": "php_generator",
        "importPath": "googleapis.codegen",
        "description": "googleapis.codegen",
        "isExtraImport": true,
        "detail": "googleapis.codegen",
        "documentation": {}
    },
    {
        "label": "schema",
        "importPath": "googleapis.codegen",
        "description": "googleapis.codegen",
        "isExtraImport": true,
        "detail": "googleapis.codegen",
        "documentation": {}
    },
    {
        "label": "data_types",
        "importPath": "googleapis.codegen",
        "description": "googleapis.codegen",
        "isExtraImport": true,
        "detail": "googleapis.codegen",
        "documentation": {}
    },
    {
        "label": "template_objects",
        "importPath": "googleapis.codegen",
        "description": "googleapis.codegen",
        "isExtraImport": true,
        "detail": "googleapis.codegen",
        "documentation": {}
    },
    {
        "label": "utilities",
        "importPath": "googleapis.codegen",
        "description": "googleapis.codegen",
        "isExtraImport": true,
        "detail": "googleapis.codegen",
        "documentation": {}
    },
    {
        "label": "utilities",
        "importPath": "googleapis.codegen",
        "description": "googleapis.codegen",
        "isExtraImport": true,
        "detail": "googleapis.codegen",
        "documentation": {}
    },
    {
        "label": "data_types",
        "importPath": "googleapis.codegen",
        "description": "googleapis.codegen",
        "isExtraImport": true,
        "detail": "googleapis.codegen",
        "documentation": {}
    },
    {
        "label": "language_model",
        "importPath": "googleapis.codegen",
        "description": "googleapis.codegen",
        "isExtraImport": true,
        "detail": "googleapis.codegen",
        "documentation": {}
    },
    {
        "label": "data_types",
        "importPath": "googleapis.codegen",
        "description": "googleapis.codegen",
        "isExtraImport": true,
        "detail": "googleapis.codegen",
        "documentation": {}
    },
    {
        "label": "language_model",
        "importPath": "googleapis.codegen",
        "description": "googleapis.codegen",
        "isExtraImport": true,
        "detail": "googleapis.codegen",
        "documentation": {}
    },
    {
        "label": "template_objects",
        "importPath": "googleapis.codegen",
        "description": "googleapis.codegen",
        "isExtraImport": true,
        "detail": "googleapis.codegen",
        "documentation": {}
    },
    {
        "label": "data_types",
        "importPath": "googleapis.codegen",
        "description": "googleapis.codegen",
        "isExtraImport": true,
        "detail": "googleapis.codegen",
        "documentation": {}
    },
    {
        "label": "data_value",
        "importPath": "googleapis.codegen",
        "description": "googleapis.codegen",
        "isExtraImport": true,
        "detail": "googleapis.codegen",
        "documentation": {}
    },
    {
        "label": "language_model",
        "importPath": "googleapis.codegen",
        "description": "googleapis.codegen",
        "isExtraImport": true,
        "detail": "googleapis.codegen",
        "documentation": {}
    },
    {
        "label": "schema",
        "importPath": "googleapis.codegen",
        "description": "googleapis.codegen",
        "isExtraImport": true,
        "detail": "googleapis.codegen",
        "documentation": {}
    },
    {
        "label": "django_helpers",
        "importPath": "googleapis.codegen",
        "description": "googleapis.codegen",
        "isExtraImport": true,
        "detail": "googleapis.codegen",
        "documentation": {}
    },
    {
        "label": "language_model",
        "importPath": "googleapis.codegen",
        "description": "googleapis.codegen",
        "isExtraImport": true,
        "detail": "googleapis.codegen",
        "documentation": {}
    },
    {
        "label": "generate_library",
        "importPath": "googleapis.codegen",
        "description": "googleapis.codegen",
        "isExtraImport": true,
        "detail": "googleapis.codegen",
        "documentation": {}
    },
    {
        "label": "generator_lookup",
        "importPath": "googleapis.codegen",
        "description": "googleapis.codegen",
        "isExtraImport": true,
        "detail": "googleapis.codegen",
        "documentation": {}
    },
    {
        "label": "php_generator",
        "importPath": "googleapis.codegen",
        "description": "googleapis.codegen",
        "isExtraImport": true,
        "detail": "googleapis.codegen",
        "documentation": {}
    },
    {
        "label": "targets",
        "importPath": "googleapis.codegen",
        "description": "googleapis.codegen",
        "isExtraImport": true,
        "detail": "googleapis.codegen",
        "documentation": {}
    },
    {
        "label": "generator",
        "importPath": "googleapis.codegen",
        "description": "googleapis.codegen",
        "isExtraImport": true,
        "detail": "googleapis.codegen",
        "documentation": {}
    },
    {
        "label": "data_types",
        "importPath": "googleapis.codegen",
        "description": "googleapis.codegen",
        "isExtraImport": true,
        "detail": "googleapis.codegen",
        "documentation": {}
    },
    {
        "label": "data_value",
        "importPath": "googleapis.codegen",
        "description": "googleapis.codegen",
        "isExtraImport": true,
        "detail": "googleapis.codegen",
        "documentation": {}
    },
    {
        "label": "language_model",
        "importPath": "googleapis.codegen",
        "description": "googleapis.codegen",
        "isExtraImport": true,
        "detail": "googleapis.codegen",
        "documentation": {}
    },
    {
        "label": "language_model",
        "importPath": "googleapis.codegen",
        "description": "googleapis.codegen",
        "isExtraImport": true,
        "detail": "googleapis.codegen",
        "documentation": {}
    },
    {
        "label": "targets",
        "importPath": "googleapis.codegen",
        "description": "googleapis.codegen",
        "isExtraImport": true,
        "detail": "googleapis.codegen",
        "documentation": {}
    },
    {
        "label": "django_helpers",
        "importPath": "googleapis.codegen",
        "description": "googleapis.codegen",
        "isExtraImport": true,
        "detail": "googleapis.codegen",
        "documentation": {}
    },
    {
        "label": "template_helpers",
        "importPath": "googleapis.codegen",
        "description": "googleapis.codegen",
        "isExtraImport": true,
        "detail": "googleapis.codegen",
        "documentation": {}
    },
    {
        "label": "language_model",
        "importPath": "googleapis.codegen",
        "description": "googleapis.codegen",
        "isExtraImport": true,
        "detail": "googleapis.codegen",
        "documentation": {}
    },
    {
        "label": "template_helpers",
        "importPath": "googleapis.codegen",
        "description": "googleapis.codegen",
        "isExtraImport": true,
        "detail": "googleapis.codegen",
        "documentation": {}
    },
    {
        "label": "template_objects",
        "importPath": "googleapis.codegen",
        "description": "googleapis.codegen",
        "isExtraImport": true,
        "detail": "googleapis.codegen",
        "documentation": {}
    },
    {
        "label": "api",
        "importPath": "googleapis.codegen",
        "description": "googleapis.codegen",
        "isExtraImport": true,
        "detail": "googleapis.codegen",
        "documentation": {}
    },
    {
        "label": "ApiException",
        "importPath": "googleapis.codegen.api_exception",
        "description": "googleapis.codegen.api_exception",
        "isExtraImport": true,
        "detail": "googleapis.codegen.api_exception",
        "documentation": {}
    },
    {
        "label": "ApiException",
        "importPath": "googleapis.codegen.api_exception",
        "description": "googleapis.codegen.api_exception",
        "isExtraImport": true,
        "detail": "googleapis.codegen.api_exception",
        "documentation": {}
    },
    {
        "label": "ApiException",
        "importPath": "googleapis.codegen.api_exception",
        "description": "googleapis.codegen.api_exception",
        "isExtraImport": true,
        "detail": "googleapis.codegen.api_exception",
        "documentation": {}
    },
    {
        "label": "ApiException",
        "importPath": "googleapis.codegen.api_exception",
        "description": "googleapis.codegen.api_exception",
        "isExtraImport": true,
        "detail": "googleapis.codegen.api_exception",
        "documentation": {}
    },
    {
        "label": "ApiException",
        "importPath": "googleapis.codegen.api_exception",
        "description": "googleapis.codegen.api_exception",
        "isExtraImport": true,
        "detail": "googleapis.codegen.api_exception",
        "documentation": {}
    },
    {
        "label": "Schema",
        "importPath": "googleapis.codegen.schema",
        "description": "googleapis.codegen.schema",
        "isExtraImport": true,
        "detail": "googleapis.codegen.schema",
        "documentation": {}
    },
    {
        "label": "Schema",
        "importPath": "googleapis.codegen.schema",
        "description": "googleapis.codegen.schema",
        "isExtraImport": true,
        "detail": "googleapis.codegen.schema",
        "documentation": {}
    },
    {
        "label": "Schema",
        "importPath": "googleapis.codegen.schema",
        "description": "googleapis.codegen.schema",
        "isExtraImport": true,
        "detail": "googleapis.codegen.schema",
        "documentation": {}
    },
    {
        "label": "googleapis.codegen.utilities",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "googleapis.codegen.utilities",
        "description": "googleapis.codegen.utilities",
        "detail": "googleapis.codegen.utilities",
        "documentation": {}
    },
    {
        "label": "convert_size",
        "importPath": "googleapis.codegen.utilities",
        "description": "googleapis.codegen.utilities",
        "isExtraImport": true,
        "detail": "googleapis.codegen.utilities",
        "documentation": {}
    },
    {
        "label": "json_expander",
        "importPath": "googleapis.codegen.utilities",
        "description": "googleapis.codegen.utilities",
        "isExtraImport": true,
        "detail": "googleapis.codegen.utilities",
        "documentation": {}
    },
    {
        "label": "json_with_comments",
        "importPath": "googleapis.codegen.utilities",
        "description": "googleapis.codegen.utilities",
        "isExtraImport": true,
        "detail": "googleapis.codegen.utilities",
        "documentation": {}
    },
    {
        "label": "html_stripper",
        "importPath": "googleapis.codegen.utilities",
        "description": "googleapis.codegen.utilities",
        "isExtraImport": true,
        "detail": "googleapis.codegen.utilities",
        "documentation": {}
    },
    {
        "label": "name_validator",
        "importPath": "googleapis.codegen.utilities",
        "description": "googleapis.codegen.utilities",
        "isExtraImport": true,
        "detail": "googleapis.codegen.utilities",
        "documentation": {}
    },
    {
        "label": "convert_size",
        "importPath": "googleapis.codegen.utilities",
        "description": "googleapis.codegen.utilities",
        "isExtraImport": true,
        "detail": "googleapis.codegen.utilities",
        "documentation": {}
    },
    {
        "label": "json_expander",
        "importPath": "googleapis.codegen.utilities",
        "description": "googleapis.codegen.utilities",
        "isExtraImport": true,
        "detail": "googleapis.codegen.utilities",
        "documentation": {}
    },
    {
        "label": "json_with_comments",
        "importPath": "googleapis.codegen.utilities",
        "description": "googleapis.codegen.utilities",
        "isExtraImport": true,
        "detail": "googleapis.codegen.utilities",
        "documentation": {}
    },
    {
        "label": "name_validator",
        "importPath": "googleapis.codegen.utilities",
        "description": "googleapis.codegen.utilities",
        "isExtraImport": true,
        "detail": "googleapis.codegen.utilities",
        "documentation": {}
    },
    {
        "label": "ordered_set",
        "importPath": "googleapis.codegen.utilities",
        "description": "googleapis.codegen.utilities",
        "isExtraImport": true,
        "detail": "googleapis.codegen.utilities",
        "documentation": {}
    },
    {
        "label": "json_expander",
        "importPath": "googleapis.codegen.utilities",
        "description": "googleapis.codegen.utilities",
        "isExtraImport": true,
        "detail": "googleapis.codegen.utilities",
        "documentation": {}
    },
    {
        "label": "json_with_comments",
        "importPath": "googleapis.codegen.utilities",
        "description": "googleapis.codegen.utilities",
        "isExtraImport": true,
        "detail": "googleapis.codegen.utilities",
        "documentation": {}
    },
    {
        "label": "TemplateGenerator",
        "importPath": "googleapis.codegen.generator",
        "description": "googleapis.codegen.generator",
        "isExtraImport": true,
        "detail": "googleapis.codegen.generator",
        "documentation": {}
    },
    {
        "label": "template",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "utils",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "template",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "template",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "template",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "absl",
        "description": "absl",
        "isExtraImport": true,
        "detail": "absl",
        "documentation": {}
    },
    {
        "label": "flags",
        "importPath": "absl",
        "description": "absl",
        "isExtraImport": true,
        "detail": "absl",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "absl",
        "description": "absl",
        "isExtraImport": true,
        "detail": "absl",
        "documentation": {}
    },
    {
        "label": "flags",
        "importPath": "absl",
        "description": "absl",
        "isExtraImport": true,
        "detail": "absl",
        "documentation": {}
    },
    {
        "label": "flags",
        "importPath": "absl",
        "description": "absl",
        "isExtraImport": true,
        "detail": "absl",
        "documentation": {}
    },
    {
        "label": "flags",
        "importPath": "absl",
        "description": "absl",
        "isExtraImport": true,
        "detail": "absl",
        "documentation": {}
    },
    {
        "label": "flags",
        "importPath": "absl",
        "description": "absl",
        "isExtraImport": true,
        "detail": "absl",
        "documentation": {}
    },
    {
        "label": "flags",
        "importPath": "absl",
        "description": "absl",
        "isExtraImport": true,
        "detail": "absl",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "absl",
        "description": "absl",
        "isExtraImport": true,
        "detail": "absl",
        "documentation": {}
    },
    {
        "label": "flags",
        "importPath": "absl",
        "description": "absl",
        "isExtraImport": true,
        "detail": "absl",
        "documentation": {}
    },
    {
        "label": "flags",
        "importPath": "absl",
        "description": "absl",
        "isExtraImport": true,
        "detail": "absl",
        "documentation": {}
    },
    {
        "label": "Api",
        "importPath": "googleapis.codegen.api",
        "description": "googleapis.codegen.api",
        "isExtraImport": true,
        "detail": "googleapis.codegen.api",
        "documentation": {}
    },
    {
        "label": "Api",
        "importPath": "googleapis.codegen.api",
        "description": "googleapis.codegen.api",
        "isExtraImport": true,
        "detail": "googleapis.codegen.api",
        "documentation": {}
    },
    {
        "label": "AuthScope",
        "importPath": "googleapis.codegen.api",
        "description": "googleapis.codegen.api",
        "isExtraImport": true,
        "detail": "googleapis.codegen.api",
        "documentation": {}
    },
    {
        "label": "Method",
        "importPath": "googleapis.codegen.api",
        "description": "googleapis.codegen.api",
        "isExtraImport": true,
        "detail": "googleapis.codegen.api",
        "documentation": {}
    },
    {
        "label": "Resource",
        "importPath": "googleapis.codegen.api",
        "description": "googleapis.codegen.api",
        "isExtraImport": true,
        "detail": "googleapis.codegen.api",
        "documentation": {}
    },
    {
        "label": "Schema",
        "importPath": "googleapis.codegen.api",
        "description": "googleapis.codegen.api",
        "isExtraImport": true,
        "detail": "googleapis.codegen.api",
        "documentation": {}
    },
    {
        "label": "Api",
        "importPath": "googleapis.codegen.api",
        "description": "googleapis.codegen.api",
        "isExtraImport": true,
        "detail": "googleapis.codegen.api",
        "documentation": {}
    },
    {
        "label": "Targets",
        "importPath": "googleapis.codegen.targets",
        "description": "googleapis.codegen.targets",
        "isExtraImport": true,
        "detail": "googleapis.codegen.targets",
        "documentation": {}
    },
    {
        "label": "Targets",
        "importPath": "googleapis.codegen.targets",
        "description": "googleapis.codegen.targets",
        "isExtraImport": true,
        "detail": "googleapis.codegen.targets",
        "documentation": {}
    },
    {
        "label": "httplib2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "httplib2",
        "description": "httplib2",
        "detail": "httplib2",
        "documentation": {}
    },
    {
        "label": "DjangoRenderTemplate",
        "importPath": "googleapis.codegen.django_helpers",
        "description": "googleapis.codegen.django_helpers",
        "isExtraImport": true,
        "detail": "googleapis.codegen.django_helpers",
        "documentation": {}
    },
    {
        "label": "MarkSafe",
        "importPath": "googleapis.codegen.django_helpers",
        "description": "googleapis.codegen.django_helpers",
        "isExtraImport": true,
        "detail": "googleapis.codegen.django_helpers",
        "documentation": {}
    },
    {
        "label": "LanguageModel",
        "importPath": "googleapis.codegen.language_model",
        "description": "googleapis.codegen.language_model",
        "isExtraImport": true,
        "detail": "googleapis.codegen.language_model",
        "documentation": {}
    },
    {
        "label": "UseableInTemplates",
        "importPath": "googleapis.codegen.template_objects",
        "description": "googleapis.codegen.template_objects",
        "isExtraImport": true,
        "detail": "googleapis.codegen.template_objects",
        "documentation": {}
    },
    {
        "label": "CodeObject",
        "importPath": "googleapis.codegen.template_objects",
        "description": "googleapis.codegen.template_objects",
        "isExtraImport": true,
        "detail": "googleapis.codegen.template_objects",
        "documentation": {}
    },
    {
        "label": "absltest",
        "importPath": "absl.testing",
        "description": "absl.testing",
        "isExtraImport": true,
        "detail": "absl.testing",
        "documentation": {}
    },
    {
        "label": "absltest",
        "importPath": "absl.testing",
        "description": "absl.testing",
        "isExtraImport": true,
        "detail": "absl.testing",
        "documentation": {}
    },
    {
        "label": "absltest",
        "importPath": "absl.testing",
        "description": "absl.testing",
        "isExtraImport": true,
        "detail": "absl.testing",
        "documentation": {}
    },
    {
        "label": "absltest",
        "importPath": "absl.testing",
        "description": "absl.testing",
        "isExtraImport": true,
        "detail": "absl.testing",
        "documentation": {}
    },
    {
        "label": "absltest",
        "importPath": "absl.testing",
        "description": "absl.testing",
        "isExtraImport": true,
        "detail": "absl.testing",
        "documentation": {}
    },
    {
        "label": "absltest",
        "importPath": "absl.testing",
        "description": "absl.testing",
        "isExtraImport": true,
        "detail": "absl.testing",
        "documentation": {}
    },
    {
        "label": "absltest",
        "importPath": "absl.testing",
        "description": "absl.testing",
        "isExtraImport": true,
        "detail": "absl.testing",
        "documentation": {}
    },
    {
        "label": "absltest",
        "importPath": "absl.testing",
        "description": "absl.testing",
        "isExtraImport": true,
        "detail": "absl.testing",
        "documentation": {}
    },
    {
        "label": "absltest",
        "importPath": "absl.testing",
        "description": "absl.testing",
        "isExtraImport": true,
        "detail": "absl.testing",
        "documentation": {}
    },
    {
        "label": "absltest",
        "importPath": "absl.testing",
        "description": "absl.testing",
        "isExtraImport": true,
        "detail": "absl.testing",
        "documentation": {}
    },
    {
        "label": "absltest",
        "importPath": "absl.testing",
        "description": "absl.testing",
        "isExtraImport": true,
        "detail": "absl.testing",
        "documentation": {}
    },
    {
        "label": "absltest",
        "importPath": "absl.testing",
        "description": "absl.testing",
        "isExtraImport": true,
        "detail": "absl.testing",
        "documentation": {}
    },
    {
        "label": "absltest",
        "importPath": "absl.testing",
        "description": "absl.testing",
        "isExtraImport": true,
        "detail": "absl.testing",
        "documentation": {}
    },
    {
        "label": "absltest",
        "importPath": "absl.testing",
        "description": "absl.testing",
        "isExtraImport": true,
        "detail": "absl.testing",
        "documentation": {}
    },
    {
        "label": "absltest",
        "importPath": "absl.testing",
        "description": "absl.testing",
        "isExtraImport": true,
        "detail": "absl.testing",
        "documentation": {}
    },
    {
        "label": "absltest",
        "importPath": "absl.testing",
        "description": "absl.testing",
        "isExtraImport": true,
        "detail": "absl.testing",
        "documentation": {}
    },
    {
        "label": "absltest",
        "importPath": "absl.testing",
        "description": "absl.testing",
        "isExtraImport": true,
        "detail": "absl.testing",
        "documentation": {}
    },
    {
        "label": "absltest",
        "importPath": "absl.testing",
        "description": "absl.testing",
        "isExtraImport": true,
        "detail": "absl.testing",
        "documentation": {}
    },
    {
        "label": "absltest",
        "importPath": "absl.testing",
        "description": "absl.testing",
        "isExtraImport": true,
        "detail": "absl.testing",
        "documentation": {}
    },
    {
        "label": "absltest",
        "importPath": "absl.testing",
        "description": "absl.testing",
        "isExtraImport": true,
        "detail": "absl.testing",
        "documentation": {}
    },
    {
        "label": "absltest",
        "importPath": "absl.testing",
        "description": "absl.testing",
        "isExtraImport": true,
        "detail": "absl.testing",
        "documentation": {}
    },
    {
        "label": "absltest",
        "importPath": "absl.testing",
        "description": "absl.testing",
        "isExtraImport": true,
        "detail": "absl.testing",
        "documentation": {}
    },
    {
        "label": "absltest",
        "importPath": "absl.testing",
        "description": "absl.testing",
        "isExtraImport": true,
        "detail": "absl.testing",
        "documentation": {}
    },
    {
        "label": "absltest",
        "importPath": "absl.testing",
        "description": "absl.testing",
        "isExtraImport": true,
        "detail": "absl.testing",
        "documentation": {}
    },
    {
        "label": "absltest",
        "importPath": "absl.testing",
        "description": "absl.testing",
        "isExtraImport": true,
        "detail": "absl.testing",
        "documentation": {}
    },
    {
        "label": "absltest",
        "importPath": "absl.testing",
        "description": "absl.testing",
        "isExtraImport": true,
        "detail": "absl.testing",
        "documentation": {}
    },
    {
        "label": "absltest",
        "importPath": "absl.testing",
        "description": "absl.testing",
        "isExtraImport": true,
        "detail": "absl.testing",
        "documentation": {}
    },
    {
        "label": "run_script_module",
        "importPath": "google.apputils",
        "description": "google.apputils",
        "isExtraImport": true,
        "detail": "google.apputils",
        "documentation": {}
    },
    {
        "label": "textwrap",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "textwrap",
        "description": "textwrap",
        "detail": "textwrap",
        "documentation": {}
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "django.template",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.template",
        "description": "django.template",
        "detail": "django.template",
        "documentation": {}
    },
    {
        "label": "copy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "copy",
        "description": "copy",
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "tempfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tempfile",
        "description": "tempfile",
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "division",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "division",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "sys,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys.",
        "description": "sys.",
        "detail": "sys.",
        "documentation": {}
    },
    {
        "label": "lexers",
        "importPath": "sphinx.highlighting",
        "description": "sphinx.highlighting",
        "isExtraImport": true,
        "detail": "sphinx.highlighting",
        "documentation": {}
    },
    {
        "label": "PhpLexer",
        "importPath": "pygments.lexers.web",
        "description": "pygments.lexers.web",
        "isExtraImport": true,
        "detail": "pygments.lexers.web",
        "documentation": {}
    },
    {
        "label": "guzzle_sphinx_theme",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "guzzle_sphinx_theme",
        "description": "guzzle_sphinx_theme",
        "detail": "guzzle_sphinx_theme",
        "documentation": {}
    },
    {
        "label": "WEIGHTS",
        "kind": 5,
        "importPath": "api1.config",
        "description": "api1.config",
        "peekOfCode": "WEIGHTS = {\n    \"competences\": float(\n        os.getenv(\"COMPETENCES_WEIGHT\", 0.40)\n    ),  # 40% pour les compétences\n    \"formation\": float(\n        os.getenv(\"FORMATION_WEIGHT\", 0.20)\n    ),  # 20% pour la formation/diplômes\n    \"experience\": float(\n        os.getenv(\"EXPERIENCE_WEIGHT\", 0.20)\n    ),  # 20% pour l'expérience professionnelle",
        "detail": "api1.config",
        "documentation": {}
    },
    {
        "label": "COMPATIBILITY_THRESHOLDS",
        "kind": 5,
        "importPath": "api1.config",
        "description": "api1.config",
        "peekOfCode": "COMPATIBILITY_THRESHOLDS = {\n    \"excellent\": float(\n        os.getenv(\"THRESHOLD_EXCELLENT\", 0.85)\n    ),  # Au-dessus de 85% = excellente compatibilité\n    \"good\": float(\n        os.getenv(\"THRESHOLD_GOOD\", 0.70)\n    ),  # Entre 70% et 85% = bonne compatibilité\n    \"moderate\": float(\n        os.getenv(\"THRESHOLD_MODERATE\", 0.50)\n    ),  # Entre 50% et 70% = compatibilité moyenne",
        "detail": "api1.config",
        "documentation": {}
    },
    {
        "label": "COMPATIBILITY_MESSAGES",
        "kind": 5,
        "importPath": "api1.config",
        "description": "api1.config",
        "peekOfCode": "COMPATIBILITY_MESSAGES = {\n    \"excellent\": \"Votre profil correspond parfaitement à cette offre!\",\n    \"good\": \"Votre profil correspond bien à cette offre.\",\n    \"moderate\": \"Votre profil correspond partiellement à cette offre.\",\n    \"low\": \"Votre profil correspond peu à cette offre.\",\n    \"poor\": \"Votre profil ne correspond pas à cette offre.\",\n}\n# Nombre maximum de points forts et points à améliorer à retourner\nMAX_STRENGTHS = int(os.getenv(\"MAX_STRENGTHS\", 5))\nMAX_IMPROVEMENTS = int(os.getenv(\"MAX_IMPROVEMENTS\", 5))",
        "detail": "api1.config",
        "documentation": {}
    },
    {
        "label": "MAX_STRENGTHS",
        "kind": 5,
        "importPath": "api1.config",
        "description": "api1.config",
        "peekOfCode": "MAX_STRENGTHS = int(os.getenv(\"MAX_STRENGTHS\", 5))\nMAX_IMPROVEMENTS = int(os.getenv(\"MAX_IMPROVEMENTS\", 5))\n# Nouveaux seuils de similarité par catégorie\nSIMILARITY_THRESHOLDS = {\n    \"competences\": float(os.getenv(\"COMPETENCES_SIMILARITY_THRESHOLD\", 0.75)),\n    \"domaines_formation\": float(os.getenv(\"FORMATION_SIMILARITY_THRESHOLD\", 0.65)),\n}\n# Configuration de l'API\nAPI_CONFIG = {\n    \"title\": \"API de Matching WorkFlexer\",",
        "detail": "api1.config",
        "documentation": {}
    },
    {
        "label": "MAX_IMPROVEMENTS",
        "kind": 5,
        "importPath": "api1.config",
        "description": "api1.config",
        "peekOfCode": "MAX_IMPROVEMENTS = int(os.getenv(\"MAX_IMPROVEMENTS\", 5))\n# Nouveaux seuils de similarité par catégorie\nSIMILARITY_THRESHOLDS = {\n    \"competences\": float(os.getenv(\"COMPETENCES_SIMILARITY_THRESHOLD\", 0.75)),\n    \"domaines_formation\": float(os.getenv(\"FORMATION_SIMILARITY_THRESHOLD\", 0.65)),\n}\n# Configuration de l'API\nAPI_CONFIG = {\n    \"title\": \"API de Matching WorkFlexer\",\n    \"description\": \"API pour analyser la compatibilité entre un profil candidat et une offre d'emploi\",",
        "detail": "api1.config",
        "documentation": {}
    },
    {
        "label": "SIMILARITY_THRESHOLDS",
        "kind": 5,
        "importPath": "api1.config",
        "description": "api1.config",
        "peekOfCode": "SIMILARITY_THRESHOLDS = {\n    \"competences\": float(os.getenv(\"COMPETENCES_SIMILARITY_THRESHOLD\", 0.75)),\n    \"domaines_formation\": float(os.getenv(\"FORMATION_SIMILARITY_THRESHOLD\", 0.65)),\n}\n# Configuration de l'API\nAPI_CONFIG = {\n    \"title\": \"API de Matching WorkFlexer\",\n    \"description\": \"API pour analyser la compatibilité entre un profil candidat et une offre d'emploi\",\n    \"version\": os.getenv(\"API_VERSION\", \"2.0.0\"),\n    \"docs_url\": \"/docs\",",
        "detail": "api1.config",
        "documentation": {}
    },
    {
        "label": "API_CONFIG",
        "kind": 5,
        "importPath": "api1.config",
        "description": "api1.config",
        "peekOfCode": "API_CONFIG = {\n    \"title\": \"API de Matching WorkFlexer\",\n    \"description\": \"API pour analyser la compatibilité entre un profil candidat et une offre d'emploi\",\n    \"version\": os.getenv(\"API_VERSION\", \"2.0.0\"),\n    \"docs_url\": \"/docs\",\n    \"redoc_url\": \"/redoc\",\n}\n# Configuration du logging\nLOG_CONFIG = {\n    \"level\": os.getenv(\"LOG_LEVEL\", \"INFO\"),",
        "detail": "api1.config",
        "documentation": {}
    },
    {
        "label": "LOG_CONFIG",
        "kind": 5,
        "importPath": "api1.config",
        "description": "api1.config",
        "peekOfCode": "LOG_CONFIG = {\n    \"level\": os.getenv(\"LOG_LEVEL\", \"INFO\"),\n    \"format\": \"%(asctime)s - %(name)s - %(levelname)s - %(message)s\",\n    \"filename\": os.getenv(\"LOG_FILE\", \"api_matching.log\"),\n}\n# Configuration CORS\nCORS_CONFIG = {\n    \"allow_origins\": os.getenv(\"CORS_ALLOWED_ORIGINS\", \"*\").split(\",\"),\n    \"allow_credentials\": True,\n    \"allow_methods\": [\"*\"],",
        "detail": "api1.config",
        "documentation": {}
    },
    {
        "label": "CORS_CONFIG",
        "kind": 5,
        "importPath": "api1.config",
        "description": "api1.config",
        "peekOfCode": "CORS_CONFIG = {\n    \"allow_origins\": os.getenv(\"CORS_ALLOWED_ORIGINS\", \"*\").split(\",\"),\n    \"allow_credentials\": True,\n    \"allow_methods\": [\"*\"],\n    \"allow_headers\": [\"*\"],\n}\n# Nouvelles configurations pour l'analyse avancée\nADVANCED_CONFIG = {\n    # Seuils pour les niveaux d'adéquation\n    \"adequation_thresholds\": {",
        "detail": "api1.config",
        "documentation": {}
    },
    {
        "label": "ADVANCED_CONFIG",
        "kind": 5,
        "importPath": "api1.config",
        "description": "api1.config",
        "peekOfCode": "ADVANCED_CONFIG = {\n    # Seuils pour les niveaux d'adéquation\n    \"adequation_thresholds\": {\n        \"excellent\": float(os.getenv(\"ADEQUATION_EXCELLENT\", 0.75)),\n        \"bon\": float(os.getenv(\"ADEQUATION_BON\", 0.50)),\n        \"moyen\": float(os.getenv(\"ADEQUATION_MOYEN\", 0.30)),\n        \"faible\": float(os.getenv(\"ADEQUATION_FAIBLE\", 0.0)),\n    },\n    # Poids par défaut pour l'analyse avancée\n    \"default_weights\": {",
        "detail": "api1.config",
        "documentation": {}
    },
    {
        "label": "LEARNING_RESOURCES",
        "kind": 5,
        "importPath": "api1.config",
        "description": "api1.config",
        "peekOfCode": "LEARNING_RESOURCES = {\n    \"competences\": {\n        \"droit des contrats\": [\n            {\n                \"titre\": \"Formation en droit des contrats\",\n                \"type\": \"cours\",\n                \"url\": \"https://www.coursera.org/learn/contrats\",\n                \"duree\": \"4 semaines\",\n                \"niveau\": \"débutant\",\n            },",
        "detail": "api1.config",
        "documentation": {}
    },
    {
        "label": "DakarMatchingRequest",
        "kind": 6,
        "importPath": "api1.main",
        "description": "api1.main",
        "peekOfCode": "class DakarMatchingRequest(BaseModel):\n    candidate_data: CandidatProfileDakar\n    job_offer_data: JobOfferDakar\n# --- Modèle de requête pour la route Senjob ---\nclass SenjobMatchingRequest(BaseModel):\n    candidate_data: CandidatProfileDakar\n    job_offer_data: JobOfferSenjob\n# Chargement des variables d'environnement\nload_dotenv()\n# Configuration du logging",
        "detail": "api1.main",
        "documentation": {}
    },
    {
        "label": "SenjobMatchingRequest",
        "kind": 6,
        "importPath": "api1.main",
        "description": "api1.main",
        "peekOfCode": "class SenjobMatchingRequest(BaseModel):\n    candidate_data: CandidatProfileDakar\n    job_offer_data: JobOfferSenjob\n# Chargement des variables d'environnement\nload_dotenv()\n# Configuration du logging\nlogging.basicConfig(\n    level=getattr(logging, config.LOG_CONFIG[\"level\"]),\n    format=config.LOG_CONFIG[\"format\"],\n    handlers=[",
        "detail": "api1.main",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "api1.main",
        "description": "api1.main",
        "peekOfCode": "logger = logging.getLogger(\"api_matching\")\n# Configuration de l'API\napp = FastAPI(\n    title=config.API_CONFIG[\"title\"],\n    description=config.API_CONFIG[\"description\"],\n    version=config.API_CONFIG[\"version\"],\n    docs_url=config.API_CONFIG[\"docs_url\"],\n    redoc_url=config.API_CONFIG[\"redoc_url\"],\n)\n# Configuration CORS",
        "detail": "api1.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "api1.main",
        "description": "api1.main",
        "peekOfCode": "app = FastAPI(\n    title=config.API_CONFIG[\"title\"],\n    description=config.API_CONFIG[\"description\"],\n    version=config.API_CONFIG[\"version\"],\n    docs_url=config.API_CONFIG[\"docs_url\"],\n    redoc_url=config.API_CONFIG[\"redoc_url\"],\n)\n# Configuration CORS\napp.add_middleware(\n    CORSMiddleware,",
        "detail": "api1.main",
        "documentation": {}
    },
    {
        "label": "log_directory",
        "kind": 5,
        "importPath": "api1.main",
        "description": "api1.main",
        "peekOfCode": "log_directory = os.path.dirname(__file__)\nlog_file_path = os.path.join(log_directory, 'api_matching.log')\n# S'assurer que le handler n'est pas ajouté plusieurs fois si le module est rechargé\napi_logger = logging.getLogger('api_matching')\nif not api_logger.handlers:\n    handler = logging.FileHandler(log_file_path)\n    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n    handler.setFormatter(formatter)\n    api_logger.addHandler(handler)\n    api_logger.setLevel(logging.INFO)",
        "detail": "api1.main",
        "documentation": {}
    },
    {
        "label": "log_file_path",
        "kind": 5,
        "importPath": "api1.main",
        "description": "api1.main",
        "peekOfCode": "log_file_path = os.path.join(log_directory, 'api_matching.log')\n# S'assurer que le handler n'est pas ajouté plusieurs fois si le module est rechargé\napi_logger = logging.getLogger('api_matching')\nif not api_logger.handlers:\n    handler = logging.FileHandler(log_file_path)\n    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n    handler.setFormatter(formatter)\n    api_logger.addHandler(handler)\n    api_logger.setLevel(logging.INFO)\n# Gestionnaires d'erreurs personnalisés",
        "detail": "api1.main",
        "documentation": {}
    },
    {
        "label": "api_logger",
        "kind": 5,
        "importPath": "api1.main",
        "description": "api1.main",
        "peekOfCode": "api_logger = logging.getLogger('api_matching')\nif not api_logger.handlers:\n    handler = logging.FileHandler(log_file_path)\n    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n    handler.setFormatter(formatter)\n    api_logger.addHandler(handler)\n    api_logger.setLevel(logging.INFO)\n# Gestionnaires d'erreurs personnalisés\n@app.exception_handler(RequestValidationError)\nasync def validation_exception_handler(request: Request, exc: RequestValidationError):",
        "detail": "api1.main",
        "documentation": {}
    },
    {
        "label": "ExtractedEntity",
        "kind": 6,
        "importPath": "api1.models",
        "description": "api1.models",
        "peekOfCode": "class ExtractedEntity(BaseModel):\n    \"\"\"Entité extraite par SpaCy\"\"\"\n    text: str\n    label: str  # PERSON, ORG, TECH, SKILL, etc.\n    start: int\n    end: int\n    confidence: float = 1.0\nclass SectionEmbedding(BaseModel):\n    \"\"\"Embedding d'une section spécifique\"\"\"\n    section_name: str  # \"competences\", \"experience\", \"formation\", etc.",
        "detail": "api1.models",
        "documentation": {}
    },
    {
        "label": "SectionEmbedding",
        "kind": 6,
        "importPath": "api1.models",
        "description": "api1.models",
        "peekOfCode": "class SectionEmbedding(BaseModel):\n    \"\"\"Embedding d'une section spécifique\"\"\"\n    section_name: str  # \"competences\", \"experience\", \"formation\", etc.\n    text: str\n    embedding: List[float] = Field(default_factory=list)\n    entities: List[ExtractedEntity] = Field(default_factory=list)\n    keywords: List[str] = Field(default_factory=list)\n    normalized_terms: Dict[str, str] = Field(default_factory=dict)  # \"JS\" -> \"JavaScript\"\nclass SemanticSimilarity(BaseModel):\n    \"\"\"Résultat de comparaison sémantique\"\"\"",
        "detail": "api1.models",
        "documentation": {}
    },
    {
        "label": "SemanticSimilarity",
        "kind": 6,
        "importPath": "api1.models",
        "description": "api1.models",
        "peekOfCode": "class SemanticSimilarity(BaseModel):\n    \"\"\"Résultat de comparaison sémantique\"\"\"\n    score: float = Field(ge=0.0, le=1.0)\n    matched_terms: List[Dict[str, str]] = Field(default_factory=list)  # [{\"candidate\": \"Python\", \"offer\": \"Python\"}]\n    missing_terms: List[str] = Field(default_factory=list)\n    extra_terms: List[str] = Field(default_factory=list)\n    semantic_matches: List[Dict[str, Union[str, float]]] = Field(default_factory=list)  # Matches sémantiques avec scores\nclass AdvancedCompetenceAnalysis(BaseModel):\n    \"\"\"Analyse avancée des compétences avec recherche sémantique\"\"\"\n    exact_matches: List[str] = Field(default_factory=list)",
        "detail": "api1.models",
        "documentation": {}
    },
    {
        "label": "AdvancedCompetenceAnalysis",
        "kind": 6,
        "importPath": "api1.models",
        "description": "api1.models",
        "peekOfCode": "class AdvancedCompetenceAnalysis(BaseModel):\n    \"\"\"Analyse avancée des compétences avec recherche sémantique\"\"\"\n    exact_matches: List[str] = Field(default_factory=list)\n    semantic_matches: List[Dict[str, Any]] = Field(default_factory=list)\n    missing_critical: List[str] = Field(default_factory=list)\n    missing_optional: List[str] = Field(default_factory=list)\n    technology_clusters: Dict[str, List[str]] = Field(default_factory=dict)  # \"Frontend\": [\"React\", \"Vue\"], etc.\n    skill_levels: Dict[str, Dict[str, Union[int, str]]] = Field(default_factory=dict)\n    similarity_matrix: Dict[str, Dict[str, float]] = Field(default_factory=dict)\nclass HybridAnalysisResult(BaseModel):",
        "detail": "api1.models",
        "documentation": {}
    },
    {
        "label": "HybridAnalysisResult",
        "kind": 6,
        "importPath": "api1.models",
        "description": "api1.models",
        "peekOfCode": "class HybridAnalysisResult(BaseModel):\n    \"\"\"Résultat de l'analyse hybride niveau 1 (global) + niveau 2 (granulaire)\"\"\"\n    global_similarity: float\n    global_embedding_score: float\n    section_similarities: Dict[str, SemanticSimilarity] = Field(default_factory=dict)\n    competence_analysis: AdvancedCompetenceAnalysis = Field(default_factory=AdvancedCompetenceAnalysis)\n    entity_matches: Dict[str, List[ExtractedEntity]] = Field(default_factory=dict)\n    keyword_density: Dict[str, float] = Field(default_factory=dict)\n    contextual_relevance: float = 0.0\n# === MODÈLES ENRICHIS EXISTANTS ===",
        "detail": "api1.models",
        "documentation": {}
    },
    {
        "label": "Formation",
        "kind": 6,
        "importPath": "api1.models",
        "description": "api1.models",
        "peekOfCode": "class Formation(BaseModel):\n    niveau: str\n    domaine: str\n    etablissement: Optional[str] = None\n    annee_obtention: Optional[int] = None\n    description: Optional[str] = None\n    date_debut: Optional[str] = None\n    date_fin: Optional[str] = None\n    en_cours: bool = False\n    type_formation: Optional[str] = None",
        "detail": "api1.models",
        "documentation": {}
    },
    {
        "label": "Experience",
        "kind": 6,
        "importPath": "api1.models",
        "description": "api1.models",
        "peekOfCode": "class Experience(BaseModel):\n    titre_poste: str\n    entreprise: Optional[str] = None\n    duree_mois: int = 0\n    description: str = \"\"\n    competences: List[str] = Field(default_factory=list)\n    secteur: Optional[str] = None\n    date_debut: Optional[str] = None\n    date_fin: Optional[str] = None\n    en_cours: bool = False",
        "detail": "api1.models",
        "documentation": {}
    },
    {
        "label": "Competence",
        "kind": 6,
        "importPath": "api1.models",
        "description": "api1.models",
        "peekOfCode": "class Competence(BaseModel):\n    nom: str\n    niveau: int = Field(ge=1, le=5, default=1)\n    annees_experience: float = 0.0\n    certifications: List[str] = Field(default_factory=list)\n    derniere_utilisation: Optional[str] = None\n    contexte_utilisation: List[str] = Field(default_factory=list)\n    type_competence: str = \"Technique\"\n    projets_associes: List[str] = Field(default_factory=list)\n    # Nouveaux champs pour l'approche hybride",
        "detail": "api1.models",
        "documentation": {}
    },
    {
        "label": "Langue",
        "kind": 6,
        "importPath": "api1.models",
        "description": "api1.models",
        "peekOfCode": "class Langue(BaseModel):\n    nom: str\n    niveau: str = \"A1\"\n    certifications: List[str] = Field(default_factory=list)\n    date_certification: Optional[str] = None\n    contexte_utilisation: List[str] = Field(default_factory=list)\n    sejours_linguistiques: List[Dict[str, str]] = Field(default_factory=list)\n    # Nouveaux champs pour l'approche hybride\n    normalized_name: Optional[str] = None\n    native_level: bool = False",
        "detail": "api1.models",
        "documentation": {}
    },
    {
        "label": "ProjetPersonnel",
        "kind": 6,
        "importPath": "api1.models",
        "description": "api1.models",
        "peekOfCode": "class ProjetPersonnel(BaseModel):\n    id: Optional[int] = None\n    users_id: Optional[int] = None\n    titre: str\n    liens: Optional[str] = None\n    description: str = \"\"\n    images: Optional[str] = None\n    date: Optional[str] = None\n    technologies: List[str] = Field(default_factory=list)\n    date_debut: Optional[str] = None",
        "detail": "api1.models",
        "documentation": {}
    },
    {
        "label": "CandidatProfile",
        "kind": 6,
        "importPath": "api1.models",
        "description": "api1.models",
        "peekOfCode": "class CandidatProfile(BaseModel):\n    id: int\n    # Informations de base de l'utilisateur (table users)\n    nom: str\n    email: str = \"\"\n    telephone: str = \"\"\n    ville: Optional[str] = None\n    domaine_competence: Optional[str] = None  # Correspond à 'competences' dans la table users\n    profession: Optional[str] = None\n    categorie: Optional[str] = None",
        "detail": "api1.models",
        "documentation": {}
    },
    {
        "label": "ExigenceFormation",
        "kind": 6,
        "importPath": "api1.models",
        "description": "api1.models",
        "peekOfCode": "class ExigenceFormation(BaseModel):\n    niveau_minimum: str = \"Non spécifié\"\n    niveau_valeur: int = 0\n    domaines_acceptes: List[str] = Field(default_factory=list)\n    formation_obligatoire: bool = False\n    formations_alternatives: List[str] = Field(default_factory=list)\n    equivalences_acceptees: List[str] = Field(default_factory=list)\n    specialisations_preferees: List[str] = Field(default_factory=list)\n    # Nouveaux champs pour l'approche hybride\n    embedding: List[float] = Field(default_factory=list)",
        "detail": "api1.models",
        "documentation": {}
    },
    {
        "label": "ExigenceExperience",
        "kind": 6,
        "importPath": "api1.models",
        "description": "api1.models",
        "peekOfCode": "class ExigenceExperience(BaseModel):\n    niveau: str = \"Non spécifié\"\n    duree_minimum_mois: int = 0\n    secteurs_acceptes: List[str] = Field(default_factory=list)\n    competences_requises: List[str] = Field(default_factory=list)\n    mots_cles_poste: List[str] = Field(default_factory=list)\n    niveaux_responsabilite: List[str] = Field(default_factory=list)\n    contextes_valorises: List[str] = Field(default_factory=list)\n    type_experience: List[str] = Field(default_factory=list)\n    # Nouveaux champs pour l'approche hybride",
        "detail": "api1.models",
        "documentation": {}
    },
    {
        "label": "JobOffer",
        "kind": 6,
        "importPath": "api1.models",
        "description": "api1.models",
        "peekOfCode": "class JobOffer(BaseModel):\n    id: int\n    titre: str\n    description: str = \"\"\n    formation_requise: ExigenceFormation = Field(default_factory=ExigenceFormation)\n    experience_requise: ExigenceExperience = Field(default_factory=ExigenceExperience)\n    competences_requises: List[Competence] = Field(default_factory=list)\n    langues_requises: List[Langue] = Field(default_factory=list)\n    secteur: str\n    type_contrat: str",
        "detail": "api1.models",
        "documentation": {}
    },
    {
        "label": "EntityMatchResult",
        "kind": 6,
        "importPath": "api1.models",
        "description": "api1.models",
        "peekOfCode": "class EntityMatchResult(BaseModel):\n    \"\"\"Résultat de correspondance d'entités entre candidat et offre\"\"\"\n    entity_type: str  # SKILL, TECH, ORG, etc.\n    candidate_entities: List[ExtractedEntity] = Field(default_factory=list)\n    offer_entities: List[ExtractedEntity] = Field(default_factory=list)\n    matches: List[Dict[str, Any]] = Field(default_factory=list)\n    missing_in_candidate: List[ExtractedEntity] = Field(default_factory=list)\n    similarity_scores: Dict[str, float] = Field(default_factory=dict)\nclass SkillGapAnalysis(BaseModel):\n    \"\"\"Analyse des lacunes de compétences\"\"\"",
        "detail": "api1.models",
        "documentation": {}
    },
    {
        "label": "SkillGapAnalysis",
        "kind": 6,
        "importPath": "api1.models",
        "description": "api1.models",
        "peekOfCode": "class SkillGapAnalysis(BaseModel):\n    \"\"\"Analyse des lacunes de compétences\"\"\"\n    missing_critical_skills: List[Dict[str, Any]] = Field(default_factory=list)\n    missing_nice_to_have: List[Dict[str, Any]] = Field(default_factory=list)\n    transferable_skills: List[Dict[str, Any]] = Field(default_factory=list)\n    learning_path: List[Dict[str, Any]] = Field(default_factory=list)\n    estimated_learning_time: Dict[str, str] = Field(default_factory=dict)\n    market_resources: List[Dict[str, str]] = Field(default_factory=list)\nclass CareerProgressionAnalysis(BaseModel):\n    \"\"\"Analyse de progression de carrière\"\"\"",
        "detail": "api1.models",
        "documentation": {}
    },
    {
        "label": "CareerProgressionAnalysis",
        "kind": 6,
        "importPath": "api1.models",
        "description": "api1.models",
        "peekOfCode": "class CareerProgressionAnalysis(BaseModel):\n    \"\"\"Analyse de progression de carrière\"\"\"\n    current_level: str\n    target_level: str\n    progression_feasibility: float\n    required_experience_gap: int  # en mois\n    skill_progression_needed: List[Dict[str, Any]] = Field(default_factory=list)\n    typical_career_path: List[str] = Field(default_factory=list)\nclass IndustryRelevanceAnalysis(BaseModel):\n    \"\"\"Analyse de pertinence sectorielle\"\"\"",
        "detail": "api1.models",
        "documentation": {}
    },
    {
        "label": "IndustryRelevanceAnalysis",
        "kind": 6,
        "importPath": "api1.models",
        "description": "api1.models",
        "peekOfCode": "class IndustryRelevanceAnalysis(BaseModel):\n    \"\"\"Analyse de pertinence sectorielle\"\"\"\n    sector_match_score: float\n    industry_keywords_match: Dict[str, float] = Field(default_factory=dict)\n    cross_industry_transferability: float\n    sector_specific_gaps: List[str] = Field(default_factory=list)\n    emerging_trends_alignment: float\nclass CompetenceAnalysis(BaseModel):\n    score: float\n    niveau_actuel: int",
        "detail": "api1.models",
        "documentation": {}
    },
    {
        "label": "CompetenceAnalysis",
        "kind": 6,
        "importPath": "api1.models",
        "description": "api1.models",
        "peekOfCode": "class CompetenceAnalysis(BaseModel):\n    score: float\n    niveau_actuel: int\n    niveau_requis: int\n    experience_pertinente: List[str] = Field(default_factory=list)\n    projets_pertinents: List[str] = Field(default_factory=list)\n    certifications_pertinentes: List[str] = Field(default_factory=list)\n    suggestions_amelioration: List[str] = Field(default_factory=list)\nclass DetailedScore(BaseModel):\n    score: float",
        "detail": "api1.models",
        "documentation": {}
    },
    {
        "label": "DetailedScore",
        "kind": 6,
        "importPath": "api1.models",
        "description": "api1.models",
        "peekOfCode": "class DetailedScore(BaseModel):\n    score: float\n    details: List[str] = Field(default_factory=list)\n    points_forts: List[str] = Field(default_factory=list)\n    points_faibles: List[str] = Field(default_factory=list)\n    recommandations: List[str] = Field(default_factory=list)\n    analyse_detaillee: Optional[Dict[str, Union[float, str, List[str]]]] = None\nclass ReportSection(BaseModel):\n    titre: str\n    score: float",
        "detail": "api1.models",
        "documentation": {}
    },
    {
        "label": "ReportSection",
        "kind": 6,
        "importPath": "api1.models",
        "description": "api1.models",
        "peekOfCode": "class ReportSection(BaseModel):\n    titre: str\n    score: float\n    points_forts: List[str] = Field(default_factory=list)\n    points_faibles: List[str] = Field(default_factory=list)\nclass MatchingScore(BaseModel):\n    formation: DetailedScore\n    experience: DetailedScore\n    competences: DetailedScore\n    langues: DetailedScore",
        "detail": "api1.models",
        "documentation": {}
    },
    {
        "label": "MatchingScore",
        "kind": 6,
        "importPath": "api1.models",
        "description": "api1.models",
        "peekOfCode": "class MatchingScore(BaseModel):\n    formation: DetailedScore\n    experience: DetailedScore\n    competences: DetailedScore\n    langues: DetailedScore\n    global_score: float\n    profil_completion: Dict[str, Dict[str, Union[float, Dict[str, Union[int, float]]]]]\n    lacunes_critiques: List[Dict[str, str]] = Field(default_factory=list)\n    atouts_majeurs: List[Dict[str, str]] = Field(default_factory=list)\n    suggestions_amelioration: List[Dict[str, str]] = Field(default_factory=list)",
        "detail": "api1.models",
        "documentation": {}
    },
    {
        "label": "MatchingRequest",
        "kind": 6,
        "importPath": "api1.models",
        "description": "api1.models",
        "peekOfCode": "class MatchingRequest(BaseModel):\n    candidate: CandidatProfile\n    job_offer: JobOffer\n    options: Dict[str, bool] = Field(default_factory=dict)\nclass ProfileCompletionDetails(BaseModel):\n    formations: float\n    experiences: float\n    competences: float\n    langues: float\nclass ProfileCompletionScore(BaseModel):",
        "detail": "api1.models",
        "documentation": {}
    },
    {
        "label": "ProfileCompletionDetails",
        "kind": 6,
        "importPath": "api1.models",
        "description": "api1.models",
        "peekOfCode": "class ProfileCompletionDetails(BaseModel):\n    formations: float\n    experiences: float\n    competences: float\n    langues: float\nclass ProfileCompletionScore(BaseModel):\n    score: float\n    details: ProfileCompletionDetails\n# Nouveaux modèles pour une meilleure structuration des résultats\nclass PointFort(BaseModel):",
        "detail": "api1.models",
        "documentation": {}
    },
    {
        "label": "ProfileCompletionScore",
        "kind": 6,
        "importPath": "api1.models",
        "description": "api1.models",
        "peekOfCode": "class ProfileCompletionScore(BaseModel):\n    score: float\n    details: ProfileCompletionDetails\n# Nouveaux modèles pour une meilleure structuration des résultats\nclass PointFort(BaseModel):\n    \"\"\"Représente un point fort du candidat par rapport à l'offre\"\"\"\n    description: str\n    categorie: str  # formation, experience, competence, langue\n    importance: str = \"normal\"  # critique, important, normal\n    details: Optional[str] = None",
        "detail": "api1.models",
        "documentation": {}
    },
    {
        "label": "PointFort",
        "kind": 6,
        "importPath": "api1.models",
        "description": "api1.models",
        "peekOfCode": "class PointFort(BaseModel):\n    \"\"\"Représente un point fort du candidat par rapport à l'offre\"\"\"\n    description: str\n    categorie: str  # formation, experience, competence, langue\n    importance: str = \"normal\"  # critique, important, normal\n    details: Optional[str] = None\n    impact_score: Optional[float] = None  # Impact sur le score global (0-1)\nclass PointAmelioration(BaseModel):\n    \"\"\"Représente un point à améliorer pour le candidat\"\"\"\n    description: str",
        "detail": "api1.models",
        "documentation": {}
    },
    {
        "label": "PointAmelioration",
        "kind": 6,
        "importPath": "api1.models",
        "description": "api1.models",
        "peekOfCode": "class PointAmelioration(BaseModel):\n    \"\"\"Représente un point à améliorer pour le candidat\"\"\"\n    description: str\n    categorie: str  # formation, experience, competence, langue\n    priorite: str = \"normale\"  # haute, moyenne, normale\n    suggestion: Optional[str] = None\n    impact_potentiel: Optional[float] = None  # Impact potentiel sur le score (0-1)\n    ressources: Optional[List[Dict[str, str]]] = None  # Ressources pour s'améliorer\nclass CorrespondanceItem(BaseModel):\n    \"\"\"Élément de correspondance entre le profil et l'offre\"\"\"",
        "detail": "api1.models",
        "documentation": {}
    },
    {
        "label": "CorrespondanceItem",
        "kind": 6,
        "importPath": "api1.models",
        "description": "api1.models",
        "peekOfCode": "class CorrespondanceItem(BaseModel):\n    \"\"\"Élément de correspondance entre le profil et l'offre\"\"\"\n    element_profil: str\n    element_offre: str\n    niveau_correspondance: float  # 0 à 1\n    categorie: str  # formation, experience, competence, langue\n    details_correspondance: Optional[str] = None\n    similarite_semantique: Optional[float] = None  # Pour les correspondances sémantiques\nclass ElementManquant(BaseModel):\n    \"\"\"Élément requis par l'offre mais absent du profil\"\"\"",
        "detail": "api1.models",
        "documentation": {}
    },
    {
        "label": "ElementManquant",
        "kind": 6,
        "importPath": "api1.models",
        "description": "api1.models",
        "peekOfCode": "class ElementManquant(BaseModel):\n    \"\"\"Élément requis par l'offre mais absent du profil\"\"\"\n    description: str\n    categorie: str\n    importance: str = \"normale\"  # critique, importante, normale\n    suggestion_acquisition: Optional[str] = None\n    impact_sur_score: Optional[float] = None  # Impact sur le score global (0-1)\n    difficulte_acquisition: Optional[str] = None  # facile, modérée, difficile\nclass AnalyseCategorielle(BaseModel):\n    \"\"\"Analyse détaillée d'une catégorie (formation, expérience, etc.)\"\"\"",
        "detail": "api1.models",
        "documentation": {}
    },
    {
        "label": "AnalyseCategorielle",
        "kind": 6,
        "importPath": "api1.models",
        "description": "api1.models",
        "peekOfCode": "class AnalyseCategorielle(BaseModel):\n    \"\"\"Analyse détaillée d'une catégorie (formation, expérience, etc.)\"\"\"\n    categorie: str\n    score: float\n    elements_correspondants: List[CorrespondanceItem] = Field(default_factory=list)\n    elements_manquants: List[ElementManquant] = Field(default_factory=list)\n    points_forts: List[str] = Field(default_factory=list)\n    points_amelioration: List[str] = Field(default_factory=list)\n    resume: str = \"\"\n    poids_dans_score_global: Optional[float] = None  # Poids de cette catégorie (0-1)",
        "detail": "api1.models",
        "documentation": {}
    },
    {
        "label": "AnalyseDetaillee",
        "kind": 6,
        "importPath": "api1.models",
        "description": "api1.models",
        "peekOfCode": "class AnalyseDetaillee(BaseModel):\n    \"\"\"Analyse détaillée de la compatibilité\"\"\"\n    formation: AnalyseCategorielle\n    experience: AnalyseCategorielle\n    competences: AnalyseCategorielle\n    langues: AnalyseCategorielle\n    facteurs_bonus: Optional[Dict[str, float]] = None  # Facteurs bonus (ex: mobilité)\n    facteurs_malus: Optional[Dict[str, float]] = None  # Facteurs malus (ex: disponibilité)\nclass Suggestion(BaseModel):\n    \"\"\"Suggestion d'amélioration pour le candidat\"\"\"",
        "detail": "api1.models",
        "documentation": {}
    },
    {
        "label": "Suggestion",
        "kind": 6,
        "importPath": "api1.models",
        "description": "api1.models",
        "peekOfCode": "class Suggestion(BaseModel):\n    \"\"\"Suggestion d'amélioration pour le candidat\"\"\"\n    categorie: str\n    description: str\n    priorite: str = \"normale\"  # haute, moyenne, normale\n    impact_estime: str = \"moyen\"  # fort, moyen, faible\n    ressources_recommandees: Optional[List[Dict[str, str]]] = None\n    temps_acquisition_estime: Optional[str] = None  # court, moyen, long terme\n    cout_acquisition_estime: Optional[str] = None  # faible, modéré, élevé\nclass ContexteAnalyse(BaseModel):",
        "detail": "api1.models",
        "documentation": {}
    },
    {
        "label": "ContexteAnalyse",
        "kind": 6,
        "importPath": "api1.models",
        "description": "api1.models",
        "peekOfCode": "class ContexteAnalyse(BaseModel):\n    \"\"\"Contexte de l'analyse effectuée\"\"\"\n    timestamp: str = Field(default_factory=lambda: datetime.now().isoformat())\n    version_api: str = \"2.0.0\"\n    niveau_confiance: str = \"haute\"\n    modeles_utilises: Optional[Dict[str, str]] = None  # Modèles NLP utilisés\n    parametres_analyse: Optional[Dict[str, Any]] = None  # Paramètres utilisés\n    temps_analyse_ms: Optional[int] = None  # Temps d'analyse en millisecondes\n    source_donnees: Optional[str] = None  # Source des données analysées\nclass CompetenceTrouvee(BaseModel):",
        "detail": "api1.models",
        "documentation": {}
    },
    {
        "label": "CompetenceTrouvee",
        "kind": 6,
        "importPath": "api1.models",
        "description": "api1.models",
        "peekOfCode": "class CompetenceTrouvee(BaseModel):\n    \"\"\"Compétence du candidat trouvée dans l'offre\"\"\"\n    competence: str\n    type_correspondance: str  # exact, normalized, semantic\n    confiance: int  # Pourcentage de confiance (0-100)\nclass MatchingResponseSimple(BaseModel):\n    \"\"\"Version simplifiée du modèle de réponse pour l'API\"\"\"\n    score_global: float\n    resume: str\n    competences_message: str",
        "detail": "api1.models",
        "documentation": {}
    },
    {
        "label": "MatchingResponseSimple",
        "kind": 6,
        "importPath": "api1.models",
        "description": "api1.models",
        "peekOfCode": "class MatchingResponseSimple(BaseModel):\n    \"\"\"Version simplifiée du modèle de réponse pour l'API\"\"\"\n    score_global: float\n    resume: str\n    competences_message: str\n    competences_trouvees: List[CompetenceTrouvee] = Field(default_factory=list)\n    nombre_competences_trouvees: int = 0\n    contexte_analyse: Dict[str, Any] = Field(default_factory=dict)\n    class Config:\n        schema_extra = {",
        "detail": "api1.models",
        "documentation": {}
    },
    {
        "label": "MatchingResponseV2",
        "kind": 6,
        "importPath": "api1.models",
        "description": "api1.models",
        "peekOfCode": "class MatchingResponseV2(BaseModel):\n    \"\"\"Nouvelle version du modèle de réponse pour l'API\"\"\"\n    score_global: float\n    score_global_semantique: Optional[float] = None\n    niveau_adequation: str  # Excellent, Bon, Moyen, À améliorer\n    resume: str\n    points_forts: List[PointFort] = Field(default_factory=list)\n    points_amelioration: List[PointAmelioration] = Field(default_factory=list)\n    analyse_detaillee: AnalyseDetaillee\n    suggestions: List[Suggestion] = Field(default_factory=list)",
        "detail": "api1.models",
        "documentation": {}
    },
    {
        "label": "MatchingResponse",
        "kind": 6,
        "importPath": "api1.models",
        "description": "api1.models",
        "peekOfCode": "class MatchingResponse(BaseModel):\n    \"\"\"Modèle de réponse pour l'API (version actuelle)\"\"\"\n    global_score: float\n    completion: ProfileCompletionScore\n    analyses: Dict[str, ReportSection]\n    synthesis: str\n    adequation_globale: str\n    contexte_analyse: Dict[str, Union[str, float, bool]] = Field(\n        default_factory=lambda: {\n            \"timestamp\": datetime.now().isoformat(),",
        "detail": "api1.models",
        "documentation": {}
    },
    {
        "label": "AnalysisOptions",
        "kind": 6,
        "importPath": "api1.models",
        "description": "api1.models",
        "peekOfCode": "class AnalysisOptions(BaseModel):\n    \"\"\"Options avancées pour personnaliser l'analyse\"\"\"\n    poids_formation: float = 0.25\n    poids_experience: float = 0.30\n    poids_competences: float = 0.35\n    poids_langues: float = 0.10\n    seuil_similarite_semantique: float = 0.75\n    activer_analyse_semantique: bool = True\n    activer_suggestions_personnalisees: bool = True\n    niveau_detail_analyse: str = \"complet\"  # simple, standard, complet",
        "detail": "api1.models",
        "documentation": {}
    },
    {
        "label": "MatchingRequestV2",
        "kind": 6,
        "importPath": "api1.models",
        "description": "api1.models",
        "peekOfCode": "class MatchingRequestV2(BaseModel):\n    \"\"\"Requête d'analyse avec options avancées\"\"\"\n    candidate: CandidatProfile\n    job_offer: JobOffer\n    options: Optional[AnalysisOptions] = Field(default_factory=AnalysisOptions)",
        "detail": "api1.models",
        "documentation": {}
    },
    {
        "label": "FormationCandidatDakar",
        "kind": 6,
        "importPath": "api1.models_dakar",
        "description": "api1.models_dakar",
        "peekOfCode": "class FormationCandidatDakar(BaseModel):\n    \"\"\"Modèle flexible pour la formation du candidat.\"\"\"\n    diplome: Optional[str] = None\n    etablissement: Optional[str] = None\n    niveau: Optional[str] = None\n    class Config:\n        extra = \"ignore\"\nclass ExperienceCandidatDakar(BaseModel):\n    \"\"\"Modèle flexible pour l'expérience du candidat.\"\"\"\n    poste: Optional[str] = None",
        "detail": "api1.models_dakar",
        "documentation": {}
    },
    {
        "label": "ExperienceCandidatDakar",
        "kind": 6,
        "importPath": "api1.models_dakar",
        "description": "api1.models_dakar",
        "peekOfCode": "class ExperienceCandidatDakar(BaseModel):\n    \"\"\"Modèle flexible pour l'expérience du candidat.\"\"\"\n    poste: Optional[str] = None\n    description: Optional[str] = None\n    duree: Optional[float] = None\n    class Config:\n        extra = \"ignore\"\nclass LangueCandidatDakar(BaseModel):\n    \"\"\"Modèle flexible pour la langue du candidat.\"\"\"\n    nom: str",
        "detail": "api1.models_dakar",
        "documentation": {}
    },
    {
        "label": "LangueCandidatDakar",
        "kind": 6,
        "importPath": "api1.models_dakar",
        "description": "api1.models_dakar",
        "peekOfCode": "class LangueCandidatDakar(BaseModel):\n    \"\"\"Modèle flexible pour la langue du candidat.\"\"\"\n    nom: str\n    niveau: str # Accepte \"Intermédiaire\", \"Débutant\", etc.\nclass CandidatProfileDakar(BaseModel):\n    \"\"\"\n    Modèle de données pour un profil candidat adapté à la structure\n    envoyée par le script `CandidatProfile.php`.\n    \"\"\"\n    id: int",
        "detail": "api1.models_dakar",
        "documentation": {}
    },
    {
        "label": "CandidatProfileDakar",
        "kind": 6,
        "importPath": "api1.models_dakar",
        "description": "api1.models_dakar",
        "peekOfCode": "class CandidatProfileDakar(BaseModel):\n    \"\"\"\n    Modèle de données pour un profil candidat adapté à la structure\n    envoyée par le script `CandidatProfile.php`.\n    \"\"\"\n    id: int\n    nom: Optional[str] = None\n    email: Optional[str] = None\n    telephone: Optional[str] = None\n    titre: Optional[str] = None",
        "detail": "api1.models_dakar",
        "documentation": {}
    },
    {
        "label": "ExigenceFormationDakar",
        "kind": 6,
        "importPath": "api1.models_dakar",
        "description": "api1.models_dakar",
        "peekOfCode": "class ExigenceFormationDakar(BaseModel):\n    \"\"\"Exigence de formation simplifiée.\"\"\"\n    niveau_minimum: Optional[str] = \"Non spécifié\"\nclass ExigenceExperienceDakar(BaseModel):\n    \"\"\"Exigence d'expérience simplifiée.\"\"\"\n    duree_minimum_mois: Optional[int] = 0\nclass CompetenceDakar(BaseModel):\n    \"\"\"Compétence requise simplifiée.\"\"\"\n    nom: str\n    niveau: Optional[int] = 3",
        "detail": "api1.models_dakar",
        "documentation": {}
    },
    {
        "label": "ExigenceExperienceDakar",
        "kind": 6,
        "importPath": "api1.models_dakar",
        "description": "api1.models_dakar",
        "peekOfCode": "class ExigenceExperienceDakar(BaseModel):\n    \"\"\"Exigence d'expérience simplifiée.\"\"\"\n    duree_minimum_mois: Optional[int] = 0\nclass CompetenceDakar(BaseModel):\n    \"\"\"Compétence requise simplifiée.\"\"\"\n    nom: str\n    niveau: Optional[int] = 3\nclass LangueDakar(BaseModel):\n    \"\"\"Langue requise simplifiée.\"\"\"\n    nom: str",
        "detail": "api1.models_dakar",
        "documentation": {}
    },
    {
        "label": "CompetenceDakar",
        "kind": 6,
        "importPath": "api1.models_dakar",
        "description": "api1.models_dakar",
        "peekOfCode": "class CompetenceDakar(BaseModel):\n    \"\"\"Compétence requise simplifiée.\"\"\"\n    nom: str\n    niveau: Optional[int] = 3\nclass LangueDakar(BaseModel):\n    \"\"\"Langue requise simplifiée.\"\"\"\n    nom: str\n    niveau: Optional[str] = \"B2\"\nclass JobOfferDakar(BaseModel):\n    \"\"\"",
        "detail": "api1.models_dakar",
        "documentation": {}
    },
    {
        "label": "LangueDakar",
        "kind": 6,
        "importPath": "api1.models_dakar",
        "description": "api1.models_dakar",
        "peekOfCode": "class LangueDakar(BaseModel):\n    \"\"\"Langue requise simplifiée.\"\"\"\n    nom: str\n    niveau: Optional[str] = \"B2\"\nclass JobOfferDakar(BaseModel):\n    \"\"\"\n    Modèle de données pour une offre d'emploi de la source \"Dakar\".\n    \"\"\"\n    id: int\n    titre: str",
        "detail": "api1.models_dakar",
        "documentation": {}
    },
    {
        "label": "JobOfferDakar",
        "kind": 6,
        "importPath": "api1.models_dakar",
        "description": "api1.models_dakar",
        "peekOfCode": "class JobOfferDakar(BaseModel):\n    \"\"\"\n    Modèle de données pour une offre d'emploi de la source \"Dakar\".\n    \"\"\"\n    id: int\n    titre: str\n    description: Optional[str] = \"\"\n    secteur: Optional[str] = \"Non spécifié\"\n    type_contrat: Optional[str] = \"Non spécifié\"\n    localisation: Optional[str] = \"Non spécifiée\"",
        "detail": "api1.models_dakar",
        "documentation": {}
    },
    {
        "label": "JobOfferSenjob",
        "kind": 6,
        "importPath": "api1.models_senjob",
        "description": "api1.models_senjob",
        "peekOfCode": "class JobOfferSenjob(BaseModel):\n    \"\"\"\n    Modèle de données pour une offre d'emploi de la source \"Senjob\".\n    \"\"\"\n    id: int\n    titre: str\n    entreprise: Optional[str] = None\n    localisation: Optional[str] = None\n    type_contrat: Optional[str] = None\n    description: Optional[str] = \"\"",
        "detail": "api1.models_senjob",
        "documentation": {}
    },
    {
        "label": "install_spacy_model",
        "kind": 2,
        "importPath": "api1.setup_models",
        "description": "api1.setup_models",
        "peekOfCode": "def install_spacy_model(model_name=\"fr_core_news_sm\"):\n    \"\"\"\n    Downloads and installs a spaCy model if it's not already installed.\n    \"\"\"\n    try:\n        print(f\"Checking for spaCy model: {model_name}...\")\n        spacy.load(model_name)\n        print(f\"Model '{model_name}' is already installed.\")\n    except OSError:\n        print(f\"Model '{model_name}' not found. Downloading...\")",
        "detail": "api1.setup_models",
        "documentation": {}
    },
    {
        "label": "download_nltk_data",
        "kind": 2,
        "importPath": "api1.setup_models",
        "description": "api1.setup_models",
        "peekOfCode": "def download_nltk_data():\n    \"\"\"\n    Downloads required NLTK data if not already present.\n    \"\"\"\n    try:\n        print(\"Checking for NLTK 'punkt' tokenizer...\")\n        nltk.data.find('tokenizers/punkt')\n        print(\"'punkt' is already downloaded.\")\n    except nltk.downloader.DownloadError:\n        print(\"NLTK 'punkt' not found. Downloading...\")",
        "detail": "api1.setup_models",
        "documentation": {}
    },
    {
        "label": "start_api",
        "kind": 2,
        "importPath": "api1.start_api",
        "description": "api1.start_api",
        "peekOfCode": "def start_api():\n    \"\"\"Démarre l'API avec les paramètres configurés\"\"\"\n    try:\n        # Récupération du port depuis les variables d'environnement ou utilisation de la valeur par défaut\n        port = int(os.getenv(\"API_PORT\", 8000))\n        # Récupération du niveau de log\n        log_level = os.getenv(\"LOG_LEVEL\", \"info\").lower()\n        print(f\"Démarrage de l'API WorkFlexer sur le port {port}...\")\n        print(f\"Documentation interactive disponible à l'adresse: http://localhost:{port}/docs\")\n        print(f\"Documentation ReDoc disponible à l'adresse: http://localhost:{port}/redoc\")",
        "detail": "api1.start_api",
        "documentation": {}
    },
    {
        "label": "test_simple_analysis",
        "kind": 2,
        "importPath": "api1.test_simple",
        "description": "api1.test_simple",
        "peekOfCode": "def test_simple_analysis():\n    \"\"\"Test de l'analyse simplifiée\"\"\"\n    # Données de test d'un candidat\n    candidate_data = {\n        \"id\": 1,\n        \"nom\": \"Jean Dupont\",\n        \"email\": \"jean@example.com\",\n        \"competences\": [\n            {\"nom\": \"Communication\", \"niveau\": 4},\n            {\"nom\": \"Gestion\", \"niveau\": 3},",
        "detail": "api1.test_simple",
        "documentation": {}
    },
    {
        "label": "get_from_cache",
        "kind": 2,
        "importPath": "api1.utils",
        "description": "api1.utils",
        "peekOfCode": "def get_from_cache(key: str):\n    \"\"\"Récupère un élément du cache basé sur les fichiers.\"\"\"\n    cache_file = os.path.join(CACHE_DIR, key)\n    if os.path.exists(cache_file):\n        try:\n            with open(cache_file, 'rb') as f:\n                return pickle.load(f)\n        except (pickle.UnpicklingError, EOFError):\n            logger.warning(f\"Fichier de cache corrompu: {cache_file}\")\n            return None",
        "detail": "api1.utils",
        "documentation": {}
    },
    {
        "label": "set_in_cache",
        "kind": 2,
        "importPath": "api1.utils",
        "description": "api1.utils",
        "peekOfCode": "def set_in_cache(key: str, value: any):\n    \"\"\"Sauvegarde un élément dans le cache.\"\"\"\n    cache_file = os.path.join(CACHE_DIR, key)\n    try:\n        with open(cache_file, 'wb') as f:\n            pickle.dump(value, f)\n    except Exception as e:\n        logger.error(f\"Erreur lors de la sauvegarde dans le cache pour la clé {key}: {e}\")\ndef get_embedding_with_cache(text: str) -> List[float]:\n    \"\"\"Génère ou récupère depuis le cache l'embedding pour un texte donné.\"\"\"",
        "detail": "api1.utils",
        "documentation": {}
    },
    {
        "label": "get_embedding_with_cache",
        "kind": 2,
        "importPath": "api1.utils",
        "description": "api1.utils",
        "peekOfCode": "def get_embedding_with_cache(text: str) -> List[float]:\n    \"\"\"Génère ou récupère depuis le cache l'embedding pour un texte donné.\"\"\"\n    if not sentence_model or not text:\n        return []\n    cache_key = hashlib.md5(text.encode()).hexdigest()\n    cached_embedding = get_from_cache(cache_key)\n    if cached_embedding is not None:\n        return cached_embedding\n    try:\n        embedding = sentence_model.encode(text, convert_to_tensor=False, show_progress_bar=False).tolist()",
        "detail": "api1.utils",
        "documentation": {}
    },
    {
        "label": "get_embeddings_with_cache_batch",
        "kind": 2,
        "importPath": "api1.utils",
        "description": "api1.utils",
        "peekOfCode": "def get_embeddings_with_cache_batch(texts: List[str]) -> List[List[float]]:\n    \"\"\"Génère ou récupère depuis le cache les embeddings pour un lot de textes.\"\"\"\n    if not sentence_model or not texts:\n        return [[] for _ in texts]\n    results = [None] * len(texts)\n    texts_to_encode = []\n    indices_to_encode = []\n    for i, text in enumerate(texts):\n        if not text:\n            results[i] = []",
        "detail": "api1.utils",
        "documentation": {}
    },
    {
        "label": "normalize_skill_name",
        "kind": 2,
        "importPath": "api1.utils",
        "description": "api1.utils",
        "peekOfCode": "def normalize_skill_name(skill: str) -> str:\n    \"\"\"\n    Normalise le nom d'une compétence en utilisant les dictionnaires de correspondance.\n    \"\"\"\n    skill_lower = skill.lower().strip()\n    return SKILL_NORMALIZATION.get(skill_lower, skill_lower)\ndef _convert_to_text(data) -> str:\n    \"\"\"\n    Convertit différents types de données en texte pour l'analyse SpaCy.\n    \"\"\"",
        "detail": "api1.utils",
        "documentation": {}
    },
    {
        "label": "extract_entities_with_spacy",
        "kind": 2,
        "importPath": "api1.utils",
        "description": "api1.utils",
        "peekOfCode": "def extract_entities_with_spacy(text: str) -> List[ExtractedEntity]:\n    \"\"\"\n    Extrait les entités nommées d'un texte en utilisant SpaCy avec des règles personnalisées.\n    \"\"\"\n    if not nlp or not text:\n        return []\n    entities = []\n    doc = nlp(text)\n    # Entités standard de SpaCy\n    for ent in doc.ents:",
        "detail": "api1.utils",
        "documentation": {}
    },
    {
        "label": "create_section_embedding",
        "kind": 2,
        "importPath": "api1.utils",
        "description": "api1.utils",
        "peekOfCode": "def create_section_embedding(section_name: str, text) -> SectionEmbedding:\n    \"\"\"\n    Crée un embedding pour une section spécifique du profil ou de l'offre.\n    \"\"\"\n    text_str = _convert_to_text(text)\n    if not text_str:\n        return SectionEmbedding(section_name=section_name, text=text_str)\n    # Génération de l'embedding avec cache\n    embedding = get_embedding_with_cache(text_str)\n    entities = extract_entities_with_spacy(text_str)",
        "detail": "api1.utils",
        "documentation": {}
    },
    {
        "label": "extract_keywords_tfidf",
        "kind": 2,
        "importPath": "api1.utils",
        "description": "api1.utils",
        "peekOfCode": "def extract_keywords_tfidf(text: str, max_keywords: int = 10) -> List[str]:\n    \"\"\"\n    Extrait les mots-clés les plus importants d'un texte en utilisant TF-IDF.\n    \"\"\"\n    if not tfidf_vectorizer or not text or len(text.strip()) < 10:\n        return []\n    try:\n        # Créer un corpus temporaire pour l'analyse TF-IDF\n        corpus = [text]\n        tfidf_matrix = tfidf_vectorizer.fit_transform(corpus)",
        "detail": "api1.utils",
        "documentation": {}
    },
    {
        "label": "calculate_semantic_similarity_advanced",
        "kind": 2,
        "importPath": "api1.utils",
        "description": "api1.utils",
        "peekOfCode": "def calculate_semantic_similarity_advanced(\n    text1: str, \n    text2: str,\n    section_embeddings1: Dict[str, SectionEmbedding] = None,\n    section_embeddings2: Dict[str, SectionEmbedding] = None\n) -> SemanticSimilarity:\n    \"\"\"\n    Calcule une similarité sémantique avancée entre deux textes avec analyse détaillée.\n    \"\"\"\n    if not sentence_model or not text1 or not text2:",
        "detail": "api1.utils",
        "documentation": {}
    },
    {
        "label": "find_semantic_matches",
        "kind": 2,
        "importPath": "api1.utils",
        "description": "api1.utils",
        "peekOfCode": "def find_semantic_matches(\n    embeddings1: Dict[str, SectionEmbedding],\n    embeddings2: Dict[str, SectionEmbedding],\n    threshold: float = 0.75\n) -> List[Dict[str, Union[str, float]]]:\n    \"\"\"\n    Trouve les correspondances sémantiques entre les embeddings de deux ensembles de sections.\n    \"\"\"\n    matches = []\n    for section1_name, embedding1 in embeddings1.items():",
        "detail": "api1.utils",
        "documentation": {}
    },
    {
        "label": "find_matching_skills_in_offer",
        "kind": 2,
        "importPath": "api1.utils",
        "description": "api1.utils",
        "peekOfCode": "def find_matching_skills_in_offer(candidate_skills: List[str], offer_text: str) -> List[Dict[str, Any]]:\n    \"\"\"\n    Trouve les compétences du candidat qui correspondent à l'offre d'emploi.\n    Utilise une approche de recherche sémantique et de mots-clés.\n    \"\"\"\n    logger.info(f\"find_matching_skills_in_offer appelée avec {len(candidate_skills) if candidate_skills else 0} compétences\")\n    logger.info(f\"Premières compétences du candidat: {candidate_skills[:5] if candidate_skills else []}\")\n    logger.info(f\"Texte de l'offre (premiers 200 chars): {offer_text[:200] if offer_text else 'VIDE'}\")\n    if not candidate_skills or not offer_text:\n        logger.warning(\"Compétences du candidat ou texte de l'offre vide\")",
        "detail": "api1.utils",
        "documentation": {}
    },
    {
        "label": "analyze_skill_market_demand",
        "kind": 2,
        "importPath": "api1.utils",
        "description": "api1.utils",
        "peekOfCode": "def analyze_skill_market_demand(skill: str) -> float:\n    \"\"\"\n    Analyse la demande du marché pour une compétence donnée.\n    Retourne un score entre 0 et 1.\n    \"\"\"\n    skill_lower = normalize_skill_name(skill)\n    # Base de données simplifiée de la demande du marché\n    high_demand_skills = [\n        'python', 'javascript', 'react', 'node.js', 'aws', 'docker', \n        'kubernetes', 'machine learning', 'data science', 'devops',",
        "detail": "api1.utils",
        "documentation": {}
    },
    {
        "label": "generate_learning_resources",
        "kind": 2,
        "importPath": "api1.utils",
        "description": "api1.utils",
        "peekOfCode": "def generate_learning_resources(skill: str) -> List[Dict[str, str]]:\n    \"\"\"\n    Génère des ressources d'apprentissage pour une compétence donnée.\n    \"\"\"\n    skill_lower = normalize_skill_name(skill)\n    # Base de ressources génériques\n    resources = [\n        {\n            \"type\": \"documentation\",\n            \"name\": f\"Documentation officielle {skill}\",",
        "detail": "api1.utils",
        "documentation": {}
    },
    {
        "label": "normalize_text",
        "kind": 2,
        "importPath": "api1.utils",
        "description": "api1.utils",
        "peekOfCode": "def normalize_text(text: str) -> List[str]:\n    \"\"\"\n    Nettoie, tokenise, lemmatise le texte et supprime les mots vides en utilisant spaCy.\n    Retourne une liste de lemmes normalisés pour une comparaison sémantique efficace.\n    \"\"\"\n    if not nlp or not text or not isinstance(text, str):\n        return []\n    # 1. Mise en minuscules et suppression de la ponctuation non pertinente\n    text = text.lower()\n    text = re.sub(r'[^\\w\\s]', ' ', text)",
        "detail": "api1.utils",
        "documentation": {}
    },
    {
        "label": "get_semantic_similarity",
        "kind": 2,
        "importPath": "api1.utils",
        "description": "api1.utils",
        "peekOfCode": "def get_semantic_similarity(text1: str, text2: str) -> float:\n    \"\"\"\n    Calcule la similarité sémantique entre deux textes en utilisant le SentenceTransformer et le cache.\n    \"\"\"\n    if not sentence_model or not text1 or not text2:\n        return 0.0\n    try:\n        embedding1 = get_embedding_with_cache(text1)\n        embedding2 = get_embedding_with_cache(text2)\n        if not embedding1 or not embedding2:",
        "detail": "api1.utils",
        "documentation": {}
    },
    {
        "label": "get_niveau_etudes_value",
        "kind": 2,
        "importPath": "api1.utils",
        "description": "api1.utils",
        "peekOfCode": "def get_niveau_etudes_value(niveau: str) -> int:\n    \"\"\"Convertit un niveau d'études en valeur numérique standardisée.\"\"\"\n    niveau = niveau.strip()\n    for key, data in NIVEAU_ETUDES_MAP.items():\n        if niveau == key or niveau in data[\"equivalents\"]:\n            return data[\"niveau\"]\n    return 0\ndef analyze_profile_completion(profile: CandidatProfile) -> Dict:\n    \"\"\"Analyse le niveau de complétion du profil.\"\"\"\n    scores = {}",
        "detail": "api1.utils",
        "documentation": {}
    },
    {
        "label": "analyze_profile_completion",
        "kind": 2,
        "importPath": "api1.utils",
        "description": "api1.utils",
        "peekOfCode": "def analyze_profile_completion(profile: CandidatProfile) -> Dict:\n    \"\"\"Analyse le niveau de complétion du profil.\"\"\"\n    scores = {}\n    # Vérification des formations\n    if profile.formations:\n        formations_score = sum(\n            1 for f in profile.formations if f.niveau and f.domaine and f.etablissement\n        ) / len(profile.formations)\n        scores[\"formations\"] = formations_score\n    else:",
        "detail": "api1.utils",
        "documentation": {}
    },
    {
        "label": "analyze_formation_compatibility",
        "kind": 2,
        "importPath": "api1.utils",
        "description": "api1.utils",
        "peekOfCode": "def analyze_formation_compatibility(\n    formations: List[Formation],\n    exigence: ExigenceFormation,\n    niveau_etude_profil: Optional[str],\n    niveau_etude_valeur: Optional[int] = None\n) -> Tuple[float, List[str], List[str]]:\n    \"\"\"Analyse de la compatibilité des formations, incluant le niveau d'étude global.\"\"\"\n    points_forts = []\n    recommendations = []\n    score_total = 0.0",
        "detail": "api1.utils",
        "documentation": {}
    },
    {
        "label": "calculate_domain_similarity",
        "kind": 2,
        "importPath": "api1.utils",
        "description": "api1.utils",
        "peekOfCode": "def calculate_domain_similarity(domain1: str, domain2: str) -> float:\n    \"\"\"\n    Calcule la similarité sémantique entre deux domaines de formation\n    en utilisant une approche plus stricte et rigoureuse.\n    Args:\n        domain1: Premier domaine\n        domain2: Deuxième domaine\n    Returns:\n        Score de similarité entre 0 et 1\n    \"\"\"",
        "detail": "api1.utils",
        "documentation": {}
    },
    {
        "label": "analyze_experience_compatibility",
        "kind": 2,
        "importPath": "api1.utils",
        "description": "api1.utils",
        "peekOfCode": "def analyze_experience_compatibility(\n    experiences: List[Experience],\n    exigence: ExigenceExperience,\n    job_description: str,\n    niveau_experience_valeur: Optional[int] = None\n) -> Tuple[float, List[str], List[str]]:\n    \"\"\"\n    Analyse la compatibilité de l'expérience, en combinant la durée et la pertinence sémantique.\n    \"\"\"\n    points_forts = []",
        "detail": "api1.utils",
        "documentation": {}
    },
    {
        "label": "analyze_competences_compatibility_advanced",
        "kind": 2,
        "importPath": "api1.utils",
        "description": "api1.utils",
        "peekOfCode": "def analyze_competences_compatibility_advanced(\n    candidate_competences: List[Competence], \n    required_competences: List[Competence],\n    candidate_text: str = \"\",\n    offer_text: str = \"\"\n) -> AdvancedCompetenceAnalysis:\n    \"\"\"\n    Analyse avancée de la compatibilité des compétences avec approche hybride.\n    Combine l'analyse structurée et sémantique pour une évaluation plus précise.\n    \"\"\"",
        "detail": "api1.utils",
        "documentation": {}
    },
    {
        "label": "analyze_competences_compatibility",
        "kind": 2,
        "importPath": "api1.utils",
        "description": "api1.utils",
        "peekOfCode": "def analyze_competences_compatibility(\n    candidate_competences: List[Competence], required_competences: List[Competence]\n) -> Tuple[float, List[CorrespondanceItem], List[ElementManquant], List[str], List[str]]:\n    \"\"\"\n    Version simplifiée pour compatibilité avec l'ancien code.\n    Utilise l'analyse avancée en arrière-plan.\n    \"\"\"\n    advanced_analysis = analyze_competences_compatibility_advanced(\n        candidate_competences, required_competences\n    )",
        "detail": "api1.utils",
        "documentation": {}
    },
    {
        "label": "classify_skill_category",
        "kind": 2,
        "importPath": "api1.utils",
        "description": "api1.utils",
        "peekOfCode": "def classify_skill_category(skill: str) -> str:\n    \"\"\"\n    Classifie une compétence dans une catégorie sectorielle.\n    \"\"\"\n    skill_lower = skill.lower()\n    for sector, keywords in SECTOR_KEYWORDS.items():\n        if any(keyword in skill_lower for keyword in keywords):\n            return sector\n    return 'general'\ndef find_cluster_match(required_skill: str, candidate_skills: List[Dict]) -> Optional[Dict]:",
        "detail": "api1.utils",
        "documentation": {}
    },
    {
        "label": "find_cluster_match",
        "kind": 2,
        "importPath": "api1.utils",
        "description": "api1.utils",
        "peekOfCode": "def find_cluster_match(required_skill: str, candidate_skills: List[Dict]) -> Optional[Dict]:\n    \"\"\"\n    Trouve une correspondance dans le même cluster technologique.\n    \"\"\"\n    required_category = classify_skill_category(required_skill)\n    if required_category == 'general':\n        return None\n    for cand_skill in candidate_skills:\n        if classify_skill_category(cand_skill['normalized']) == required_category:\n            return cand_skill",
        "detail": "api1.utils",
        "documentation": {}
    },
    {
        "label": "analyze_langues_compatibility",
        "kind": 2,
        "importPath": "api1.utils",
        "description": "api1.utils",
        "peekOfCode": "def analyze_langues_compatibility(\n    langues: List[Langue], requises: List[Langue]\n) -> Tuple[float, List[str], List[str]]:\n    \"\"\"Analyse approfondie de la compatibilité des langues.\"\"\"\n    if not requises:\n        return 1.0, [\"Aucune exigence linguistique spécifique\"], []\n    score = 0\n    details = []\n    recommendations = []\n    points_forts = []",
        "detail": "api1.utils",
        "documentation": {}
    },
    {
        "label": "analyze_outils_compatibility",
        "kind": 2,
        "importPath": "api1.utils",
        "description": "api1.utils",
        "peekOfCode": "def analyze_outils_compatibility(outils: List[str], offer_text: str) -> Tuple[float, List[str], List[str]]:\n    \"\"\"Analyse la compatibilité des outils en recherchant des correspondances de mots-clés.\"\"\"\n    if not outils:\n        return 1.0, [], []\n    points_forts = []\n    offer_text_lower = offer_text.lower()\n    found_outils = {outil.strip() for outil in outils if len(outil.strip()) > 2 and outil.strip().lower() in offer_text_lower}\n    if found_outils:\n        for outil in found_outils:\n            points_forts.append(f\"Votre maîtrise de l'outil '{outil}' est un atout pour cette offre.\")",
        "detail": "api1.utils",
        "documentation": {}
    },
    {
        "label": "identify_critical_gaps",
        "kind": 2,
        "importPath": "api1.utils",
        "description": "api1.utils",
        "peekOfCode": "def identify_critical_gaps(\n    profile: CandidatProfile, offer: JobOffer\n) -> List[Dict[str, str]]:\n    \"\"\"Identifie les lacunes critiques du profil de manière détaillée.\"\"\"\n    gaps = []\n    # Analyse formation\n    if offer.formation_requise.formation_obligatoire:\n        niveau_requis = get_niveau_etudes_value(offer.formation_requise.niveau_minimum)\n        formations_suffisantes = [\n            f",
        "detail": "api1.utils",
        "documentation": {}
    },
    {
        "label": "generate_improvement_suggestions",
        "kind": 2,
        "importPath": "api1.utils",
        "description": "api1.utils",
        "peekOfCode": "def generate_improvement_suggestions(\n    profile: CandidatProfile, offer: JobOffer, recommendations: Dict[str, List[str]]\n) -> List[Dict[str, str]]:\n    \"\"\"\n    Génère des suggestions d'amélioration personnalisées basées sur le profil et l'offre.\n    \"\"\"\n    suggestions = []\n    # Analyse du secteur d'activité\n    secteur = offer.secteur\n    if secteur:",
        "detail": "api1.utils",
        "documentation": {}
    },
    {
        "label": "get_certifications_recommandees",
        "kind": 2,
        "importPath": "api1.utils",
        "description": "api1.utils",
        "peekOfCode": "def get_certifications_recommandees(secteur: str) -> List[str]:\n    \"\"\"Retourne les certifications recommandées pour un secteur donné.\"\"\"\n    certifications_par_secteur = {\n        \"Informatique\": [\n            \"ITIL Foundation\",\n            \"Certification Agile/Scrum\",\n            \"Certifications Cloud (AWS, Azure, GCP)\",\n        ],\n        \"Marketing\": [\n            \"Google Analytics\",",
        "detail": "api1.utils",
        "documentation": {}
    },
    {
        "label": "get_tendances_marche",
        "kind": 2,
        "importPath": "api1.utils",
        "description": "api1.utils",
        "peekOfCode": "def get_tendances_marche(secteur: str) -> List[str]:\n    \"\"\"Retourne les tendances actuelles du marché pour un secteur donné.\"\"\"\n    tendances_par_secteur = {\n        \"Informatique\": [\n            \"Intelligence Artificielle\",\n            \"DevOps\",\n            \"Cloud Computing\",\n            \"Cybersécurité\",\n        ],\n        \"Marketing\": [",
        "detail": "api1.utils",
        "documentation": {}
    },
    {
        "label": "niveau_satisfait_exigence",
        "kind": 2,
        "importPath": "api1.utils",
        "description": "api1.utils",
        "peekOfCode": "def niveau_satisfait_exigence(niveau_candidat: str, niveau_requis: str) -> bool:\n    \"\"\"Vérifie si le niveau d'études du candidat satisfait le niveau requis.\"\"\"\n    niveaux_ordre = {\n        \"Secondaire\": 1,\n        \"Bac\": 2,\n        \"Bac+1\": 3,\n        \"Bac+2\": 4,\n        \"Bac+3\": 5,\n        \"Licence\": 5,\n        \"Bac+4\": 6,",
        "detail": "api1.utils",
        "documentation": {}
    },
    {
        "label": "generate_synthesis",
        "kind": 2,
        "importPath": "api1.utils",
        "description": "api1.utils",
        "peekOfCode": "def generate_synthesis(global_score: float, analyses: Dict) -> str:\n    \"\"\"Génère une synthèse textuelle basée sur le score global et les analyses.\"\"\"\n    if global_score > 0.8:\n        level = \"Excellente\"\n    elif global_score > 0.6:\n        level = \"Bonne\"\n    elif global_score > 0.4:\n        level = \"Moyenne\"\n    else:\n        level = \"Faible\"",
        "detail": "api1.utils",
        "documentation": {}
    },
    {
        "label": "create_focused_candidate_text",
        "kind": 2,
        "importPath": "api1.utils",
        "description": "api1.utils",
        "peekOfCode": "def create_focused_candidate_text(candidate_text: str, offer_keywords: Set[str]) -> str:\n    \"\"\"\n    Crée une version focalisée du texte du candidat, ne gardant que les phrases\n    contenant des mots-clés de l'offre pour une comparaison plus pertinente.\n    \"\"\"\n    if not offer_keywords:\n        return candidate_text # Retourne le texte complet si pas de mots-clés\n    focused_sentences = []\n    # Utilise NLTK pour segmenter le texte en phrases\n    sentences = nltk.sent_tokenize(candidate_text, language='french')",
        "detail": "api1.utils",
        "documentation": {}
    },
    {
        "label": "analyze_global_compatibility",
        "kind": 2,
        "importPath": "api1.utils",
        "description": "api1.utils",
        "peekOfCode": "def analyze_global_compatibility(candidate_text: Optional[str], offer_text: Optional[str]) -> float:\n    \"\"\"\n    Analyse la compatibilité globale en comparant une version focalisée du profil\n    avec le texte de l'offre pour donner la priorité aux exigences de l'offre.\n    \"\"\"\n    if not candidate_text or not offer_text:\n        return 0.0\n    logger.info(\"Début de l'analyse sémantique globale avec focalisation.\")\n    # Extrait les mots-clés de l'offre pour guider la focalisation\n    offer_keywords = set(normalize_text(offer_text))",
        "detail": "api1.utils",
        "documentation": {}
    },
    {
        "label": "analyze_compatibility",
        "kind": 2,
        "importPath": "api1.utils",
        "description": "api1.utils",
        "peekOfCode": "def analyze_compatibility(candidate_data: Dict, job_offer_data: Dict) -> Dict:\n    \"\"\"\n    Analyse simplifiée focalisée sur les compétences correspondantes.\n    \"\"\"\n    start_time = time.time()\n    try:\n        logger.info(\"Début de l'analyse de compatibilité simplifiée\")\n        # Validation et initialisation des objets Pydantic\n        profile = CandidatProfile(**candidate_data)\n        offer = JobOffer(**job_offer_data)",
        "detail": "api1.utils",
        "documentation": {}
    },
    {
        "label": "calculate_competence_score_from_advanced",
        "kind": 2,
        "importPath": "api1.utils",
        "description": "api1.utils",
        "peekOfCode": "def calculate_competence_score_from_advanced(analysis: AdvancedCompetenceAnalysis, required_competences: List[Competence]) -> float:\n    \"\"\"\n    Calcule un score de compatibilité basé sur l'analyse avancée des compétences.\n    \"\"\"\n    if not required_competences:\n        return 1.0\n    total_required = len(required_competences)\n    exact_matches = len(analysis.exact_matches)\n    semantic_matches = len([m for m in analysis.semantic_matches if m['similarity'] > 0.8])\n    # Score basé sur les correspondances exactes et sémantiques",
        "detail": "api1.utils",
        "documentation": {}
    },
    {
        "label": "generate_main_resume",
        "kind": 2,
        "importPath": "api1.utils",
        "description": "api1.utils",
        "peekOfCode": "def generate_main_resume(global_score: float, niveau_adequation: str, strongest_category: str, points_amelioration: List[PointAmelioration]) -> str:\n    \"\"\"Génère un résumé principal personnalisé et engageant.\"\"\"\n    score = round(global_score)\n    if score > 85:\n        resume = f\"Excellent ! ({score}%) Votre profil matche parfaitement avec cette offre. C'est un grand oui !\"\n    elif score > 70:\n        resume = f\"Très bon profil ! ({score}%) Vous avez de solides atouts pour ce poste. Quelques petits ajustements et ce sera parfait.\"\n    elif score > 50:\n        resume = f\"Pas mal du tout ! ({score}%) Votre profil a de bons atouts. Jetez un oeil aux suggestions pour faire la différence.\"\n    elif score > 30:",
        "detail": "api1.utils",
        "documentation": {}
    },
    {
        "label": "generate_section_resume",
        "kind": 2,
        "importPath": "api1.utils",
        "description": "api1.utils",
        "peekOfCode": "def generate_section_resume(categorie: str, score: float) -> str:\n    \"\"\"Génère un résumé engageant pour une catégorie spécifique.\"\"\"\n    score_pct = round(score * 100)\n    resumes = {\n            \"formation\": {\n            \"excellent\": f\"Votre parcours académique ({score_pct}%) est un atout majeur pour ce poste.\",\n            \"bon\": f\"Votre formation ({score_pct}%) est solide et pertinente pour ce rôle.\",\n            \"moyen\": f\"Votre formation ({score_pct}%) est un bon point de départ, mais pourrait être complétée pour correspondre parfaitement à l'offre.\",\n            \"faible\": f\"Votre parcours de formation ({score_pct}%) semble assez éloigné des prérequis pour ce poste. Mettez en avant vos expériences concrètes.\",\n            },",
        "detail": "api1.utils",
        "documentation": {}
    },
    {
        "label": "analyze_projets_candidat",
        "kind": 2,
        "importPath": "api1.utils",
        "description": "api1.utils",
        "peekOfCode": "def analyze_projets_candidat(projets: List[ProjetPersonnel], offre: JobOffer) -> Tuple[List[str], List[str]]:\n    \"\"\"\n    Analyse les projets personnels du candidat par rapport à l'offre d'emploi.\n    Args:\n        projets: Liste des projets personnels du candidat\n        offre: Offre d'emploi analysée\n    Returns:\n        points_forts: Liste des points forts liés aux projets\n        recommendations: Liste des recommandations d'amélioration\n    \"\"\"",
        "detail": "api1.utils",
        "documentation": {}
    },
    {
        "label": "analyze_compatibility_hybrid",
        "kind": 2,
        "importPath": "api1.utils",
        "description": "api1.utils",
        "peekOfCode": "def analyze_compatibility_hybrid(candidate_data: Dict, job_offer_data: Dict) -> HybridAnalysisResult:\n    \"\"\"\n    Analyse hybride de compatibilité combinant approche sémantique et structurée.\n    Cette fonction implémente une approche en deux niveaux :\n    - Niveau 1 (60%) : Analyse sémantique globale avec IA\n    - Niveau 2 (40%) : Analyse granulaire structurée traditionnelle\n    Args:\n        candidate_data: Données du candidat\n        job_offer_data: Données de l'offre d'emploi\n    Returns:",
        "detail": "api1.utils",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "api1.utils",
        "description": "api1.utils",
        "peekOfCode": "logger = logging.getLogger(__name__)\n# --- Configuration du Caching ---\nCACHE_DIR = os.path.join(os.path.dirname(__file__), 'cache')\nos.makedirs(CACHE_DIR, exist_ok=True)\nlogger.info(f\"Le cache des embeddings est stocké dans: {CACHE_DIR}\")\ndef get_from_cache(key: str):\n    \"\"\"Récupère un élément du cache basé sur les fichiers.\"\"\"\n    cache_file = os.path.join(CACHE_DIR, key)\n    if os.path.exists(cache_file):\n        try:",
        "detail": "api1.utils",
        "documentation": {}
    },
    {
        "label": "CACHE_DIR",
        "kind": 5,
        "importPath": "api1.utils",
        "description": "api1.utils",
        "peekOfCode": "CACHE_DIR = os.path.join(os.path.dirname(__file__), 'cache')\nos.makedirs(CACHE_DIR, exist_ok=True)\nlogger.info(f\"Le cache des embeddings est stocké dans: {CACHE_DIR}\")\ndef get_from_cache(key: str):\n    \"\"\"Récupère un élément du cache basé sur les fichiers.\"\"\"\n    cache_file = os.path.join(CACHE_DIR, key)\n    if os.path.exists(cache_file):\n        try:\n            with open(cache_file, 'rb') as f:\n                return pickle.load(f)",
        "detail": "api1.utils",
        "documentation": {}
    },
    {
        "label": "SKILL_NORMALIZATION",
        "kind": 5,
        "importPath": "api1.utils",
        "description": "api1.utils",
        "peekOfCode": "SKILL_NORMALIZATION = {\n    # Compétences générales\n    'communication': 'communication',\n    'gestion': 'gestion',\n    'management': 'management',\n    'vente': 'vente',\n    'marketing': 'marketing',\n    'finance': 'finance',\n    'comptabilité': 'comptabilité',\n    'rh': 'ressources humaines',",
        "detail": "api1.utils",
        "documentation": {}
    },
    {
        "label": "SECTOR_KEYWORDS",
        "kind": 5,
        "importPath": "api1.utils",
        "description": "api1.utils",
        "peekOfCode": "SECTOR_KEYWORDS = {\n    'administration': ['administration', 'secrétariat', 'accueil', 'gestion administrative', 'bureau', 'documentation', 'archivage', 'planning', 'organisation'],\n    'commerce': ['vente', 'commercial', 'négociation', 'client', 'prospection', 'relation client', 'business development', 'merchandising', 'caisse'],\n    'finance': ['finance', 'comptabilité', 'audit', 'contrôle de gestion', 'fiscalité', 'budget', 'investissement', 'banque', 'assurance', 'crédit'],\n    'ressources_humaines': ['ressources humaines', 'recrutement', 'formation', 'paie', 'gestion du personnel', 'talent management', 'relations sociales'],\n    'marketing': ['marketing', 'communication', 'publicité', 'événementiel', 'relations publiques', 'contenu', 'campagne', 'brand', 'digital'],\n    'production': ['production', 'fabrication', 'assemblage', 'montage', 'contrôle qualité', 'maintenance', 'logistique', 'supply chain'],\n    'services': ['service client', 'support', 'assistance', 'conseil', 'accompagnement', 'aide', 'social', 'médiation'],\n    'technique': ['maintenance', 'réparation', 'installation', 'dépannage', 'technique', 'mécanique', 'électricité', 'plomberie'],\n    'santé': ['santé', 'médical', 'soins', 'hygiène', 'sécurité', 'prévention', 'urgence', 'assistance médicale'],",
        "detail": "api1.utils",
        "documentation": {}
    },
    {
        "label": "COMPLETION_THRESHOLD",
        "kind": 5,
        "importPath": "api1.utils",
        "description": "api1.utils",
        "peekOfCode": "COMPLETION_THRESHOLD = config.WEIGHTS.get(\"completion_threshold\", 0.7)\nEXPERIENCE_WEIGHT = config.WEIGHTS.get(\"experience\", 0.35)\nFORMATION_WEIGHT = config.WEIGHTS.get(\"formation\", 0.25)\nCOMPETENCES_WEIGHT = config.WEIGHTS.get(\"competences\", 0.25)\nLANGUES_WEIGHT = config.WEIGHTS.get(\"langues\", 0.15)\nOUTILS_WEIGHT = config.WEIGHTS.get(\"outils\", 0.10)\n# Seuils pour l'analyse avancée\nSEMANTIC_SIMILARITY_THRESHOLD = 0.75\nENTITY_CONFIDENCE_THRESHOLD = 0.6\nSKILL_MATCH_THRESHOLD = 0.8",
        "detail": "api1.utils",
        "documentation": {}
    },
    {
        "label": "EXPERIENCE_WEIGHT",
        "kind": 5,
        "importPath": "api1.utils",
        "description": "api1.utils",
        "peekOfCode": "EXPERIENCE_WEIGHT = config.WEIGHTS.get(\"experience\", 0.35)\nFORMATION_WEIGHT = config.WEIGHTS.get(\"formation\", 0.25)\nCOMPETENCES_WEIGHT = config.WEIGHTS.get(\"competences\", 0.25)\nLANGUES_WEIGHT = config.WEIGHTS.get(\"langues\", 0.15)\nOUTILS_WEIGHT = config.WEIGHTS.get(\"outils\", 0.10)\n# Seuils pour l'analyse avancée\nSEMANTIC_SIMILARITY_THRESHOLD = 0.75\nENTITY_CONFIDENCE_THRESHOLD = 0.6\nSKILL_MATCH_THRESHOLD = 0.8\n# === NOUVELLES FONCTIONS D'EXTRACTION ET D'ANALYSE AVANCÉE ===",
        "detail": "api1.utils",
        "documentation": {}
    },
    {
        "label": "FORMATION_WEIGHT",
        "kind": 5,
        "importPath": "api1.utils",
        "description": "api1.utils",
        "peekOfCode": "FORMATION_WEIGHT = config.WEIGHTS.get(\"formation\", 0.25)\nCOMPETENCES_WEIGHT = config.WEIGHTS.get(\"competences\", 0.25)\nLANGUES_WEIGHT = config.WEIGHTS.get(\"langues\", 0.15)\nOUTILS_WEIGHT = config.WEIGHTS.get(\"outils\", 0.10)\n# Seuils pour l'analyse avancée\nSEMANTIC_SIMILARITY_THRESHOLD = 0.75\nENTITY_CONFIDENCE_THRESHOLD = 0.6\nSKILL_MATCH_THRESHOLD = 0.8\n# === NOUVELLES FONCTIONS D'EXTRACTION ET D'ANALYSE AVANCÉE ===\ndef normalize_skill_name(skill: str) -> str:",
        "detail": "api1.utils",
        "documentation": {}
    },
    {
        "label": "COMPETENCES_WEIGHT",
        "kind": 5,
        "importPath": "api1.utils",
        "description": "api1.utils",
        "peekOfCode": "COMPETENCES_WEIGHT = config.WEIGHTS.get(\"competences\", 0.25)\nLANGUES_WEIGHT = config.WEIGHTS.get(\"langues\", 0.15)\nOUTILS_WEIGHT = config.WEIGHTS.get(\"outils\", 0.10)\n# Seuils pour l'analyse avancée\nSEMANTIC_SIMILARITY_THRESHOLD = 0.75\nENTITY_CONFIDENCE_THRESHOLD = 0.6\nSKILL_MATCH_THRESHOLD = 0.8\n# === NOUVELLES FONCTIONS D'EXTRACTION ET D'ANALYSE AVANCÉE ===\ndef normalize_skill_name(skill: str) -> str:\n    \"\"\"",
        "detail": "api1.utils",
        "documentation": {}
    },
    {
        "label": "LANGUES_WEIGHT",
        "kind": 5,
        "importPath": "api1.utils",
        "description": "api1.utils",
        "peekOfCode": "LANGUES_WEIGHT = config.WEIGHTS.get(\"langues\", 0.15)\nOUTILS_WEIGHT = config.WEIGHTS.get(\"outils\", 0.10)\n# Seuils pour l'analyse avancée\nSEMANTIC_SIMILARITY_THRESHOLD = 0.75\nENTITY_CONFIDENCE_THRESHOLD = 0.6\nSKILL_MATCH_THRESHOLD = 0.8\n# === NOUVELLES FONCTIONS D'EXTRACTION ET D'ANALYSE AVANCÉE ===\ndef normalize_skill_name(skill: str) -> str:\n    \"\"\"\n    Normalise le nom d'une compétence en utilisant les dictionnaires de correspondance.",
        "detail": "api1.utils",
        "documentation": {}
    },
    {
        "label": "OUTILS_WEIGHT",
        "kind": 5,
        "importPath": "api1.utils",
        "description": "api1.utils",
        "peekOfCode": "OUTILS_WEIGHT = config.WEIGHTS.get(\"outils\", 0.10)\n# Seuils pour l'analyse avancée\nSEMANTIC_SIMILARITY_THRESHOLD = 0.75\nENTITY_CONFIDENCE_THRESHOLD = 0.6\nSKILL_MATCH_THRESHOLD = 0.8\n# === NOUVELLES FONCTIONS D'EXTRACTION ET D'ANALYSE AVANCÉE ===\ndef normalize_skill_name(skill: str) -> str:\n    \"\"\"\n    Normalise le nom d'une compétence en utilisant les dictionnaires de correspondance.\n    \"\"\"",
        "detail": "api1.utils",
        "documentation": {}
    },
    {
        "label": "SEMANTIC_SIMILARITY_THRESHOLD",
        "kind": 5,
        "importPath": "api1.utils",
        "description": "api1.utils",
        "peekOfCode": "SEMANTIC_SIMILARITY_THRESHOLD = 0.75\nENTITY_CONFIDENCE_THRESHOLD = 0.6\nSKILL_MATCH_THRESHOLD = 0.8\n# === NOUVELLES FONCTIONS D'EXTRACTION ET D'ANALYSE AVANCÉE ===\ndef normalize_skill_name(skill: str) -> str:\n    \"\"\"\n    Normalise le nom d'une compétence en utilisant les dictionnaires de correspondance.\n    \"\"\"\n    skill_lower = skill.lower().strip()\n    return SKILL_NORMALIZATION.get(skill_lower, skill_lower)",
        "detail": "api1.utils",
        "documentation": {}
    },
    {
        "label": "ENTITY_CONFIDENCE_THRESHOLD",
        "kind": 5,
        "importPath": "api1.utils",
        "description": "api1.utils",
        "peekOfCode": "ENTITY_CONFIDENCE_THRESHOLD = 0.6\nSKILL_MATCH_THRESHOLD = 0.8\n# === NOUVELLES FONCTIONS D'EXTRACTION ET D'ANALYSE AVANCÉE ===\ndef normalize_skill_name(skill: str) -> str:\n    \"\"\"\n    Normalise le nom d'une compétence en utilisant les dictionnaires de correspondance.\n    \"\"\"\n    skill_lower = skill.lower().strip()\n    return SKILL_NORMALIZATION.get(skill_lower, skill_lower)\ndef _convert_to_text(data) -> str:",
        "detail": "api1.utils",
        "documentation": {}
    },
    {
        "label": "SKILL_MATCH_THRESHOLD",
        "kind": 5,
        "importPath": "api1.utils",
        "description": "api1.utils",
        "peekOfCode": "SKILL_MATCH_THRESHOLD = 0.8\n# === NOUVELLES FONCTIONS D'EXTRACTION ET D'ANALYSE AVANCÉE ===\ndef normalize_skill_name(skill: str) -> str:\n    \"\"\"\n    Normalise le nom d'une compétence en utilisant les dictionnaires de correspondance.\n    \"\"\"\n    skill_lower = skill.lower().strip()\n    return SKILL_NORMALIZATION.get(skill_lower, skill_lower)\ndef _convert_to_text(data) -> str:\n    \"\"\"",
        "detail": "api1.utils",
        "documentation": {}
    },
    {
        "label": "NIVEAU_ETUDES_MAP",
        "kind": 5,
        "importPath": "api1.utils",
        "description": "api1.utils",
        "peekOfCode": "NIVEAU_ETUDES_MAP = {\n    \"Bac\": {\"niveau\": 1, \"equivalents\": [\"Baccalauréat\", \"High School\"]},\n    \"Bac+2\": {\"niveau\": 2, \"equivalents\": [\"DUT\", \"BTS\", \"DEUG\"]},\n    \"Bac+3\": {\"niveau\": 3, \"equivalents\": [\"Licence\", \"Bachelor\"]},\n    \"Bac+4\": {\"niveau\": 4, \"equivalents\": [\"Maîtrise\", \"Master 1\"]},\n    \"Bac+5\": {\"niveau\": 5, \"equivalents\": [\"Master\", \"Ingénieur\", \"MBA\"]},\n    \"Doctorat\": {\"niveau\": 8, \"equivalents\": [\"PhD\", \"Doctorate\"]},\n}\ndef get_niveau_etudes_value(niveau: str) -> int:\n    \"\"\"Convertit un niveau d'études en valeur numérique standardisée.\"\"\"",
        "detail": "api1.utils",
        "documentation": {}
    },
    {
        "label": "analyze_competences_dakar",
        "kind": 2,
        "importPath": "api1.utils_dakar",
        "description": "api1.utils_dakar",
        "peekOfCode": "def analyze_competences_dakar(candidate_competences: List[str], offer_text: str) -> Tuple[float, List[CorrespondanceItem], List[ElementManquant], List[str], List[str]]:\n    \"\"\"\n    Analyse avancée des compétences combinant recherche textuelle et extraction de compétences de l'offre.\n    \"\"\"\n    if not candidate_competences:\n        return 0.0, [], [], [], [\"Le profil du candidat ne liste aucune compétence à analyser.\"]\n    points_forts = []\n    recommandations = []\n    manquants = []\n    # Nettoyage du texte de l'offre",
        "detail": "api1.utils_dakar",
        "documentation": {}
    },
    {
        "label": "generate_detailed_report_dakar",
        "kind": 2,
        "importPath": "api1.utils_dakar",
        "description": "api1.utils_dakar",
        "peekOfCode": "def generate_detailed_report_dakar(profile: CandidatProfileDakar, offer: JobOfferDakar, manquants: List[ElementManquant], recos: List[str]) -> Tuple[List[PointFort], List[PointAmelioration], List[Suggestion]]:\n    \"\"\"\n    Génère un rapport détaillé (points forts, améliorations, suggestions)\n    pour les offres Dakar.\n    \"\"\"\n    points_forts = []\n    points_amelioration = []\n    suggestions = []\n    # --- Points Forts ---\n    # Ajouter les compétences correspondantes",
        "detail": "api1.utils_dakar",
        "documentation": {}
    },
    {
        "label": "find_keyword_matches",
        "kind": 2,
        "importPath": "api1.utils_dakar",
        "description": "api1.utils_dakar",
        "peekOfCode": "def find_keyword_matches(items: List[str], offer_text: str, category: str) -> List[str]:\n    \"\"\"\n    Recherche des correspondances de mots-clés entre une liste d'items et le texte de l'offre.\n    Args:\n        items: Liste de chaînes (ex: titres de poste, diplômes).\n        offer_text: Texte de l'offre.\n        category: Catégorie pour le message du point fort.\n    Returns:\n        Une liste de points forts (chaînes de caractères).\n    \"\"\"",
        "detail": "api1.utils_dakar",
        "documentation": {}
    },
    {
        "label": "analyze_description_dakar",
        "kind": 2,
        "importPath": "api1.utils_dakar",
        "description": "api1.utils_dakar",
        "peekOfCode": "def analyze_description_dakar(description: Optional[str], offer_text: str) -> Tuple[float, List[str]]:\n    \"\"\"Analyse la description du candidat par rapport à l'offre.\"\"\"\n    if not description:\n        return 0.0, []\n    # L'analyse sémantique est la plus adaptée pour une description\n    score = get_semantic_similarity(description, offer_text)\n    points_forts = []\n    if score > 0.6:\n        points_forts.append(\"Votre description personnelle présente une bonne adéquation sémantique avec l'offre.\")\n    return score, points_forts",
        "detail": "api1.utils_dakar",
        "documentation": {}
    },
    {
        "label": "analyze_langues_dakar",
        "kind": 2,
        "importPath": "api1.utils_dakar",
        "description": "api1.utils_dakar",
        "peekOfCode": "def analyze_langues_dakar(langues: List[LangueCandidatDakar], offer_text: str) -> List[str]:\n    \"\"\"Recherche les langues du candidat dans le texte de l'offre.\"\"\"\n    langue_items = [langue.nom for langue in langues]\n    return find_keyword_matches(langue_items, offer_text, \"langue\")\ndef analyze_formation_dakar(formations: List[FormationCandidatDakar], offre_texte: str) -> Tuple[float, List[str], List[str]]:\n    \"\"\"Analyse de la formation en cherchant des correspondances de mots-clés.\"\"\"\n    points_forts = []\n    recommandations = []\n    diplomes = [f.diplome for f in formations if f.diplome]\n    etablissements = [f.etablissement for f in formations if f.etablissement]",
        "detail": "api1.utils_dakar",
        "documentation": {}
    },
    {
        "label": "analyze_formation_dakar",
        "kind": 2,
        "importPath": "api1.utils_dakar",
        "description": "api1.utils_dakar",
        "peekOfCode": "def analyze_formation_dakar(formations: List[FormationCandidatDakar], offre_texte: str) -> Tuple[float, List[str], List[str]]:\n    \"\"\"Analyse de la formation en cherchant des correspondances de mots-clés.\"\"\"\n    points_forts = []\n    recommandations = []\n    diplomes = [f.diplome for f in formations if f.diplome]\n    etablissements = [f.etablissement for f in formations if f.etablissement]\n    points_forts.extend(find_keyword_matches(diplomes, offre_texte, \"diplôme\"))\n    points_forts.extend(find_keyword_matches(etablissements, offre_texte, \"établissement\"))\n    score = 0.75 if points_forts else 0.5\n    if not points_forts:",
        "detail": "api1.utils_dakar",
        "documentation": {}
    },
    {
        "label": "analyze_experience_dakar",
        "kind": 2,
        "importPath": "api1.utils_dakar",
        "description": "api1.utils_dakar",
        "peekOfCode": "def analyze_experience_dakar(experiences: List[ExperienceCandidatDakar], offre_texte: str) -> Tuple[float, List[str], List[str]]:\n    \"\"\"Analyse de l'expérience en combinant sémantique et mots-clés.\"\"\"\n    points_forts = []\n    recommandations = []\n    if not experiences:\n        return 0.0, [], [\"Le profil ne contient aucune expérience professionnelle à analyser.\"]\n    # Recherche par mots-clés sur les titres de poste\n    postes = [exp.poste for exp in experiences if exp.poste]\n    points_forts.extend(find_keyword_matches(postes, offre_texte, \"poste\"))\n    candidate_experience_text = \" \".join([exp.description for exp in experiences if exp.description])",
        "detail": "api1.utils_dakar",
        "documentation": {}
    },
    {
        "label": "analyze_compatibility_dakar",
        "kind": 2,
        "importPath": "api1.utils_dakar",
        "description": "api1.utils_dakar",
        "peekOfCode": "def analyze_compatibility_dakar(candidate_data: Dict, job_offer_data: Dict) -> Dict:\n    \"\"\"\n    Analyse de compatibilité complète utilisant une approche HYBRIDE :\n    1. Une analyse sémantique GLOBALE du profil vs l'offre.\n    2. Une analyse GRANULAIRE section par section (compétences, expérience...).\n    3. Un score final PONDÉRÉ combinant les deux approches.\n    \"\"\"\n    try:\n        # --- LOG : Données brutes entrantes ---\n        dakar_logger.info(\"=\"*50)",
        "detail": "api1.utils_dakar",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "api1.utils_dakar",
        "description": "api1.utils_dakar",
        "peekOfCode": "logger = logging.getLogger(__name__)\n# --- Configuration du Logging Détaillé pour Dakar ---\ndakar_logger = logging.getLogger('dakar_analysis')\ndakar_logger.setLevel(logging.INFO)\ndakar_logger.propagate = False\n# Construire un chemin absolu pour le fichier de log pour plus de robustesse\nlog_directory = os.path.dirname(os.path.abspath(__file__))\nlog_file_path = os.path.join(log_directory, 'dakar_analysis.log')\nhandler = RotatingFileHandler(log_file_path, maxBytes=1_000_000, backupCount=3, encoding='utf-8')\nformatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')",
        "detail": "api1.utils_dakar",
        "documentation": {}
    },
    {
        "label": "dakar_logger",
        "kind": 5,
        "importPath": "api1.utils_dakar",
        "description": "api1.utils_dakar",
        "peekOfCode": "dakar_logger = logging.getLogger('dakar_analysis')\ndakar_logger.setLevel(logging.INFO)\ndakar_logger.propagate = False\n# Construire un chemin absolu pour le fichier de log pour plus de robustesse\nlog_directory = os.path.dirname(os.path.abspath(__file__))\nlog_file_path = os.path.join(log_directory, 'dakar_analysis.log')\nhandler = RotatingFileHandler(log_file_path, maxBytes=1_000_000, backupCount=3, encoding='utf-8')\nformatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')\nhandler.setFormatter(formatter)\nif not dakar_logger.hasHandlers():",
        "detail": "api1.utils_dakar",
        "documentation": {}
    },
    {
        "label": "dakar_logger.propagate",
        "kind": 5,
        "importPath": "api1.utils_dakar",
        "description": "api1.utils_dakar",
        "peekOfCode": "dakar_logger.propagate = False\n# Construire un chemin absolu pour le fichier de log pour plus de robustesse\nlog_directory = os.path.dirname(os.path.abspath(__file__))\nlog_file_path = os.path.join(log_directory, 'dakar_analysis.log')\nhandler = RotatingFileHandler(log_file_path, maxBytes=1_000_000, backupCount=3, encoding='utf-8')\nformatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')\nhandler.setFormatter(formatter)\nif not dakar_logger.hasHandlers():\n    dakar_logger.addHandler(handler)\n    # Log de confirmation dans la console",
        "detail": "api1.utils_dakar",
        "documentation": {}
    },
    {
        "label": "log_directory",
        "kind": 5,
        "importPath": "api1.utils_dakar",
        "description": "api1.utils_dakar",
        "peekOfCode": "log_directory = os.path.dirname(os.path.abspath(__file__))\nlog_file_path = os.path.join(log_directory, 'dakar_analysis.log')\nhandler = RotatingFileHandler(log_file_path, maxBytes=1_000_000, backupCount=3, encoding='utf-8')\nformatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')\nhandler.setFormatter(formatter)\nif not dakar_logger.hasHandlers():\n    dakar_logger.addHandler(handler)\n    # Log de confirmation dans la console\n    dakar_logger.info(\"Logger pour 'dakar_analysis' configuré. Les logs seront écrits dans : %s\", log_file_path)\ndef analyze_competences_dakar(candidate_competences: List[str], offer_text: str) -> Tuple[float, List[CorrespondanceItem], List[ElementManquant], List[str], List[str]]:",
        "detail": "api1.utils_dakar",
        "documentation": {}
    },
    {
        "label": "log_file_path",
        "kind": 5,
        "importPath": "api1.utils_dakar",
        "description": "api1.utils_dakar",
        "peekOfCode": "log_file_path = os.path.join(log_directory, 'dakar_analysis.log')\nhandler = RotatingFileHandler(log_file_path, maxBytes=1_000_000, backupCount=3, encoding='utf-8')\nformatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')\nhandler.setFormatter(formatter)\nif not dakar_logger.hasHandlers():\n    dakar_logger.addHandler(handler)\n    # Log de confirmation dans la console\n    dakar_logger.info(\"Logger pour 'dakar_analysis' configuré. Les logs seront écrits dans : %s\", log_file_path)\ndef analyze_competences_dakar(candidate_competences: List[str], offer_text: str) -> Tuple[float, List[CorrespondanceItem], List[ElementManquant], List[str], List[str]]:\n    \"\"\"",
        "detail": "api1.utils_dakar",
        "documentation": {}
    },
    {
        "label": "handler",
        "kind": 5,
        "importPath": "api1.utils_dakar",
        "description": "api1.utils_dakar",
        "peekOfCode": "handler = RotatingFileHandler(log_file_path, maxBytes=1_000_000, backupCount=3, encoding='utf-8')\nformatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')\nhandler.setFormatter(formatter)\nif not dakar_logger.hasHandlers():\n    dakar_logger.addHandler(handler)\n    # Log de confirmation dans la console\n    dakar_logger.info(\"Logger pour 'dakar_analysis' configuré. Les logs seront écrits dans : %s\", log_file_path)\ndef analyze_competences_dakar(candidate_competences: List[str], offer_text: str) -> Tuple[float, List[CorrespondanceItem], List[ElementManquant], List[str], List[str]]:\n    \"\"\"\n    Analyse avancée des compétences combinant recherche textuelle et extraction de compétences de l'offre.",
        "detail": "api1.utils_dakar",
        "documentation": {}
    },
    {
        "label": "formatter",
        "kind": 5,
        "importPath": "api1.utils_dakar",
        "description": "api1.utils_dakar",
        "peekOfCode": "formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')\nhandler.setFormatter(formatter)\nif not dakar_logger.hasHandlers():\n    dakar_logger.addHandler(handler)\n    # Log de confirmation dans la console\n    dakar_logger.info(\"Logger pour 'dakar_analysis' configuré. Les logs seront écrits dans : %s\", log_file_path)\ndef analyze_competences_dakar(candidate_competences: List[str], offer_text: str) -> Tuple[float, List[CorrespondanceItem], List[ElementManquant], List[str], List[str]]:\n    \"\"\"\n    Analyse avancée des compétences combinant recherche textuelle et extraction de compétences de l'offre.\n    \"\"\"",
        "detail": "api1.utils_dakar",
        "documentation": {}
    },
    {
        "label": "analyze_competences_senjob",
        "kind": 2,
        "importPath": "api1.utils_senjob",
        "description": "api1.utils_senjob",
        "peekOfCode": "def analyze_competences_senjob(candidate_competences: List[str], offer_text: str) -> Tuple[float, List[CorrespondanceItem], List[ElementManquant], List[str], List[str]]:\n    \"\"\"\n    Analyse avancée des compétences combinant recherche textuelle et extraction de compétences de l'offre.\n    \"\"\"\n    if not candidate_competences:\n        return 0.0, [], [], [], [\"Le profil du candidat ne liste aucune compétence à analyser.\"]\n    points_forts = []\n    recommandations = []\n    manquants = []\n    # Nettoyage du texte de l'offre",
        "detail": "api1.utils_senjob",
        "documentation": {}
    },
    {
        "label": "find_keyword_matches",
        "kind": 2,
        "importPath": "api1.utils_senjob",
        "description": "api1.utils_senjob",
        "peekOfCode": "def find_keyword_matches(items: List[str], offer_text: str, category: str) -> List[str]:\n    \"\"\"\n    Recherche des correspondances de mots-clés entre une liste d'items et le texte de l'offre.\n    \"\"\"\n    points_forts = []\n    soup = BeautifulSoup(offer_text, 'html.parser')\n    offer_text_cleaned = soup.get_text().lower()\n    for item in items:\n        item_strip = item.strip()\n        if len(item_strip) > 3 and item_strip.lower() in offer_text_cleaned:",
        "detail": "api1.utils_senjob",
        "documentation": {}
    },
    {
        "label": "analyze_description_senjob",
        "kind": 2,
        "importPath": "api1.utils_senjob",
        "description": "api1.utils_senjob",
        "peekOfCode": "def analyze_description_senjob(description: Optional[str], offer_text: str) -> Tuple[float, List[str]]:\n    \"\"\"Analyse la description du candidat par rapport à l'offre.\"\"\"\n    if not description:\n        return 0.0, []\n    score = get_semantic_similarity(description, offer_text)\n    points_forts = []\n    if score > 0.6:\n        points_forts.append(\"Votre description personnelle présente une bonne adéquation sémantique avec l'offre.\")\n    return score, points_forts\ndef analyze_langues_senjob(langues: List[LangueCandidatDakar], offer_text: str) -> List[str]:",
        "detail": "api1.utils_senjob",
        "documentation": {}
    },
    {
        "label": "analyze_langues_senjob",
        "kind": 2,
        "importPath": "api1.utils_senjob",
        "description": "api1.utils_senjob",
        "peekOfCode": "def analyze_langues_senjob(langues: List[LangueCandidatDakar], offer_text: str) -> List[str]:\n    \"\"\"Recherche les langues du candidat dans le texte de l'offre.\"\"\"\n    langue_items = [langue.nom for langue in langues]\n    return find_keyword_matches(langue_items, offer_text, \"langue\")\ndef analyze_formation_senjob(formations: List[FormationCandidatDakar], offre_texte: str) -> Tuple[float, List[str], List[str]]:\n    \"\"\"Analyse de la formation en cherchant des correspondances de mots-clés.\"\"\"\n    points_forts = []\n    recommandations = []\n    diplomes = [f.diplome for f in formations if f.diplome]\n    etablissements = [f.etablissement for f in formations if f.etablissement]",
        "detail": "api1.utils_senjob",
        "documentation": {}
    },
    {
        "label": "analyze_formation_senjob",
        "kind": 2,
        "importPath": "api1.utils_senjob",
        "description": "api1.utils_senjob",
        "peekOfCode": "def analyze_formation_senjob(formations: List[FormationCandidatDakar], offre_texte: str) -> Tuple[float, List[str], List[str]]:\n    \"\"\"Analyse de la formation en cherchant des correspondances de mots-clés.\"\"\"\n    points_forts = []\n    recommandations = []\n    diplomes = [f.diplome for f in formations if f.diplome]\n    etablissements = [f.etablissement for f in formations if f.etablissement]\n    points_forts.extend(find_keyword_matches(diplomes, offre_texte, \"diplôme\"))\n    points_forts.extend(find_keyword_matches(etablissements, offre_texte, \"établissement\"))\n    score = 0.75 if points_forts else 0.5\n    if not points_forts:",
        "detail": "api1.utils_senjob",
        "documentation": {}
    },
    {
        "label": "analyze_experience_senjob",
        "kind": 2,
        "importPath": "api1.utils_senjob",
        "description": "api1.utils_senjob",
        "peekOfCode": "def analyze_experience_senjob(experiences: List[ExperienceCandidatDakar], offre_texte: str) -> Tuple[float, List[str], List[str]]:\n    \"\"\"Analyse de l'expérience en combinant sémantique et mots-clés.\"\"\"\n    points_forts = []\n    recommandations = []\n    if not experiences:\n        return 0.0, [], [\"Le profil ne contient aucune expérience professionnelle à analyser.\"]\n    postes = [exp.poste for exp in experiences if exp.poste]\n    points_forts.extend(find_keyword_matches(postes, offre_texte, \"poste\"))\n    candidate_experience_text = \" \".join([exp.description for exp in experiences if exp.description])\n    score_semantique = 0.0",
        "detail": "api1.utils_senjob",
        "documentation": {}
    },
    {
        "label": "analyze_compatibility_senjob",
        "kind": 2,
        "importPath": "api1.utils_senjob",
        "description": "api1.utils_senjob",
        "peekOfCode": "def analyze_compatibility_senjob(candidate_data: Dict, job_offer_data: Dict) -> Dict:\n    \"\"\"\n    Analyse de compatibilité complète utilisant une approche HYBRIDE pour Senjob.\n    \"\"\"\n    try:\n        senjob_logger.info(\"=\"*50)\n        senjob_logger.info(f\"Début de l'analyse pour l'offre ID: {job_offer_data.get('id')} et candidat ID: {candidate_data.get('id')}\")\n        senjob_logger.info(\"Données du candidat reçues (brutes):\\n%s\", json.dumps(candidate_data, indent=2, ensure_ascii=False))\n        senjob_logger.info(\"Données de l'offre reçues (brutes):\\n%s\", json.dumps(job_offer_data, indent=2, ensure_ascii=False))\n        profile = CandidatProfileDakar(**candidate_data)",
        "detail": "api1.utils_senjob",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "api1.utils_senjob",
        "description": "api1.utils_senjob",
        "peekOfCode": "logger = logging.getLogger(__name__)\n# --- Configuration du Logging Détaillé pour Senjob ---\nsenjob_logger = logging.getLogger('senjob_analysis')\nsenjob_logger.setLevel(logging.INFO)\nsenjob_logger.propagate = False\n# Construire un chemin absolu pour le fichier de log pour plus de robustesse\nlog_directory = os.path.dirname(os.path.abspath(__file__))\nlog_file_path = os.path.join(log_directory, 'senjob_analysis.log')\nhandler = RotatingFileHandler(log_file_path, maxBytes=1_000_000, backupCount=3, encoding='utf-8')\nformatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')",
        "detail": "api1.utils_senjob",
        "documentation": {}
    },
    {
        "label": "senjob_logger",
        "kind": 5,
        "importPath": "api1.utils_senjob",
        "description": "api1.utils_senjob",
        "peekOfCode": "senjob_logger = logging.getLogger('senjob_analysis')\nsenjob_logger.setLevel(logging.INFO)\nsenjob_logger.propagate = False\n# Construire un chemin absolu pour le fichier de log pour plus de robustesse\nlog_directory = os.path.dirname(os.path.abspath(__file__))\nlog_file_path = os.path.join(log_directory, 'senjob_analysis.log')\nhandler = RotatingFileHandler(log_file_path, maxBytes=1_000_000, backupCount=3, encoding='utf-8')\nformatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')\nhandler.setFormatter(formatter)\nif not senjob_logger.hasHandlers():",
        "detail": "api1.utils_senjob",
        "documentation": {}
    },
    {
        "label": "senjob_logger.propagate",
        "kind": 5,
        "importPath": "api1.utils_senjob",
        "description": "api1.utils_senjob",
        "peekOfCode": "senjob_logger.propagate = False\n# Construire un chemin absolu pour le fichier de log pour plus de robustesse\nlog_directory = os.path.dirname(os.path.abspath(__file__))\nlog_file_path = os.path.join(log_directory, 'senjob_analysis.log')\nhandler = RotatingFileHandler(log_file_path, maxBytes=1_000_000, backupCount=3, encoding='utf-8')\nformatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')\nhandler.setFormatter(formatter)\nif not senjob_logger.hasHandlers():\n    senjob_logger.addHandler(handler)\n    # Log de confirmation dans la console",
        "detail": "api1.utils_senjob",
        "documentation": {}
    },
    {
        "label": "log_directory",
        "kind": 5,
        "importPath": "api1.utils_senjob",
        "description": "api1.utils_senjob",
        "peekOfCode": "log_directory = os.path.dirname(os.path.abspath(__file__))\nlog_file_path = os.path.join(log_directory, 'senjob_analysis.log')\nhandler = RotatingFileHandler(log_file_path, maxBytes=1_000_000, backupCount=3, encoding='utf-8')\nformatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')\nhandler.setFormatter(formatter)\nif not senjob_logger.hasHandlers():\n    senjob_logger.addHandler(handler)\n    # Log de confirmation dans la console\n    senjob_logger.info(\"Logger pour 'senjob_analysis' configuré. Les logs seront écrits dans : %s\", log_file_path)\ndef analyze_competences_senjob(candidate_competences: List[str], offer_text: str) -> Tuple[float, List[CorrespondanceItem], List[ElementManquant], List[str], List[str]]:",
        "detail": "api1.utils_senjob",
        "documentation": {}
    },
    {
        "label": "log_file_path",
        "kind": 5,
        "importPath": "api1.utils_senjob",
        "description": "api1.utils_senjob",
        "peekOfCode": "log_file_path = os.path.join(log_directory, 'senjob_analysis.log')\nhandler = RotatingFileHandler(log_file_path, maxBytes=1_000_000, backupCount=3, encoding='utf-8')\nformatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')\nhandler.setFormatter(formatter)\nif not senjob_logger.hasHandlers():\n    senjob_logger.addHandler(handler)\n    # Log de confirmation dans la console\n    senjob_logger.info(\"Logger pour 'senjob_analysis' configuré. Les logs seront écrits dans : %s\", log_file_path)\ndef analyze_competences_senjob(candidate_competences: List[str], offer_text: str) -> Tuple[float, List[CorrespondanceItem], List[ElementManquant], List[str], List[str]]:\n    \"\"\"",
        "detail": "api1.utils_senjob",
        "documentation": {}
    },
    {
        "label": "handler",
        "kind": 5,
        "importPath": "api1.utils_senjob",
        "description": "api1.utils_senjob",
        "peekOfCode": "handler = RotatingFileHandler(log_file_path, maxBytes=1_000_000, backupCount=3, encoding='utf-8')\nformatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')\nhandler.setFormatter(formatter)\nif not senjob_logger.hasHandlers():\n    senjob_logger.addHandler(handler)\n    # Log de confirmation dans la console\n    senjob_logger.info(\"Logger pour 'senjob_analysis' configuré. Les logs seront écrits dans : %s\", log_file_path)\ndef analyze_competences_senjob(candidate_competences: List[str], offer_text: str) -> Tuple[float, List[CorrespondanceItem], List[ElementManquant], List[str], List[str]]:\n    \"\"\"\n    Analyse avancée des compétences combinant recherche textuelle et extraction de compétences de l'offre.",
        "detail": "api1.utils_senjob",
        "documentation": {}
    },
    {
        "label": "formatter",
        "kind": 5,
        "importPath": "api1.utils_senjob",
        "description": "api1.utils_senjob",
        "peekOfCode": "formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')\nhandler.setFormatter(formatter)\nif not senjob_logger.hasHandlers():\n    senjob_logger.addHandler(handler)\n    # Log de confirmation dans la console\n    senjob_logger.info(\"Logger pour 'senjob_analysis' configuré. Les logs seront écrits dans : %s\", log_file_path)\ndef analyze_competences_senjob(candidate_competences: List[str], offer_text: str) -> Tuple[float, List[CorrespondanceItem], List[ElementManquant], List[str], List[str]]:\n    \"\"\"\n    Analyse avancée des compétences combinant recherche textuelle et extraction de compétences de l'offre.\n    \"\"\"",
        "detail": "api1.utils_senjob",
        "documentation": {}
    },
    {
        "label": "FileDoesNotExist",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.filesys.files",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.filesys.files",
        "peekOfCode": "class FileDoesNotExist(Exception):\n  \"\"\"File does not exist.\"\"\"\ndef GetFileContents(filename):\n  \"\"\"Returns the contents of a file.\n  Args:\n    filename: path to a file.\n  Returns:\n    bytes.\n  Raises:\n    FileDoesNotExist: if the file does not exist",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.filesys.files",
        "documentation": {}
    },
    {
        "label": "GetFileContents",
        "kind": 2,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.filesys.files",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.filesys.files",
        "peekOfCode": "def GetFileContents(filename):\n  \"\"\"Returns the contents of a file.\n  Args:\n    filename: path to a file.\n  Returns:\n    bytes.\n  Raises:\n    FileDoesNotExist: if the file does not exist\n    IOError: for other local IO errors\n  \"\"\"",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.filesys.files",
        "documentation": {}
    },
    {
        "label": "IsFile",
        "kind": 2,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.filesys.files",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.filesys.files",
        "peekOfCode": "def IsFile(filename):\n  \"\"\"Returns whether the named file is a regular file.\n  Args:\n    filename: path to a file.\n  Returns:\n    bool: whether the file is a regular file.\n  \"\"\"\n  return os.path.isfile(filename)\ndef IterFiles(directory):\n  \"\"\"yield all files beneath a directory.\"\"\"",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.filesys.files",
        "documentation": {}
    },
    {
        "label": "IterFiles",
        "kind": 2,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.filesys.files",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.filesys.files",
        "peekOfCode": "def IterFiles(directory):\n  \"\"\"yield all files beneath a directory.\"\"\"\n  for root, unused_dirs, filenames in os.walk(directory):\n    for f in filenames:\n      yield os.path.join(root, f)",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.filesys.files",
        "documentation": {}
    },
    {
        "label": "FilesystemLibraryPackage",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.filesys.filesystem_library_package",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.filesys.filesystem_library_package",
        "peekOfCode": "class FilesystemLibraryPackage(LibraryPackage):\n  \"\"\"The library package.\"\"\"\n  def __init__(self, root_path):\n    \"\"\"Create a new FilesystemLibraryPackage.\n    Args:\n      root_path: (str) A path to a directory where the files will be written.\n        The directory will be created if it does not exist.\n    Raises:\n      ValueError: If the directory exists, but is not writable.\n      OSError: If the directory does not exist and cannot be created.",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.filesys.filesystem_library_package",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.filesys.filesystem_library_package",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.filesys.filesystem_library_package",
        "peekOfCode": "__author__ = 'aiuto@google.com (Tony Aiuto)'\nimport os\nfrom googleapis.codegen.filesys.library_package import LibraryPackage\nclass FilesystemLibraryPackage(LibraryPackage):\n  \"\"\"The library package.\"\"\"\n  def __init__(self, root_path):\n    \"\"\"Create a new FilesystemLibraryPackage.\n    Args:\n      root_path: (str) A path to a directory where the files will be written.\n        The directory will be created if it does not exist.",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.filesys.filesystem_library_package",
        "documentation": {}
    },
    {
        "label": "LibraryPackage",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.filesys.library_package",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.filesys.library_package",
        "peekOfCode": "class LibraryPackage(object):\n  \"\"\"The library package.\"\"\"\n  def __init__(self):\n    \"\"\"Create a new LibraryPackage.\"\"\"\n    self._file_path_prefix = ''\n  def StartFile(self, name):\n    \"\"\"Start writing a named file to the package.\n    Subclasses must implement this.\n    Args:\n      name: (str) path which will identify the contents in the archive.",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.filesys.library_package",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.filesys.library_package",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.filesys.library_package",
        "peekOfCode": "__author__ = 'aiuto@google.com (Tony Aiuto)'\nimport contextlib\nimport os\nimport six\nfrom googleapis.codegen.filesys import files\nclass LibraryPackage(object):\n  \"\"\"The library package.\"\"\"\n  def __init__(self):\n    \"\"\"Create a new LibraryPackage.\"\"\"\n    self._file_path_prefix = ''",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.filesys.library_package",
        "documentation": {}
    },
    {
        "label": "GetPackageWriter",
        "kind": 2,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.filesys.package_writer_foundry",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.filesys.package_writer_foundry",
        "peekOfCode": "def GetPackageWriter(output_dir=None, output_file=None, output_format='zip'):\n  \"\"\"Get an output writer for a package.\"\"\"\n  if not (output_dir or output_file):\n    raise ValueError(\n        'GetPackageWriter requires either output_dir or output_file')\n  if output_dir and output_file:\n    raise ValueError(\n        'GetPackageWriter requires only one of output_dir or output_file')\n  if output_dir:\n    package_writer = filesystem_library_package.FilesystemLibraryPackage(",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.filesys.package_writer_foundry",
        "documentation": {}
    },
    {
        "label": "SingleFileLibraryPackage",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.filesys.single_file_library_package",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.filesys.single_file_library_package",
        "peekOfCode": "class SingleFileLibraryPackage(LibraryPackage):\n  \"\"\"The library package.\"\"\"\n  def __init__(self, stream):\n    \"\"\"Create a new SingleFileLibraryPackage.\n    Args:\n      stream: (file) A file-like object to write to.\n    \"\"\"\n    super(SingleFileLibraryPackage, self).__init__()\n    self._files = {}\n    self._current_file_data = None",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.filesys.single_file_library_package",
        "documentation": {}
    },
    {
        "label": "TarLibraryPackage",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.filesys.tar_library_package",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.filesys.tar_library_package",
        "peekOfCode": "class TarLibraryPackage(LibraryPackage):\n  \"\"\"The library package.\"\"\"\n  def __init__(self, stream, compress=True):\n    \"\"\"Create a new TarLibraryPackage.\n    Args:\n      stream: (file) A file-like object to write to.\n      compress: (boolean) Whether to gzip-compress the output.\n    \"\"\"\n    super(TarLibraryPackage, self).__init__()\n    mode = 'w:gz' if compress else 'w'",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.filesys.tar_library_package",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.filesys.tar_library_package",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.filesys.tar_library_package",
        "peekOfCode": "__author__ = 'sammccall@google.com (Sam McCall)'\nclass TarLibraryPackage(LibraryPackage):\n  \"\"\"The library package.\"\"\"\n  def __init__(self, stream, compress=True):\n    \"\"\"Create a new TarLibraryPackage.\n    Args:\n      stream: (file) A file-like object to write to.\n      compress: (boolean) Whether to gzip-compress the output.\n    \"\"\"\n    super(TarLibraryPackage, self).__init__()",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.filesys.tar_library_package",
        "documentation": {}
    },
    {
        "label": "ZipLibraryPackage",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.filesys.zip_library_package",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.filesys.zip_library_package",
        "peekOfCode": "class ZipLibraryPackage(LibraryPackage):\n  \"\"\"The library package.\"\"\"\n  def __init__(self, stream):\n    \"\"\"Create a new ZipLibraryPackage.\n    Args:\n      stream: (file) A file-like object to write to.\n    \"\"\"\n    super(ZipLibraryPackage, self).__init__()\n    self._zip = zipfile.ZipFile(stream, 'w', zipfile.ZIP_STORED)\n    self._current_file_data = None",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.filesys.zip_library_package",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.filesys.zip_library_package",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.filesys.zip_library_package",
        "peekOfCode": "__author__ = 'aiuto@google.com (Tony Aiuto)'\nclass ZipLibraryPackage(LibraryPackage):\n  \"\"\"The library package.\"\"\"\n  def __init__(self, stream):\n    \"\"\"Create a new ZipLibraryPackage.\n    Args:\n      stream: (file) A file-like object to write to.\n    \"\"\"\n    super(ZipLibraryPackage, self).__init__()\n    self._zip = zipfile.ZipFile(stream, 'w', zipfile.ZIP_STORED)",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.filesys.zip_library_package",
        "documentation": {}
    },
    {
        "label": "ConvertSize",
        "kind": 2,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.utilities.convert_size",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.utilities.convert_size",
        "peekOfCode": "def ConvertSize(size):\n  \"\"\"Convert a size like 10G/K/M/B to a number.\n  Args:\n    size: (str) A number with unit indicators\n  Returns:\n    (int) The number represented by size.\n  \"\"\"\n  if not size:\n    return None\n  units = [('GB', 2 ** 30),",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.utilities.convert_size",
        "documentation": {}
    },
    {
        "label": "HTMLStripper",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.utilities.html_stripper",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.utilities.html_stripper",
        "peekOfCode": "class HTMLStripper(html.parser.HTMLParser):\n  \"\"\"Simple class to strip tags from HTML.\"\"\"\n  def __init__(self):\n    html.parser.HTMLParser.__init__(self)\n    self.reset()\n    self.fed = []\n  def handle_data(self, d):\n    self.fed.append(d)\n  def GetFedData(self):\n    return ''.join(self.fed)",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.utilities.html_stripper",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.utilities.html_stripper",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.utilities.html_stripper",
        "peekOfCode": "__author__ = 'wclarkso@google.com (Will Clarkson)'\nimport html.parser\nclass HTMLStripper(html.parser.HTMLParser):\n  \"\"\"Simple class to strip tags from HTML.\"\"\"\n  def __init__(self):\n    html.parser.HTMLParser.__init__(self)\n    self.reset()\n    self.fed = []\n  def handle_data(self, d):\n    self.fed.append(d)",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.utilities.html_stripper",
        "documentation": {}
    },
    {
        "label": "ExpandJsonTemplate",
        "kind": 2,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.utilities.json_expander",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.utilities.json_expander",
        "peekOfCode": "def ExpandJsonTemplate(json_data, extra_context=None, use_self=True):\n  \"\"\"Recursively template-expand a json dict against itself or other context.\n  The context for string expansion is the json dict itself by default, updated\n  by extra_context, if supplied.\n  Args:\n    json_data: (dict) A JSON object where string values may be templates.\n    extra_context: (dict) Additional context for template expansion.\n    use_self: (bool) Whether to expand the template against itself, or only use\n        extra_context.\n  Returns:",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.utilities.json_expander",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.utilities.json_expander",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.utilities.json_expander",
        "peekOfCode": "__author__ = 'smulloni@google.com (Jacob Smullyan)'\ndef ExpandJsonTemplate(json_data, extra_context=None, use_self=True):\n  \"\"\"Recursively template-expand a json dict against itself or other context.\n  The context for string expansion is the json dict itself by default, updated\n  by extra_context, if supplied.\n  Args:\n    json_data: (dict) A JSON object where string values may be templates.\n    extra_context: (dict) Additional context for template expansion.\n    use_self: (bool) Whether to expand the template against itself, or only use\n        extra_context.",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.utilities.json_expander",
        "documentation": {}
    },
    {
        "label": "Load",
        "kind": 2,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.utilities.json_with_comments",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.utilities.json_with_comments",
        "peekOfCode": "def Load(fp, **kw):\n  \"\"\"Load json with comments from a file.\n  Args:\n    fp: (file) A fileish object.\n    **kw: (dict) Keyword arguments to pass to the underlying json parser.\n  Returns:\n    Decoded json data.\n  \"\"\"\n  raw = fp.read()\n  return Loads(raw, **kw)",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.utilities.json_with_comments",
        "documentation": {}
    },
    {
        "label": "Loads",
        "kind": 2,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.utilities.json_with_comments",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.utilities.json_with_comments",
        "peekOfCode": "def Loads(json_string, **kw):\n  \"\"\"Load json with comments from a string.\n  Args:\n    json_string: (str|unicode) A string.\n    **kw: (dict) Keyword arguments to pass to the underlying json parser.\n  Returns:\n    Decoded json data.\n  \"\"\"\n  stripped = _StripComments(six.ensure_str(json_string))\n  return json.loads(stripped, **kw)",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.utilities.json_with_comments",
        "documentation": {}
    },
    {
        "label": "COMMENT_PAT",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.utilities.json_with_comments",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.utilities.json_with_comments",
        "peekOfCode": "COMMENT_PAT = re.compile(r'^[ \\t]*#.*$', re.MULTILINE)\ndef _StripComments(json_string):\n  \"\"\"Strip comments from a json-with-comments string.\n  Any line beginning with a pound sign, or with whitespace followed by a pound\n  sign, is removed.  Comments are not allowed on the same line as json\n  constructs.\n  Args:\n    json_string: (str) A json string which may contain comments.\n  Returns:\n    A string without comments.",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.utilities.json_with_comments",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.utilities.name_validator",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.utilities.name_validator",
        "peekOfCode": "class ValidationError(ValueError):\n  pass\ndef Validate(name):\n  \"\"\"Validates the name against a regular expression object.\n  If the name matches the regular expression, we return nothing.\n  If the name fails to match, we generate an exception.\n  Args:\n    name: (str) name of variable or method\n  Returns:\n    (str) The name.",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.utilities.name_validator",
        "documentation": {}
    },
    {
        "label": "Validate",
        "kind": 2,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.utilities.name_validator",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.utilities.name_validator",
        "peekOfCode": "def Validate(name):\n  \"\"\"Validates the name against a regular expression object.\n  If the name matches the regular expression, we return nothing.\n  If the name fails to match, we generate an exception.\n  Args:\n    name: (str) name of variable or method\n  Returns:\n    (str) The name.\n  Raises:\n    ValidationError: An Error if name does not conform to style",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.utilities.name_validator",
        "documentation": {}
    },
    {
        "label": "ValidateApiName",
        "kind": 2,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.utilities.name_validator",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.utilities.name_validator",
        "peekOfCode": "def ValidateApiName(api_name):\n  \"\"\"Validates a potential API name.\n  An API name must match the regular expression[a-z0-9][a-zA-Z0-9_]*\n  Args:\n    api_name: (str) The API name to check.\n  Returns:\n    (str) The api name.\n  Raises:\n    ValidationError: An Error if name does not conform to style\n  \"\"\"",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.utilities.name_validator",
        "documentation": {}
    },
    {
        "label": "ValidateApiVersion",
        "kind": 2,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.utilities.name_validator",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.utilities.name_validator",
        "peekOfCode": "def ValidateApiVersion(api_version):\n  \"\"\"Validates a potential API version.\n  An API version must match the regular expression[a-z0-9][a-zA-Z0-9.]*\n  Args:\n    api_version: (str) The API version to check.\n  Returns:\n    (str) The api version.\n  Raises:\n    ValidationError: An Error if version does not conform to style\n  \"\"\"",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.utilities.name_validator",
        "documentation": {}
    },
    {
        "label": "ValidateAndSanitizeComment",
        "kind": 2,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.utilities.name_validator",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.utilities.name_validator",
        "peekOfCode": "def ValidateAndSanitizeComment(comment_string):\n  \"\"\"Validates a comment string.\n  Remove comment terminators (e.g. */) from a string.\n  TODO(user): Make a per-language validator. Allow non-dangerous symbols\n  depending on language. e.g. */ is OK for Python but not PHP\n  Args:\n    comment_string: (str|unicode) input comment string\n  Returns:\n    (unicode) String with invalid character sequences removed\n  \"\"\"",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.utilities.name_validator",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.utilities.name_validator",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.utilities.name_validator",
        "peekOfCode": "__author__ = 'wclarkso@google.com (Will Clarkson)'\nimport re\nimport sys\n# The first character must alpha (a-zA-Z), a slash (/), a '@', or an\n# underscore (no single digits).  Subsequent characters can be alpha\n# numeric. We also permit them to have a slash(/), underscore (_), dot\n# (.) or dash (-).  NOTE: the '$' character is to get around $ref or foo$bar\n# variable names in some APIs.\n_VARNAME_REGEX = re.compile(\n    r'^[a-zA-Z]$|([a-zA-Z_/$@][a-zA-Z0-9_./$-]+)$')",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.utilities.name_validator",
        "documentation": {}
    },
    {
        "label": "_VARNAME_REGEX",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.utilities.name_validator",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.utilities.name_validator",
        "peekOfCode": "_VARNAME_REGEX = re.compile(\n    r'^[a-zA-Z]$|([a-zA-Z_/$@][a-zA-Z0-9_./$-]+)$')\n_API_NAME_REGEX = re.compile(r'[a-z][a-zA-Z0-9_]*$')\n_API_VERSION_REGEX = re.compile(r'[a-z0-9][a-zA-Z0-9._-]*$')\nclass ValidationError(ValueError):\n  pass\ndef Validate(name):\n  \"\"\"Validates the name against a regular expression object.\n  If the name matches the regular expression, we return nothing.\n  If the name fails to match, we generate an exception.",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.utilities.name_validator",
        "documentation": {}
    },
    {
        "label": "_API_NAME_REGEX",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.utilities.name_validator",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.utilities.name_validator",
        "peekOfCode": "_API_NAME_REGEX = re.compile(r'[a-z][a-zA-Z0-9_]*$')\n_API_VERSION_REGEX = re.compile(r'[a-z0-9][a-zA-Z0-9._-]*$')\nclass ValidationError(ValueError):\n  pass\ndef Validate(name):\n  \"\"\"Validates the name against a regular expression object.\n  If the name matches the regular expression, we return nothing.\n  If the name fails to match, we generate an exception.\n  Args:\n    name: (str) name of variable or method",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.utilities.name_validator",
        "documentation": {}
    },
    {
        "label": "_API_VERSION_REGEX",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.utilities.name_validator",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.utilities.name_validator",
        "peekOfCode": "_API_VERSION_REGEX = re.compile(r'[a-z0-9][a-zA-Z0-9._-]*$')\nclass ValidationError(ValueError):\n  pass\ndef Validate(name):\n  \"\"\"Validates the name against a regular expression object.\n  If the name matches the regular expression, we return nothing.\n  If the name fails to match, we generate an exception.\n  Args:\n    name: (str) name of variable or method\n  Returns:",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.utilities.name_validator",
        "documentation": {}
    },
    {
        "label": "_OrderedSetBase",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.utilities.ordered_set",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.utilities.ordered_set",
        "peekOfCode": "class _OrderedSetBase(object):\n  def __init__(self, iterable=None):\n    self._set = collections.OrderedDict()\n    if iterable:\n      for i in iterable:\n        self._set[i] = 1\n  def __len__(self):\n    return len(self._set)\n  def __contains__(self, thing):\n    return thing in self._set",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.utilities.ordered_set",
        "documentation": {}
    },
    {
        "label": "_MutableSetBase",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.utilities.ordered_set",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.utilities.ordered_set",
        "peekOfCode": "class _MutableSetBase(_OrderedSetBase):\n  def add(self, thing):  # pylint:disable=g-bad-name\n    self._set[thing] = 1\n  def discard(self, thing):  # pylint:disable=g-bad-name\n    if thing in self._set:\n      del self._set[thing]\n  def clear(self):  # pylint:disable=g-bad-name\n    self._set.clear()\nclass FrozenOrderedSet(_OrderedSetBase, collections.abc.Set,\n                       collections.abc.Hashable):",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.utilities.ordered_set",
        "documentation": {}
    },
    {
        "label": "FrozenOrderedSet",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.utilities.ordered_set",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.utilities.ordered_set",
        "peekOfCode": "class FrozenOrderedSet(_OrderedSetBase, collections.abc.Set,\n                       collections.abc.Hashable):\n  __hash__ = collections.abc.Set._hash\nclass MutableOrderedSet(_MutableSetBase, collections.abc.MutableSet):\n  pass",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.utilities.ordered_set",
        "documentation": {}
    },
    {
        "label": "MutableOrderedSet",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.utilities.ordered_set",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.utilities.ordered_set",
        "peekOfCode": "class MutableOrderedSet(_MutableSetBase, collections.abc.MutableSet):\n  pass",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.utilities.ordered_set",
        "documentation": {}
    },
    {
        "label": "Api",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.api",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.api",
        "peekOfCode": "class Api(template_objects.CodeObject):\n  \"\"\"An API definition.\n  This class holds a discovery centric definition of an API. It contains\n  members such as \"resources\" and \"schemas\" which relate directly to discovery\n  concepts. It defines several properties that can be used in code generation\n  templates:\n    name: The API name.\n    version: The API version.\n    versionNoDots: The API version with all '.' characters replaced with '_'.\n        This is typically used in class names.",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.api",
        "documentation": {}
    },
    {
        "label": "Resource",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.api",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.api",
        "peekOfCode": "class Resource(template_objects.CodeObject):\n  \"\"\"The definition of a resource.\n  Resources are a fiction of the Apiary stack and Discovery. When they detect a\n  pattern of method names of the form   api.<common_name>.get|put..., two\n  things happen:\n    The stack might synthesize a patch method from get and put. Discovery sees\n      and reports that new method, so we have no more special processing here.\n    Discovery clusters methods into a resource named by the common_name.\n  Since the common part might have dots in it, you can end up with a hierarchy\n  of resources.",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.api",
        "documentation": {}
    },
    {
        "label": "AuthScope",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.api",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.api",
        "peekOfCode": "class AuthScope(template_objects.CodeObject):\n  \"\"\"The definition of an auth scope.\n  An AuthScope defines these template values\n    value: The scope url\n    name: a sanitized version of the value, transformed so it generally can\n          be used as an indentifier in code. Deprecated, use constantName\n    description: the description of the scope.\n  It also provides a template property which can be used after a language\n  binding is set.\n    constantName: A transformation of the value so it is suitable as a constant",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.api",
        "documentation": {}
    },
    {
        "label": "Method",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.api",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.api",
        "peekOfCode": "class Method(template_objects.CodeObject):\n  \"\"\"The definition of a method.\"\"\"\n  def __init__(self, api, name, def_dict, parent=None):\n    \"\"\"Construct a method.\n    Methods in REST discovery are inside of a resource. Note that the method\n    name and id are calculable from each other. id will always be equal to\n    api_name.resource_name[.sub_resource...].method_name.  At least it should\n    be, as that is the transformation Discovery makes from the API definition,\n    which is essentially a flat list of methods, into a hierarchy of resources.\n    Args:",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.api",
        "documentation": {}
    },
    {
        "label": "Parameter",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.api",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.api",
        "peekOfCode": "class Parameter(template_objects.CodeObject):\n  \"\"\"The definition of a method parameter.\"\"\"\n  def __init__(self, api, name, def_dict, method):\n    super(Parameter, self).__init__(def_dict, api, parent=method,\n                                    wire_name=name)\n    self.ValidateName(name)\n    self.schema = api\n    # TODO(user): Deal with dots in names better. What we should do is:\n    # For x.y, x.z create a little class X, with members y and z. Then\n    # have the constructor method take an X.",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.api",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.api",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.api",
        "peekOfCode": "__author__ = 'aiuto@google.com (Tony Aiuto)'\nimport json\nimport logging\nimport operator\nimport six\nimport functools\nfrom six.moves.urllib import parse as urlparse\nfrom googleapis.codegen import data_types\nfrom googleapis.codegen import template_objects\nfrom googleapis.codegen import utilities",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.api",
        "documentation": {}
    },
    {
        "label": "_DEFAULT_SERVICE_HOST",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.api",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.api",
        "peekOfCode": "_DEFAULT_SERVICE_HOST = 'www.googleapis.com'\n_DEFAULT_OWNER_DOMAIN = 'google.com'\n_DEFAULT_OWNER_NAME = 'Google'\n_RECOGNIZED_GOOGLE_DOMAINS = (\n    'google.com',\n    'googleapis.com',\n    'googleplex.com'\n)\n# Recognized names of request and response fields used for paging.\n_PAGE_TOKEN_NAMES = ('pageToken', 'nextPageToken')",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.api",
        "documentation": {}
    },
    {
        "label": "_DEFAULT_OWNER_DOMAIN",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.api",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.api",
        "peekOfCode": "_DEFAULT_OWNER_DOMAIN = 'google.com'\n_DEFAULT_OWNER_NAME = 'Google'\n_RECOGNIZED_GOOGLE_DOMAINS = (\n    'google.com',\n    'googleapis.com',\n    'googleplex.com'\n)\n# Recognized names of request and response fields used for paging.\n_PAGE_TOKEN_NAMES = ('pageToken', 'nextPageToken')\n_LOGGER = logging.getLogger('codegen')",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.api",
        "documentation": {}
    },
    {
        "label": "_DEFAULT_OWNER_NAME",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.api",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.api",
        "peekOfCode": "_DEFAULT_OWNER_NAME = 'Google'\n_RECOGNIZED_GOOGLE_DOMAINS = (\n    'google.com',\n    'googleapis.com',\n    'googleplex.com'\n)\n# Recognized names of request and response fields used for paging.\n_PAGE_TOKEN_NAMES = ('pageToken', 'nextPageToken')\n_LOGGER = logging.getLogger('codegen')\nclass Api(template_objects.CodeObject):",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.api",
        "documentation": {}
    },
    {
        "label": "_RECOGNIZED_GOOGLE_DOMAINS",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.api",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.api",
        "peekOfCode": "_RECOGNIZED_GOOGLE_DOMAINS = (\n    'google.com',\n    'googleapis.com',\n    'googleplex.com'\n)\n# Recognized names of request and response fields used for paging.\n_PAGE_TOKEN_NAMES = ('pageToken', 'nextPageToken')\n_LOGGER = logging.getLogger('codegen')\nclass Api(template_objects.CodeObject):\n  \"\"\"An API definition.",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.api",
        "documentation": {}
    },
    {
        "label": "_PAGE_TOKEN_NAMES",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.api",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.api",
        "peekOfCode": "_PAGE_TOKEN_NAMES = ('pageToken', 'nextPageToken')\n_LOGGER = logging.getLogger('codegen')\nclass Api(template_objects.CodeObject):\n  \"\"\"An API definition.\n  This class holds a discovery centric definition of an API. It contains\n  members such as \"resources\" and \"schemas\" which relate directly to discovery\n  concepts. It defines several properties that can be used in code generation\n  templates:\n    name: The API name.\n    version: The API version.",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.api",
        "documentation": {}
    },
    {
        "label": "_LOGGER",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.api",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.api",
        "peekOfCode": "_LOGGER = logging.getLogger('codegen')\nclass Api(template_objects.CodeObject):\n  \"\"\"An API definition.\n  This class holds a discovery centric definition of an API. It contains\n  members such as \"resources\" and \"schemas\" which relate directly to discovery\n  concepts. It defines several properties that can be used in code generation\n  templates:\n    name: The API name.\n    version: The API version.\n    versionNoDots: The API version with all '.' characters replaced with '_'.",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.api",
        "documentation": {}
    },
    {
        "label": "ApiException",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.api_exception",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.api_exception",
        "peekOfCode": "class ApiException(Exception):\n  \"\"\"The base class for all API parsing exceptions.\"\"\"\n  def __init__(self, reason, def_dict=None):\n    \"\"\"Create an exception.\n    Args:\n      reason: (str) The human readable explanation of this exception.\n      def_dict: (dict) The discovery dictionary we failed on.\n    \"\"\"\n    super(ApiException, self).__init__()\n    self._reason = reason",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.api_exception",
        "documentation": {}
    },
    {
        "label": "ApiLibraryGenerator",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.api_library_generator",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.api_library_generator",
        "peekOfCode": "class ApiLibraryGenerator(TemplateGenerator):\n  \"\"\"TemplateGenerator specialization which produces an API library.\"\"\"\n  def __init__(self, api_loader, discovery, language, language_model=None,\n               options=None):\n    \"\"\"Construct an ApiLibraryGenerator.\n    Args:\n      api_loader: (Api) Method which can construct an Api from discovery.\n      discovery: (dict) A discovery definition.\n      language: (str) The target language name. This has no semantic meaning\n          other than to specify the template set to use.",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.api_library_generator",
        "documentation": {}
    },
    {
        "label": "NullLibraryGenerator",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.api_library_generator",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.api_library_generator",
        "peekOfCode": "class NullLibraryGenerator(ApiLibraryGenerator):\n  \"\"\"Used to flag a language that doesn't do library generation.\"\"\"\n  pass",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.api_library_generator",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.api_library_generator",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.api_library_generator",
        "peekOfCode": "__author__ = 'aiuto@google.com (Tony Aiuto)'\nfrom googleapis.codegen.generator import TemplateGenerator\nclass ApiLibraryGenerator(TemplateGenerator):\n  \"\"\"TemplateGenerator specialization which produces an API library.\"\"\"\n  def __init__(self, api_loader, discovery, language, language_model=None,\n               options=None):\n    \"\"\"Construct an ApiLibraryGenerator.\n    Args:\n      api_loader: (Api) Method which can construct an Api from discovery.\n      discovery: (dict) A discovery definition.",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.api_library_generator",
        "documentation": {}
    },
    {
        "label": "DataType",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.data_types",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.data_types",
        "peekOfCode": "class DataType(template_objects.CodeObject):\n  \"\"\"Template object which represents a data type.\n  This is the base class for things which might be data type definitions, such\n  as Schema objects derived from JSONSchema blocks or primitive types.\n  \"\"\"\n  def __init__(self, def_dict, api, parent=None, language_model=None):\n    \"\"\"Construct a DataType.\n    Args:\n      def_dict: (dict) The discovery dictionary for this element.\n      api: (Api) The Api instance which owns this element.",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.data_types",
        "documentation": {}
    },
    {
        "label": "PrimitiveDataType",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.data_types",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.data_types",
        "peekOfCode": "class PrimitiveDataType(DataType):\n  \"\"\"DataType which represents a \"built in\" data type.\n  Primitive types are those which are provided by the language or one of its\n  packages, rather than those defined by the API.  A language specific\n  generater should annotate PrimitiveDataType objects with a specific codeType\n  before using them to generate code.\n  \"\"\"\n  def __init__(self, def_dict, api, parent=None):\n    \"\"\"Construct a PrimitiveDataType.\n    Args:",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.data_types",
        "documentation": {}
    },
    {
        "label": "ComplexDataType",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.data_types",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.data_types",
        "peekOfCode": "class ComplexDataType(DataType):\n  \"\"\"A DataType which requires a definition: that is, not primitive.\n  ComplexDataTypes are structured objects and containers of objects.\n  \"\"\"\n  def __init__(self, default_name, def_dict, api, parent=None,\n               language_model=None, wire_name=None):\n    \"\"\"Construct an ComplexDataType.\n    Args:\n      default_name: (str) The name to give this type if there is no 'id' in\n        the default dict.",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.data_types",
        "documentation": {}
    },
    {
        "label": "ContainerDataType",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.data_types",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.data_types",
        "peekOfCode": "class ContainerDataType(ComplexDataType):\n  \"\"\"Superclass for all DataTypes which represent containers.\"\"\"\n  def __init__(self, name, base_type, parent=None, wire_name=None):\n    \"\"\"Construct an ArrayDataType.\n    Args:\n      name: (str) The name to give this type if there is no 'id' in\n        the default dict.\n      base_type: (DataType) The DataType to represent an array of.\n      parent: (TemplateObject) The parent of this object.\n      wire_name: (str) The identifier used in the wire protocol for this object.",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.data_types",
        "documentation": {}
    },
    {
        "label": "ArrayDataType",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.data_types",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.data_types",
        "peekOfCode": "class ArrayDataType(ContainerDataType):\n  \"\"\"DataType which represents a array of another DataType.\"\"\"\n  def __init__(self, name, base_type, parent=None, wire_name=None):\n    \"\"\"Construct an ArrayDataType.\n    Args:\n      name: (str) The name to give this type.\n      base_type: (DataType) The DataType to represent an array of.\n      parent: (TemplateObject) The parent of this object.\n      wire_name: (str) The identifier used in the wire protocol for this object.\n    \"\"\"",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.data_types",
        "documentation": {}
    },
    {
        "label": "MapDataType",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.data_types",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.data_types",
        "peekOfCode": "class MapDataType(ContainerDataType):\n  \"\"\"DataType which represents a map of string to another DataType.\n  This is the base class for things which might be data type definitions, such\n  as Schema objects derived from JSONSchema blocks or primitive types.\n  \"\"\"\n  def __init__(self, name, base_type, parent=None, wire_name=None):\n    \"\"\"Construct a MapDataType.\n    Args:\n      name: (str) The name to give this type.\n      base_type: (DataType) The DataType to represent an map of string to.",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.data_types",
        "documentation": {}
    },
    {
        "label": "SchemaReference",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.data_types",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.data_types",
        "peekOfCode": "class SchemaReference(DataType):\n  \"\"\"DataType which represents a type alias to named schema.\n  Provides a lazy reference to schema by name.\n  \"\"\"\n  def __init__(self, referenced_schema_name, api):\n    \"\"\"Construct a SchemaReference.\n    Args:\n      referenced_schema_name: (str) The name of the schema we are referencing.\n      api: (Api) The Api instance which owns this element.\n    Returns:",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.data_types",
        "documentation": {}
    },
    {
        "label": "Void",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.data_types",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.data_types",
        "peekOfCode": "class Void(PrimitiveDataType):\n  \"\"\"DataType which represents a 'void'.\n  Some API methods have no response. To provide some consistency in assigning\n  a responseType to these methods, we use the Void data type. When it is\n  referenced in a template, it forwards requests for it's code_type to a\n  langauge model specific emitter.\n  \"\"\"\n  def __init__(self, api):\n    \"\"\"Construct a Void.\n    Args:",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.data_types",
        "documentation": {}
    },
    {
        "label": "Enum",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.data_types",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.data_types",
        "peekOfCode": "class Enum(PrimitiveDataType):\n  \"\"\"The definition of an Enum.\n  Example enum in discovery.\n    \"enum\": [\n        \"@comments\",\n        \"@consumption\",\n        \"@liked\",\n        \"@public\",\n        \"@self\"\n       ],",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.data_types",
        "documentation": {}
    },
    {
        "label": "CreatePrimitiveDataType",
        "kind": 2,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.data_types",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.data_types",
        "peekOfCode": "def CreatePrimitiveDataType(def_dict, api, wire_name, parent=None):\n  \"\"\"Creates a PrimitiveDataType from a JSON dictionary.\n  Creates a primitive built in type or an enum for a blob of json.\n  Args:\n    def_dict: (dict) The discovery dictionary for this element.\n    api: (Api) The Api instance which owns this element.\n    wire_name: (str) The identifier used in the wire protocol for this object.\n    parent: (TemplateObject) The parent of this object.\n  Returns:\n    (PrimitiveDataType) A data type.",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.data_types",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.data_types",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.data_types",
        "peekOfCode": "__author__ = 'aiuto@google.com (Tony Aiuto)'\nfrom googleapis.codegen import template_objects\nclass DataType(template_objects.CodeObject):\n  \"\"\"Template object which represents a data type.\n  This is the base class for things which might be data type definitions, such\n  as Schema objects derived from JSONSchema blocks or primitive types.\n  \"\"\"\n  def __init__(self, def_dict, api, parent=None, language_model=None):\n    \"\"\"Construct a DataType.\n    Args:",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.data_types",
        "documentation": {}
    },
    {
        "label": "DataValue",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.data_value",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.data_value",
        "peekOfCode": "class DataValue(template_objects.CodeObject):\n  \"\"\"Provide a reasonable value wrapper for converting types to strings.\"\"\"\n  def __init__(self, value, val_type):\n    # Because val_type could be a schema and DataObject tries to deepcopy\n    # the definition dictionary when schemas store CodeObjects in their\n    # _def_dicts. Sidestep this part.\n    super(DataValue, self).__init__(\n        {}, api=val_type.api, parent=val_type.parent)\n    self._def_dict = val_type.values\n    # Type may be passed in wrapped in a Property/Parameter object...",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.data_value",
        "documentation": {}
    },
    {
        "label": "DjangoRenderTemplate",
        "kind": 2,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.django_helpers",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.django_helpers",
        "peekOfCode": "def DjangoRenderTemplate(template_path, context_dict):\n  \"\"\"Renders a template specified by a file path with a give values dict.\n  Args:\n    template_path: (str) Path to file.\n    context_dict: (dict) The dictionary to use for template evaluation.\n  Returns:\n    (str) The expanded template.\n  \"\"\"\n  source = six.ensure_str(files.GetFileContents(template_path))\n  return _DjangoRenderTemplateSource(source, context_dict)",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.django_helpers",
        "documentation": {}
    },
    {
        "label": "DjangoTemplate",
        "kind": 2,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.django_helpers",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.django_helpers",
        "peekOfCode": "def DjangoTemplate(source):\n  \"\"\"Returns a template configured for our default engine.\n  Args:\n    source: (str) Template source.\n  Returns:\n    (django.template.Template)\n  \"\"\"\n  return django_template.Template(source, engine=_ENGINE)\ndef _DjangoRenderTemplateSource(template_source, context_dict):\n  \"\"\"Renders the given template source with the given values dict.",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.django_helpers",
        "documentation": {}
    },
    {
        "label": "MarkSafe",
        "kind": 2,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.django_helpers",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.django_helpers",
        "peekOfCode": "def MarkSafe(s):\n  return django_utils.safestring.mark_safe(s)",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.django_helpers",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.django_helpers",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.django_helpers",
        "peekOfCode": "__author__ = 'aiuto@google.com (Tony Aiuto)'\nimport os\nfrom django import template as django_template\nfrom django import utils as django_utils\nfrom django.conf import settings\nimport six\n# COV_NF_START\ntry:\n  # In AppEngine, we have to call use_library() in our main. Doing that causes\n  # an error, which we can safely ignore because use_library did it",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.django_helpers",
        "documentation": {}
    },
    {
        "label": "_ENGINE",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.django_helpers",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.django_helpers",
        "peekOfCode": "_ENGINE = django_template.engine.Engine(\n    builtins=['googleapis.codegen.template_helpers'])\ndef DjangoRenderTemplate(template_path, context_dict):\n  \"\"\"Renders a template specified by a file path with a give values dict.\n  Args:\n    template_path: (str) Path to file.\n    context_dict: (dict) The dictionary to use for template evaluation.\n  Returns:\n    (str) The expanded template.\n  \"\"\"",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.django_helpers",
        "documentation": {}
    },
    {
        "label": "TemplateExpander",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.expand_templates",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.expand_templates",
        "peekOfCode": "class TemplateExpander(generator.TemplateGenerator):\n  def __init__(self, api, options=None):\n    super(TemplateExpander, self).__init__(options=options)\n    self._api = api\n  def GeneratePackage(self, package_writer):\n    \"\"\"Walk the templates and generate output.\n    Overrides the default.\n    Args:\n      package_writer: (LibraryPackage) output package\n    \"\"\"",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.expand_templates",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.expand_templates",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.expand_templates",
        "peekOfCode": "def main(unused_argv):\n  if not FLAGS.discovery:\n    raise app.UsageError('You must specify --discovery')\n  if not (FLAGS.output_dir or FLAGS.output_file):\n    raise app.UsageError(\n        'You must specify one of --output_dir or --output_file')\n  if not FLAGS.templates:\n    raise app.UsageError('You must specify --templates')\n  f = open(FLAGS.discovery)\n  discovery_doc = json.loads(f.read())",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.expand_templates",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.expand_templates",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.expand_templates",
        "peekOfCode": "__author__ = 'aiuto@google.com (Tony Aiuto)'\nimport json\nimport os\nfrom absl import app\nfrom absl import flags\nfrom googleapis.codegen import generator\nfrom googleapis.codegen import generator_lookup\nfrom googleapis.codegen import language_model\nfrom googleapis.codegen.api import Api\nfrom googleapis.codegen.filesys import package_writer_foundry",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.expand_templates",
        "documentation": {}
    },
    {
        "label": "FLAGS",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.expand_templates",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.expand_templates",
        "peekOfCode": "FLAGS = flags.FLAGS\nflags.DEFINE_string(\n    'discovery',\n    None,\n    'A discovery document captured from a discovery service.')\nflags.DEFINE_boolean(\n    'include_timestamp',\n    False,\n    'Adds a timestamp to the generated source files.')\nflags.DEFINE_enum(",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.expand_templates",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.generate_library",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.generate_library",
        "peekOfCode": "def main(unused_argv):\n  if not (FLAGS.api_name or FLAGS.input):\n    raise app.UsageError('You must specify one of --api_name or --input')\n  if FLAGS.api_name and FLAGS.input:\n    raise app.UsageError(\n        'You can only specify one of --api_name or --input')\n  if not (FLAGS.output_dir or FLAGS.output_file):\n    raise app.UsageError(\n        'You must specify one of --output_dir or --output_file')\n  if FLAGS.output_dir and FLAGS.output_file:",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.generate_library",
        "documentation": {}
    },
    {
        "label": "Generate",
        "kind": 2,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.generate_library",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.generate_library",
        "peekOfCode": "def Generate(discovery_doc, package_writer,\n             include_timestamp=False,\n             version_package=False,\n             package_path=None,\n             output_type='plain',\n             language='php',\n             language_variant='default',\n             callback=None):\n  \"\"\"Generate a library package from discovery and options.\"\"\"\n  options = {",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.generate_library",
        "documentation": {}
    },
    {
        "label": "GetApiDiscovery",
        "kind": 2,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.generate_library",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.generate_library",
        "peekOfCode": "def GetApiDiscovery(api_name, api_version):\n  \"\"\"Get a discovery doc from the discovery server.\"\"\"\n  api_path = 'apis/%s/%s/rest' % (api_name, api_version)\n  discovery_url = 'https://%s/discovery/%s/%s' % (\n      FLAGS.discovery_server, FLAGS.discovery_version, api_path)\n  http = httplib2.Http()\n  _, content = http.request(discovery_url)\n  discovery_doc = json.loads(content)\n  error = discovery_doc.get('error')\n  if error:",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.generate_library",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.generate_library",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.generate_library",
        "peekOfCode": "__author__ = 'aiuto@google.com (Tony Aiuto)'\nimport collections\nimport json\nimport logging\nimport os\nfrom absl import app\nfrom absl import flags\nimport httplib2\nimport six\nfrom googleapis.codegen import generator_lookup",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.generate_library",
        "documentation": {}
    },
    {
        "label": "FLAGS",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.generate_library",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.generate_library",
        "peekOfCode": "FLAGS = flags.FLAGS\nflags.DEFINE_string(\n    'api_name',\n    None,\n    'API to generate for.  E.g. \"plus\".')\nflags.DEFINE_string(\n    'api_version',\n    None,\n    'version of \"api_name\" to generate for.  E.g. \"v1\".')\nflags.DEFINE_string(",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.generate_library",
        "documentation": {}
    },
    {
        "label": "TemplateGenerator",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.generator",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.generator",
        "peekOfCode": "class TemplateGenerator(object):\n  \"\"\"Base class for walking a template tree to generate output files.\n  This class provides methods for processing template trees to produce output\n  trees.\n  * Provides a common base dictionary of variables for use in templates.\n  * Callers can augment that with their own dictionary of variables.\n  * Callers can provide a set of replacements to be made to file paths in\n    the template tree\n  \"\"\"\n  def __init__(self, language_model=None, options=None):",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.generator",
        "documentation": {}
    },
    {
        "label": "ToolInformation",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.generator",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.generator",
        "peekOfCode": "class ToolInformation(UseableInTemplates):\n  \"\"\"Defines information about this generator tool itself.\"\"\"\n  def __init__(self):\n    super(ToolInformation, self).__init__(_GENERATOR_INFORMATION)\n    now = datetime.datetime.utcnow()\n    self.SetTemplateValue('runDate',\n                          '%4d-%02d-%02d' % (now.year, now.month, now.day))\n    self.SetTemplateValue(\n        'runTime',\n        '%02d:%02d:%02d UTC' % (now.hour, now.minute, now.second))",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.generator",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.generator",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.generator",
        "peekOfCode": "__author__ = 'aiuto@google.com (Tony Aiuto)'\nimport datetime\nimport io\nimport os\nimport re\nimport time\nimport zipfile\nimport six\nfrom googleapis.codegen.django_helpers import DjangoRenderTemplate\nfrom googleapis.codegen.language_model import LanguageModel",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.generator",
        "documentation": {}
    },
    {
        "label": "_GENERATOR_INFORMATION",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.generator",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.generator",
        "peekOfCode": "_GENERATOR_INFORMATION = {\n    'name': 'google-apis-code-generator',\n    'version': '1.6.0',\n    'buildDate': '2019-01-29',\n    }\n# app.yaml and other names that app engine refuses to open.\n# TODO(user) Remove once templates are stored in BlobStore.\n_SPECIAL_FILENAMES = ['app_yaml']\nclass TemplateGenerator(object):\n  \"\"\"Base class for walking a template tree to generate output files.",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.generator",
        "documentation": {}
    },
    {
        "label": "_SPECIAL_FILENAMES",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.generator",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.generator",
        "peekOfCode": "_SPECIAL_FILENAMES = ['app_yaml']\nclass TemplateGenerator(object):\n  \"\"\"Base class for walking a template tree to generate output files.\n  This class provides methods for processing template trees to produce output\n  trees.\n  * Provides a common base dictionary of variables for use in templates.\n  * Callers can augment that with their own dictionary of variables.\n  * Callers can provide a set of replacements to be made to file paths in\n    the template tree\n  \"\"\"",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.generator",
        "documentation": {}
    },
    {
        "label": "GetGeneratorByLanguage",
        "kind": 2,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.generator_lookup",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.generator_lookup",
        "peekOfCode": "def GetGeneratorByLanguage(language_or_generator):\n  \"\"\"Return the appropriate generator for this language.\n  Args:\n    language_or_generator: (str) the language for which to return a generator,\n        or the name of a specific generator.\n  Raises:\n    ValueError: If provided language isn't supported.\n  Returns:\n    The appropriate code generator object (which may be None).\n  \"\"\"",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.generator_lookup",
        "documentation": {}
    },
    {
        "label": "SupportedLanguages",
        "kind": 2,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.generator_lookup",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.generator_lookup",
        "peekOfCode": "def SupportedLanguages():\n  \"\"\"Return the list of languages we support.\n  Returns:\n    list(str)\n  \"\"\"\n  return sorted(_GENERATORS_BY_LANGUAGE)",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.generator_lookup",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.generator_lookup",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.generator_lookup",
        "peekOfCode": "__author__ = 'akesling@google.com (Alex Kesling)'\nfrom googleapis.codegen import php_generator\n# Multiple generators per language are possible, as is the case with\n# Java below. Template trees can specify a specific generator in their\n# features.json file (with the \"generator\" attribute); this will refer\n# to a key in these dictionaries.  If a template tree does not\n# include this specification, the language name is used as a key.\n_GENERATORS_BY_LANGUAGE = {\n  'php': php_generator.PHPGenerator,\n}",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.generator_lookup",
        "documentation": {}
    },
    {
        "label": "_GENERATORS_BY_LANGUAGE",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.generator_lookup",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.generator_lookup",
        "peekOfCode": "_GENERATORS_BY_LANGUAGE = {\n  'php': php_generator.PHPGenerator,\n}\ndef GetGeneratorByLanguage(language_or_generator):\n  \"\"\"Return the appropriate generator for this language.\n  Args:\n    language_or_generator: (str) the language for which to return a generator,\n        or the name of a specific generator.\n  Raises:\n    ValueError: If provided language isn't supported.",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.generator_lookup",
        "documentation": {}
    },
    {
        "label": "ImportDefinition",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.import_definition",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.import_definition",
        "peekOfCode": "class ImportDefinition(object):\n  \"\"\"Contains all required information about an import.\n  Intended for use in the type_format_to_datatype_and_imports dictionaries.\n  \"\"\"\n  def __init__(self, imports=None, template_values=None):\n    \"\"\"Construct a definition of an import.\n    Args:\n      imports: (sequence of str) Contains all imports required by a data type.\n      template_values: (sequence of str) Contains all required additional\n        template values that are required to be set to handle the imports.",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.import_definition",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.import_definition",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.import_definition",
        "peekOfCode": "__author__ = 'rmistry@google.com (Ravi Mistry)'\nclass ImportDefinition(object):\n  \"\"\"Contains all required information about an import.\n  Intended for use in the type_format_to_datatype_and_imports dictionaries.\n  \"\"\"\n  def __init__(self, imports=None, template_values=None):\n    \"\"\"Construct a definition of an import.\n    Args:\n      imports: (sequence of str) Contains all imports required by a data type.\n      template_values: (sequence of str) Contains all required additional",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.import_definition",
        "documentation": {}
    },
    {
        "label": "NamingPolicy",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.language_model",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.language_model",
        "peekOfCode": "class NamingPolicy(object):\n  \"\"\"The policy for transforming a wireName into a language suitable format.\n  A naming policy consists of 3 parameters which define the transformation\n  of a wireName into a particular type of programming language construct. For\n  example, in C++, we might want max-results to be set_max_results when used as\n  a setter and _max_results when used as the name of a member variable. The\n  parameters are\n  case_transform: (enum) The case transform for use for building a name. For\n      the input 'hello worlD', the choices yield:\n          language_model.PRESERVE_CASE => hello worlD",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.language_model",
        "documentation": {}
    },
    {
        "label": "LanguageModel",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.language_model",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.language_model",
        "peekOfCode": "class LanguageModel(object):\n  \"\"\"The base class for all LanguageModels.\n  There is a matrix of options of the form {TypeOfName}_{Option}, where the\n  nametype specifies the kind of variable name we want and the option\n  specifies the case transformation, separator or format. The meaning of\n  these three options are:\n  The nametypes we define are\n     array_of: For making a declaration of an array of some data type.\n     class_name: For making a name for a class.\n     constant: For making a name for a constant.",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.language_model",
        "documentation": {}
    },
    {
        "label": "DocumentingLanguageModel",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.language_model",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.language_model",
        "peekOfCode": "class DocumentingLanguageModel(LanguageModel):\n  \"\"\"A language model which displays things in a way humans can read.\n  This model is useful for language neutral expression of an Api.\n  \"\"\"\n  array_of_policy = NamingPolicy(format_string='Array<{name}>')\n  map_of_policy = NamingPolicy(format_string='Map<string, {name}>')\n  class_name_policy = NamingPolicy(case_transform=UPPER_CAMEL_CASE)\n  def GetCodeTypeFromDictionary(self, json_schema):\n    \"\"\"Convert a json schema primitive type into the most suitable class name.\n    Subclasses should override as appropriate.",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.language_model",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.language_model",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.language_model",
        "peekOfCode": "__author__ = 'aiuto@google.com (Tony Aiuto)'\nfrom googleapis.codegen import utilities\n# Types of variable name case transforms. E.g. \"hello worLd\"\nPRESERVE_CASE = 0  # hello worLd\nLOWER_CASE = 1  # hello world\nUPPER_CASE = 2  # HELLO WORLD\nLOWER_CAMEL_CASE = 3  # hello WorLd\nUPPER_CAMEL_CASE = 4  # Hello WorLd\nLOWER_UNCAMEL_CASE = 5  # hello wor ld\nUPPER_UNCAMEL_CASE = 6  # HELLO WOR LD",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.language_model",
        "documentation": {}
    },
    {
        "label": "PRESERVE_CASE",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.language_model",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.language_model",
        "peekOfCode": "PRESERVE_CASE = 0  # hello worLd\nLOWER_CASE = 1  # hello world\nUPPER_CASE = 2  # HELLO WORLD\nLOWER_CAMEL_CASE = 3  # hello WorLd\nUPPER_CAMEL_CASE = 4  # Hello WorLd\nLOWER_UNCAMEL_CASE = 5  # hello wor ld\nUPPER_UNCAMEL_CASE = 6  # HELLO WOR LD\nCAP_FIRST = 7  # Hello worLd\n# AtSignPolicy - policies for replacing '@' in names\nATSIGN_STRIP = 0  # Strip @",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.language_model",
        "documentation": {}
    },
    {
        "label": "LOWER_CASE",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.language_model",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.language_model",
        "peekOfCode": "LOWER_CASE = 1  # hello world\nUPPER_CASE = 2  # HELLO WORLD\nLOWER_CAMEL_CASE = 3  # hello WorLd\nUPPER_CAMEL_CASE = 4  # Hello WorLd\nLOWER_UNCAMEL_CASE = 5  # hello wor ld\nUPPER_UNCAMEL_CASE = 6  # HELLO WOR LD\nCAP_FIRST = 7  # Hello worLd\n# AtSignPolicy - policies for replacing '@' in names\nATSIGN_STRIP = 0  # Strip @\nATSIGN_BREAK = 1  # Treat @ as a word break",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.language_model",
        "documentation": {}
    },
    {
        "label": "UPPER_CASE",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.language_model",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.language_model",
        "peekOfCode": "UPPER_CASE = 2  # HELLO WORLD\nLOWER_CAMEL_CASE = 3  # hello WorLd\nUPPER_CAMEL_CASE = 4  # Hello WorLd\nLOWER_UNCAMEL_CASE = 5  # hello wor ld\nUPPER_UNCAMEL_CASE = 6  # HELLO WOR LD\nCAP_FIRST = 7  # Hello worLd\n# AtSignPolicy - policies for replacing '@' in names\nATSIGN_STRIP = 0  # Strip @\nATSIGN_BREAK = 1  # Treat @ as a word break\nclass NamingPolicy(object):",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.language_model",
        "documentation": {}
    },
    {
        "label": "LOWER_CAMEL_CASE",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.language_model",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.language_model",
        "peekOfCode": "LOWER_CAMEL_CASE = 3  # hello WorLd\nUPPER_CAMEL_CASE = 4  # Hello WorLd\nLOWER_UNCAMEL_CASE = 5  # hello wor ld\nUPPER_UNCAMEL_CASE = 6  # HELLO WOR LD\nCAP_FIRST = 7  # Hello worLd\n# AtSignPolicy - policies for replacing '@' in names\nATSIGN_STRIP = 0  # Strip @\nATSIGN_BREAK = 1  # Treat @ as a word break\nclass NamingPolicy(object):\n  \"\"\"The policy for transforming a wireName into a language suitable format.",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.language_model",
        "documentation": {}
    },
    {
        "label": "UPPER_CAMEL_CASE",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.language_model",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.language_model",
        "peekOfCode": "UPPER_CAMEL_CASE = 4  # Hello WorLd\nLOWER_UNCAMEL_CASE = 5  # hello wor ld\nUPPER_UNCAMEL_CASE = 6  # HELLO WOR LD\nCAP_FIRST = 7  # Hello worLd\n# AtSignPolicy - policies for replacing '@' in names\nATSIGN_STRIP = 0  # Strip @\nATSIGN_BREAK = 1  # Treat @ as a word break\nclass NamingPolicy(object):\n  \"\"\"The policy for transforming a wireName into a language suitable format.\n  A naming policy consists of 3 parameters which define the transformation",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.language_model",
        "documentation": {}
    },
    {
        "label": "LOWER_UNCAMEL_CASE",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.language_model",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.language_model",
        "peekOfCode": "LOWER_UNCAMEL_CASE = 5  # hello wor ld\nUPPER_UNCAMEL_CASE = 6  # HELLO WOR LD\nCAP_FIRST = 7  # Hello worLd\n# AtSignPolicy - policies for replacing '@' in names\nATSIGN_STRIP = 0  # Strip @\nATSIGN_BREAK = 1  # Treat @ as a word break\nclass NamingPolicy(object):\n  \"\"\"The policy for transforming a wireName into a language suitable format.\n  A naming policy consists of 3 parameters which define the transformation\n  of a wireName into a particular type of programming language construct. For",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.language_model",
        "documentation": {}
    },
    {
        "label": "UPPER_UNCAMEL_CASE",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.language_model",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.language_model",
        "peekOfCode": "UPPER_UNCAMEL_CASE = 6  # HELLO WOR LD\nCAP_FIRST = 7  # Hello worLd\n# AtSignPolicy - policies for replacing '@' in names\nATSIGN_STRIP = 0  # Strip @\nATSIGN_BREAK = 1  # Treat @ as a word break\nclass NamingPolicy(object):\n  \"\"\"The policy for transforming a wireName into a language suitable format.\n  A naming policy consists of 3 parameters which define the transformation\n  of a wireName into a particular type of programming language construct. For\n  example, in C++, we might want max-results to be set_max_results when used as",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.language_model",
        "documentation": {}
    },
    {
        "label": "CAP_FIRST",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.language_model",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.language_model",
        "peekOfCode": "CAP_FIRST = 7  # Hello worLd\n# AtSignPolicy - policies for replacing '@' in names\nATSIGN_STRIP = 0  # Strip @\nATSIGN_BREAK = 1  # Treat @ as a word break\nclass NamingPolicy(object):\n  \"\"\"The policy for transforming a wireName into a language suitable format.\n  A naming policy consists of 3 parameters which define the transformation\n  of a wireName into a particular type of programming language construct. For\n  example, in C++, we might want max-results to be set_max_results when used as\n  a setter and _max_results when used as the name of a member variable. The",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.language_model",
        "documentation": {}
    },
    {
        "label": "ATSIGN_STRIP",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.language_model",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.language_model",
        "peekOfCode": "ATSIGN_STRIP = 0  # Strip @\nATSIGN_BREAK = 1  # Treat @ as a word break\nclass NamingPolicy(object):\n  \"\"\"The policy for transforming a wireName into a language suitable format.\n  A naming policy consists of 3 parameters which define the transformation\n  of a wireName into a particular type of programming language construct. For\n  example, in C++, we might want max-results to be set_max_results when used as\n  a setter and _max_results when used as the name of a member variable. The\n  parameters are\n  case_transform: (enum) The case transform for use for building a name. For",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.language_model",
        "documentation": {}
    },
    {
        "label": "ATSIGN_BREAK",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.language_model",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.language_model",
        "peekOfCode": "ATSIGN_BREAK = 1  # Treat @ as a word break\nclass NamingPolicy(object):\n  \"\"\"The policy for transforming a wireName into a language suitable format.\n  A naming policy consists of 3 parameters which define the transformation\n  of a wireName into a particular type of programming language construct. For\n  example, in C++, we might want max-results to be set_max_results when used as\n  a setter and _max_results when used as the name of a member variable. The\n  parameters are\n  case_transform: (enum) The case transform for use for building a name. For\n      the input 'hello worlD', the choices yield:",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.language_model",
        "documentation": {}
    },
    {
        "label": "PHPGenerator",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.php_generator",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.php_generator",
        "peekOfCode": "class PHPGenerator(api_library_generator.ApiLibraryGenerator):\n  \"\"\"The PHP code generator.\"\"\"\n  def __init__(self, discovery, options=None):\n    \"\"\"Create a new PHPGenerator.\n    Args:\n      discovery: (dict) The discovery document dictionary.\n      options: (dict) A dictionary of options to guide the generator's behavior.\n    \"\"\"\n    super(PHPGenerator, self).__init__(PHPApi, discovery, 'php',\n                                       language_model=PhpLanguageModel(),",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.php_generator",
        "documentation": {}
    },
    {
        "label": "PhpLanguageModel",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.php_generator",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.php_generator",
        "peekOfCode": "class PhpLanguageModel(language_model.LanguageModel):\n  \"\"\"A LanguageModel tunded for PHP.\"\"\"\n  language = 'php'\n  _SCHEMA_TYPE_TO_PHP_TYPE = {\n      'any': 'array',\n      'boolean': 'bool',\n      'integer': 'int',\n      'long': 'string',  # PHP doesn't support long integers.\n      'number': 'double',\n      'string': 'string',",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.php_generator",
        "documentation": {}
    },
    {
        "label": "PHPApi",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.php_generator",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.php_generator",
        "peekOfCode": "class PHPApi(api.Api):\n  \"\"\"An Api with PHP annotations.\"\"\"\n  def __init__(self, discovery_doc, language=None):\n    super(PHPApi, self).__init__(discovery_doc, language)\n    # We've been advised by the open source office that the correct legal thing\n    # to do is to hard-code a copyright date. Generated clients should always\n    # display the year 2014, even if they are generated in subsequent years.\n    self.SetTemplateValue('copyright', 'Copyright 2014 Google Inc.\\n')\n  # pylint: disable=unused-argument\n  # The parameter element_type is deliberately unused since PHP doesn't",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.php_generator",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.php_generator",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.php_generator",
        "peekOfCode": "__author__ = 'chirags@google.com (Chirag Shah)'\nimport collections\nimport json\nimport operator\nfrom googleapis.codegen import api\nfrom googleapis.codegen import api_library_generator\nfrom googleapis.codegen import data_types\nfrom googleapis.codegen import language_model\nfrom googleapis.codegen import utilities\nfrom googleapis.codegen.schema import Schema",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.php_generator",
        "documentation": {}
    },
    {
        "label": "_EXTRA_PROPERTIES",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.php_generator",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.php_generator",
        "peekOfCode": "_EXTRA_PROPERTIES = ['description', 'enumDescriptions', 'resources', 'pattern',\n                     'parameterOrder']\ndef _StripResource(resource):\n  \"\"\"Return a copy of a resource dict with extraneous properties removed.\"\"\"\n  if not isinstance(resource, dict):\n    return resource\n  ret = collections.OrderedDict()\n  for name, value in resource.items():\n    if name not in _EXTRA_PROPERTIES:\n      ret[name] = _StripResource(value)",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.php_generator",
        "documentation": {}
    },
    {
        "label": "PHPApiTest",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.php_generator_test",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.php_generator_test",
        "peekOfCode": "class PHPApiTest(absltest.TestCase):\n  def setUp(self):\n    gen_params = {'name': 'test', 'version': 'v1', 'resources': {}}\n    self.api = php_generator.PHPApi(gen_params)\n    self.generator = php_generator.PHPGenerator(gen_params)\n    self.language_model = php_generator.PhpLanguageModel()\n    # TODO(user): Do what we did for template_helpers and allow language\n    # model to come from global state. Then we don't need this stuff.\n    self.api.VisitAll(lambda o: o.SetLanguageModel(self.language_model))\n  def tearDown(self):",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.php_generator_test",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.php_generator_test",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.php_generator_test",
        "peekOfCode": "__author__ = 'chirags@google.com (Chirag Shah)'\nfrom absl.testing import absltest\nfrom googleapis.codegen import api\nfrom googleapis.codegen import php_generator\nfrom googleapis.codegen import schema\nclass PHPApiTest(absltest.TestCase):\n  def setUp(self):\n    gen_params = {'name': 'test', 'version': 'v1', 'resources': {}}\n    self.api = php_generator.PHPApi(gen_params)\n    self.generator = php_generator.PHPGenerator(gen_params)",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.php_generator_test",
        "documentation": {}
    },
    {
        "label": "Schema",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.schema",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.schema",
        "peekOfCode": "class Schema(data_types.ComplexDataType):\n  \"\"\"The definition of a schema.\"\"\"\n  def __init__(self, api, default_name, def_dict, parent=None):\n    \"\"\"Construct a Schema object from a discovery dictionary.\n    Schemas represent data models in the API.\n    Args:\n      api: (Api) the Api instance owning the Schema\n      default_name: (str) the default name of the Schema. If there is an 'id'\n        member in the definition, that is used for the name instead.\n      def_dict: (dict) a discovery dictionary",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.schema",
        "documentation": {}
    },
    {
        "label": "Property",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.schema",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.schema",
        "peekOfCode": "class Property(template_objects.CodeObject):\n  \"\"\"The definition of a schema property.\n  Example property in the discovery schema:\n      \"id\": {\"type\": \"string\"}\n  \"\"\"\n  def __init__(self, api, schema, name, def_dict, key_for_variants=None):\n    \"\"\"Construct a Property.\n    A Property requires several elements in its template value dictionary which\n    are set here:\n      wireName: the string which labels this Property in the JSON serialization.",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.schema",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.schema",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.schema",
        "peekOfCode": "__author__ = 'aiuto@google.com (Tony Aiuto)'\nimport collections\nimport logging\nfrom googleapis.codegen import data_types\nfrom googleapis.codegen import template_objects\nfrom googleapis.codegen.api_exception import ApiException\n_ADDITIONAL_PROPERTIES = 'additionalProperties'\n_LOGGER = logging.getLogger('codegen')\nclass Schema(data_types.ComplexDataType):\n  \"\"\"The definition of a schema.\"\"\"",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.schema",
        "documentation": {}
    },
    {
        "label": "_ADDITIONAL_PROPERTIES",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.schema",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.schema",
        "peekOfCode": "_ADDITIONAL_PROPERTIES = 'additionalProperties'\n_LOGGER = logging.getLogger('codegen')\nclass Schema(data_types.ComplexDataType):\n  \"\"\"The definition of a schema.\"\"\"\n  def __init__(self, api, default_name, def_dict, parent=None):\n    \"\"\"Construct a Schema object from a discovery dictionary.\n    Schemas represent data models in the API.\n    Args:\n      api: (Api) the Api instance owning the Schema\n      default_name: (str) the default name of the Schema. If there is an 'id'",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.schema",
        "documentation": {}
    },
    {
        "label": "_LOGGER",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.schema",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.schema",
        "peekOfCode": "_LOGGER = logging.getLogger('codegen')\nclass Schema(data_types.ComplexDataType):\n  \"\"\"The definition of a schema.\"\"\"\n  def __init__(self, api, default_name, def_dict, parent=None):\n    \"\"\"Construct a Schema object from a discovery dictionary.\n    Schemas represent data models in the API.\n    Args:\n      api: (Api) the Api instance owning the Schema\n      default_name: (str) the default name of the Schema. If there is an 'id'\n        member in the definition, that is used for the name instead.",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.schema",
        "documentation": {}
    },
    {
        "label": "RunGenerateLibrary",
        "kind": 2,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.script_stubs",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.script_stubs",
        "peekOfCode": "def RunGenerateLibrary():\n  # pylint:disable=g-import-not-at-top\n  from googleapis.codegen import generate_library\n  run_script_module.RunScriptModule(generate_library)\ndef RunExpandTemplates():\n  # pylint:disable=g-import-not-at-top\n  from googleapis.codegen import expand_templates\n  run_script_module.RunScriptModule(expand_templates)",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.script_stubs",
        "documentation": {}
    },
    {
        "label": "RunExpandTemplates",
        "kind": 2,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.script_stubs",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.script_stubs",
        "peekOfCode": "def RunExpandTemplates():\n  # pylint:disable=g-import-not-at-top\n  from googleapis.codegen import expand_templates\n  run_script_module.RunScriptModule(expand_templates)",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.script_stubs",
        "documentation": {}
    },
    {
        "label": "Targets",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.targets",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.targets",
        "peekOfCode": "class Targets(object):\n  \"\"\"Targets maintains the list of possible target options.\n  Reads targets.json file in local directory. This file is formatted\n  as:\n  {\n  'languages': {\n    'languageA': {\n      'surface_option1': {\n        'path': 'stable',\n        'description': 'something about language A',",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.targets",
        "documentation": {}
    },
    {
        "label": "Variations",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.targets",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.targets",
        "peekOfCode": "class Variations(dict):\n  \"\"\"A set of variations available for a particular language.\"\"\"\n  def __init__(self, targets, language, variations_dict):\n    super(Variations, self).__init__(variations_dict)\n    self._targets = targets\n    self._language = language\n  def IsValid(self, variation):\n    \"\"\"Test is a variation exists.\"\"\"\n    return variation in self\n  def _RelativeTemplateDir(self, variation):",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.targets",
        "documentation": {}
    },
    {
        "label": "Features",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.targets",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.targets",
        "peekOfCode": "class Features(dict):\n  \"\"\"A dictionary describing the features of a particular API variation.\"\"\"\n  # TODO(user): Do we need initial_content? The only thing we see in it is\n  # path, which should be set explicitly to the dirname of the real file path.\n  def __init__(self, template_dir, initial_content=None, name=None):\n    super(Features, self).__init__(initial_content or {})\n    self.name = name\n    self.template_dir = template_dir\n    if 'path' not in self:\n      self['path'] = os.path.basename(template_dir)",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.targets",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.targets",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.targets",
        "peekOfCode": "__author__ = 'wclarkso@google.com (Will Clarkson)'\nimport logging\nimport os\nfrom googleapis.codegen.filesys import files\nfrom googleapis.codegen.utilities import json_expander\nfrom googleapis.codegen.utilities import json_with_comments\nclass Targets(object):\n  \"\"\"Targets maintains the list of possible target options.\n  Reads targets.json file in local directory. This file is formatted\n  as:",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.targets",
        "documentation": {}
    },
    {
        "label": "CachingTemplateLoader",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "peekOfCode": "class CachingTemplateLoader(object):\n  \"\"\"A template loader that caches templates under stable directories.\"\"\"\n  # A pattern that variation directories will match if they are development\n  # versions that should not be cached.   E.g., \"java/dev/\" or \"java/1.0dev\"\n  UNSTABLE_VARIATION_PATTERN = re.compile(r'^[^/]+/[^/]*dev/')\n  def __init__(self):\n    self._cache = {}\n  def GetTemplate(self, template_path, template_dir):\n    \"\"\"Get a compiled django template.\n    Args:",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "documentation": {}
    },
    {
        "label": "Halt",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "peekOfCode": "class Halt(Exception):\n  \"\"\"The exception raised when a 'halt' tag is encountered.\"\"\"\n  pass\n@register.simple_tag\ndef halt():  # pylint: disable=g-bad-name\n  \"\"\"A tag which raises a Halt exception.\n  Usage:\n    {% if some_condition %}{% halt %}{% endif %}\n  Raises:\n    Halt: always",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "documentation": {}
    },
    {
        "label": "LanguageNode",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "peekOfCode": "class LanguageNode(django_template.Node):\n  \"\"\"Node for language setting.\"\"\"\n  def __init__(self, language):\n    self._language = language\n  def render(self, context):  # pylint: disable=g-bad-name\n    \"\"\"Render the 'language' tag.\n    For the language setting we render nothing, but we take advantage of being\n    passed the context to set language specific things there, so they are\n    usable later.\n    Args:",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "documentation": {}
    },
    {
        "label": "IndentNode",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "peekOfCode": "class IndentNode(django_template.Node):\n  \"\"\"A node which indents its contents based on indent nesting levels.\n  The interior text is re-indented by the existing indent + the indent nesting\n      level * the LEVEL_INDENT\n  \"\"\"\n  def __init__(self, nodelist, levels):\n    self._nodelist = nodelist\n    self._levels = int(levels)\n  def render(self, context):  # pylint: disable=g-bad-name\n    \"\"\"Reindent the block inside the tag scope.\"\"\"",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "documentation": {}
    },
    {
        "label": "CollapsedNewLinesNode",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "peekOfCode": "class CollapsedNewLinesNode(django_template.Node):\n  \"\"\"A node which collapses 3 or more newlines into 2 newlines.\"\"\"\n  def __init__(self, nodelist):\n    self._nodelist = nodelist\n  def render(self, context):  # pylint: disable=g-bad-name\n    \"\"\"Collapses newline inside the tag scope.\"\"\"\n    lines = self._nodelist.render(context)\n    ret = re.sub(r'\\n(\\n)+', '\\n\\n', lines)\n    return ret\n@register.tag(name='collapsenewlines')",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "documentation": {}
    },
    {
        "label": "NoBlankNode",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "peekOfCode": "class NoBlankNode(django_template.Node):\n  \"\"\"Node for remove eols from output.\"\"\"\n  def __init__(self, nodelist, recurse=False, noeol=False):\n    self.nodelist = nodelist\n    self.recurse = recurse\n    self.noeol = noeol\n  def _CleanText(self, text):\n    lines = [line for line in text.splitlines(True)\n             if line.strip()]\n    if self.noeol:",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "documentation": {}
    },
    {
        "label": "DocCommentNode",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "peekOfCode": "class DocCommentNode(django_template.Node):\n  \"\"\"Node for comments which should be formatted as doc-style comments.\"\"\"\n  def __init__(self, text=None, nodelist=None, comment_type=None,\n               wrap_blocks=True):\n    self._text = text\n    self._nodelist = nodelist\n    self._comment_type = comment_type\n    self._wrap_blocks = wrap_blocks\n  def render(self, context):  # pylint: disable=g-bad-name\n    \"\"\"Render the node.\"\"\"",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "documentation": {}
    },
    {
        "label": "CommentIfNode",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "peekOfCode": "class CommentIfNode(DocCommentNode):\n  \"\"\"Node for comments which should only appear if they have text.\n  A CommentIf is a pair of a comment style and a variable name.  If the variable\n  has a value, then a comment will be emmited for it, otherwise nothing is\n  emitted.\n  \"\"\"\n  def __init__(self, variable_name, comment_type=None):\n    super(CommentIfNode, self).__init__(comment_type=comment_type)\n    self._variable_name = variable_name\n  def render(self, context):  # pylint: disable=g-bad-name",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "documentation": {}
    },
    {
        "label": "CamelCaseNode",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "peekOfCode": "class CamelCaseNode(django_template.Node):\n  \"\"\"Node for camel casing a variable value.\"\"\"\n  def __init__(self, variable_name):\n    super(CamelCaseNode, self).__init__()\n    self._variable_name = variable_name\n  def render(self, context):  # pylint: disable=g-bad-name\n    try:\n      text = django_template.Variable(self._variable_name).resolve(context)\n      if text:\n        return utilities.CamelCase(text)",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "documentation": {}
    },
    {
        "label": "ParameterGetterChainNode",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "peekOfCode": "class ParameterGetterChainNode(django_template.Node):\n  \"\"\"Node for returning the parameter getter chain of methods.\n  The parameter getter chain here refers to the sequence of getters necessary\n  to return the specified parameter. For example, for parameter xyz this method\n  could return: \".getParent1().getParent2().getParent1().getXyz()\".\n  The chain is as long as the number of ancestors of the specified parameter.\n  \"\"\"\n  def __init__(self, variable_name):\n    super(ParameterGetterChainNode, self).__init__()\n    self._variable_name = variable_name",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "documentation": {}
    },
    {
        "label": "ImportsNode",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "peekOfCode": "class ImportsNode(django_template.Node):\n  \"\"\"Node for outputting language specific imports.\"\"\"\n  def __init__(self, nodelist, element):\n    self._nodelist = nodelist\n    self._element = element\n  def render(self, context):  # pylint: disable=g-bad-name\n    \"\"\"Render the node.\"\"\"\n    explicit_import_text = self._nodelist.render(context)\n    # Look for an importManager on the element.  If we find one:\n    # - scan the import text for import statements",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "documentation": {}
    },
    {
        "label": "ParameterListNode",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "peekOfCode": "class ParameterListNode(django_template.Node):\n  \"\"\"Node for parameter_list blocks.\"\"\"\n  def __init__(self, nodelist, separator, append=False):\n    super(ParameterListNode, self).__init__()\n    self._nodelist = nodelist\n    self._separator = separator\n    self._append = append\n  def render(self, context):  # pylint: disable=g-bad-name\n    \"\"\"Render the node.\"\"\"\n    blocks = []",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "documentation": {}
    },
    {
        "label": "ParameterNode",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "peekOfCode": "class ParameterNode(django_template.Node):\n  \"\"\"Node for parameter tags.\"\"\"\n  # Makers so the parameter_list can find me.\n  BEGIN = chr(1)\n  END = chr(2)\n  def __init__(self, nodelist):\n    super(ParameterNode, self).__init__()\n    self._nodelist = nodelist\n  def render(self, context):  # pylint: disable=g-bad-name\n    \"\"\"Render the node.\"\"\"",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "documentation": {}
    },
    {
        "label": "TemplateNode",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "peekOfCode": "class TemplateNode(django_template.Node):\n  \"\"\"Django template Node holding data for writing a per language template.\n  The TemplateNode is a variation of an include template that allows for\n  per language lookup.  The node\n  * Looks up the template name w.r.t. the template_dir variable of the current\n    context.  The calling application must make sure template_dir is valid.\n  * evaluates a variable in the current context and binds that value to a\n    specific variable in the context\n  * renders the template\n  * restores the context.",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "documentation": {}
    },
    {
        "label": "LiteralStringNode",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "peekOfCode": "class LiteralStringNode(django_template.Node):\n  \"\"\"Django template Node holding a string to be written as a literal.\"\"\"\n  def __init__(self, text):\n    \"\"\"Construct the LiteralStringNode.\n    Args:\n      text: (list) the variable names containing the text being represented.\n    \"\"\"\n    self._variables = text\n  def render(self, context):  # pylint: disable=g-bad-name\n    \"\"\"Render the node.\"\"\"",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "documentation": {}
    },
    {
        "label": "DataContextNode",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "peekOfCode": "class DataContextNode(django_template.Node):\n  \"\"\"A Django Template Node for resolving context lookup and validation.\"\"\"\n  def __init__(self, variable):\n    self._variable = variable\n  def render(self, context):  # pylint: disable=g-bad-name\n    \"\"\"Make sure this is actually a Node and render it.\"\"\"\n    data = django_template.Variable(self._variable).resolve(context)\n    if hasattr(data, 'GetLanguageModel') and hasattr(data, 'value'):\n      model = data.GetLanguageModel()\n      # TODO(user): Fix the fact that Arrays don't know their language",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "documentation": {}
    },
    {
        "label": "BoolNode",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "peekOfCode": "class BoolNode(django_template.Node):\n  \"\"\"A node for outputting bool values.\"\"\"\n  def __init__(self, variable):\n    self._variable = variable\n  def render(self, context):  # pylint:disable=g-bad-name\n    data = bool(django_template.Variable(self._variable).resolve(context))\n    return _GetFromContext(context, _BOOLEAN_LITERALS)[data]\n@register.tag(name='bool')\ndef DoBoolTag(unused_parser, token):\n  return BoolNode(_GetArgFromToken(token))",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "documentation": {}
    },
    {
        "label": "DivChecksumNode",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "peekOfCode": "class DivChecksumNode(django_template.Node):\n  \"\"\"A node for calculating a sha-1 checksum for HTML contents.\"\"\"\n  def __init__(self, id_nodes, body_nodes):\n    self._id_nodes = id_nodes\n    self._body_nodes = body_nodes\n  def render(self, context):  # pylint:disable=g-bad-name\n    body = self._body_nodes.render(context)\n    element_id = self._id_nodes.render(context)\n    checksum = hashlib.sha1(six.ensure_binary(body)).hexdigest()\n    return ('<div id=\"%s\" checksum=\"%s\">%s</div>' %",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "documentation": {}
    },
    {
        "label": "WriteNode",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "peekOfCode": "class WriteNode(django_template.Node):\n  \"\"\"A node which writes its contents to a file.\n  A Node which evaluates its children and writes that result to a file rather\n  than into the current output document. This node does not open files directly.\n  Instead, it requires that a file writing method is passed to us via the\n  evaluation context. It must be under the key template_objects.FILE_WRITER,\n  and be a method with the signature func(path, content).\n  \"\"\"\n  def __init__(self, nodelist, path_variable):\n    self._nodelist = nodelist",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "documentation": {}
    },
    {
        "label": "DjangoTemplate",
        "kind": 2,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "peekOfCode": "def DjangoTemplate(source):\n  \"\"\"Returns a template configured for our default engine.\n  Args:\n    source: (str) Template source.\n  Returns:\n    (django.template.Template)\n  \"\"\"\n  return django_template.Template(source, engine=_ENGINE)\ndef GetCurrentContext():\n  return _TEMPLATE_GLOBALS.current_context",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "documentation": {}
    },
    {
        "label": "GetCurrentContext",
        "kind": 2,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "peekOfCode": "def GetCurrentContext():\n  return _TEMPLATE_GLOBALS.current_context\n@contextlib.contextmanager\ndef SetCurrentContext(ctxt):\n  _TEMPLATE_GLOBALS.current_context = ctxt\n  try:\n    yield\n  finally:\n    _TEMPLATE_GLOBALS.current_context = None\ndef _GetCurrentLanguage(ctxt=None, default=None):",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "documentation": {}
    },
    {
        "label": "SetCurrentContext",
        "kind": 2,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "peekOfCode": "def SetCurrentContext(ctxt):\n  _TEMPLATE_GLOBALS.current_context = ctxt\n  try:\n    yield\n  finally:\n    _TEMPLATE_GLOBALS.current_context = None\ndef _GetCurrentLanguage(ctxt=None, default=None):\n  if ctxt is None:\n    ctxt = GetCurrentContext() or {}\n  try:",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "documentation": {}
    },
    {
        "label": "java_comment_fragment",
        "kind": 2,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "peekOfCode": "def java_comment_fragment(value, indent):  # pylint: disable=g-bad-name\n  \"\"\"Template filter to wrap lines into Java comment style.\n  Take a single long string and break it so that subsequent lines are prefixed\n  by an approprate number of spaces and then a ' * '.  The filter invocation\n  should begin on a line that is already indented suffciently.\n  This is typically used after we have written the lead-in for a comment. E.g.\n  |    // NOTE: The leading / is indented 4 spaces.\n  |    /**\n  |     * {{ variable|java_comment_fragment:4 }}\n  |     */",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "documentation": {}
    },
    {
        "label": "java_parameter_wrap",
        "kind": 2,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "peekOfCode": "def java_parameter_wrap(value):  # pylint: disable=g-bad-name\n  \"\"\"Templatefilter to wrap lines of parameter documentation.\n  Take a single long string and breaks it up so that subsequent lines are\n  prefixed by an appropriate number of spaces (and preceded by a ' * '.\n  Args:\n   value: (str) the string to wrap\n  Returns:\n  the rewrapped string.\n  \"\"\"\n  # TODO(user): add 'parameter_doc' option to the DocCommentBlock",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "documentation": {}
    },
    {
        "label": "block_comment",
        "kind": 2,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "peekOfCode": "def block_comment(value):  # pylint: disable=g-bad-name\n  \"\"\"Template filter to line wrap a typical block comment.\n  Take a block of text where each line has a common comment prefix, divide it\n  into multiple sections, line wrap each section and string them back together.\n  Sections are defined as blank lines or lines containing only the comment\n  prefix.\n  Example template usage:\n    /**{% filter block_comment %}\n     * wwelrj wlejrwerl jrl (very long line ...) rwrwr.\n     *",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "documentation": {}
    },
    {
        "label": "noblanklines",
        "kind": 2,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "peekOfCode": "def noblanklines(value):  # pylint: disable=g-bad-name\n  \"\"\"Template filter to remove blank lines.\"\"\"\n  return '\\n'.join([line for line in value.split('\\n') if line.strip()])\n@register.filter\ndef collapse_blanklines(value):  # pylint: disable=g-bad-name\n  \"\"\"Template filter to collapse successive blank lines into a single one.\"\"\"\n  lines = []\n  previous_blank = False\n  for line in value.split('\\n'):\n    if not line.strip():",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "documentation": {}
    },
    {
        "label": "collapse_blanklines",
        "kind": 2,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "peekOfCode": "def collapse_blanklines(value):  # pylint: disable=g-bad-name\n  \"\"\"Template filter to collapse successive blank lines into a single one.\"\"\"\n  lines = []\n  previous_blank = False\n  for line in value.split('\\n'):\n    if not line.strip():\n      if not previous_blank:\n        lines.append(line)\n        previous_blank = True\n      else:",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "documentation": {}
    },
    {
        "label": "halt",
        "kind": 2,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "peekOfCode": "def halt():  # pylint: disable=g-bad-name\n  \"\"\"A tag which raises a Halt exception.\n  Usage:\n    {% if some_condition %}{% halt %}{% endif %}\n  Raises:\n    Halt: always\n  \"\"\"\n  raise Halt()\n#\n# Tags for programming language concepts",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "documentation": {}
    },
    {
        "label": "DoLanguage",
        "kind": 2,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "peekOfCode": "def DoLanguage(unused_parser, token):\n  \"\"\"Specify the language we are emitting code in.\n  Usage:\n    {% language java %}\n  Args:\n    unused parser: (parser) the Django parser context.\n    token: (django.template.Token) the token holding this tag\n  Returns:\n    a LanguageNode\n  \"\"\"",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "documentation": {}
    },
    {
        "label": "DoIndent",
        "kind": 2,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "peekOfCode": "def DoIndent(parser, token):\n  \"\"\"Increase the indent level for indenting.\n  Usage:\n    {% indent [levels] %} text... {% endindent %}\n    Increase the indent on all lines of text by levels * LEVEL_INDENT\n  Args:\n    parser: (parser) the Django parser context.\n    token: (django.template.Token) the token holding this tag\n  Returns:\n    a IndentNode",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "documentation": {}
    },
    {
        "label": "DoCollapseNewLines",
        "kind": 2,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "peekOfCode": "def DoCollapseNewLines(parser, unused_token):\n  \"\"\"Collapses 3 or more newlines into 2 newlines.\n  Usage:\n    {% collapsenewlines %}\n    ...\n    {% end collapsenewlines %}\n  Args:\n    parser: (parser) the Django parser context.\n    unused_token: (django.template.Token) the token holding this tag\n  Returns:",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "documentation": {}
    },
    {
        "label": "eol",
        "kind": 2,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "peekOfCode": "def eol(context):  # pylint:disable=g-bad-name\n  # Inside a noblock node, return special marker\n  if  context.get(NOBLANK_STACK):\n    return EOL_MARKER\n  return '\\n'\n@register.simple_tag(takes_context=True)\ndef sp(context):  # pylint:disable=g-bad-name\n  # Inside a noblock node, return special marker\n  if context.get(NOBLANK_STACK):\n    return SPACE_MARKER",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "documentation": {}
    },
    {
        "label": "sp",
        "kind": 2,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "peekOfCode": "def sp(context):  # pylint:disable=g-bad-name\n  # Inside a noblock node, return special marker\n  if context.get(NOBLANK_STACK):\n    return SPACE_MARKER\n  return ' '\nclass NoBlankNode(django_template.Node):\n  \"\"\"Node for remove eols from output.\"\"\"\n  def __init__(self, nodelist, recurse=False, noeol=False):\n    self.nodelist = nodelist\n    self.recurse = recurse",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "documentation": {}
    },
    {
        "label": "DoNoBlank",
        "kind": 2,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "peekOfCode": "def DoNoBlank(parser, token):\n  \"\"\"Suppress all empty lines unless explicitly added.\"\"\"\n  args = token.split_contents()\n  if len(args) > 2:\n    raise django_template.TemplateSyntaxError(\n        'noblank expects at most one argument')\n  if len(args) == 2:\n    recursearg = args[1]\n    if recursearg not in ('recurse', 'norecurse'):\n      raise django_template.TemplateSyntaxError(",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "documentation": {}
    },
    {
        "label": "DoNoEol",
        "kind": 2,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "peekOfCode": "def DoNoEol(parser, token):\n  \"\"\"Suppress all empty lines unless explicitly added.\"\"\"\n  args = token.split_contents()\n  if len(args) > 2:\n    raise django_template.TemplateSyntaxError(\n        'noeol expects at most one argument')\n  if len(args) == 2:\n    recursearg = args[1]\n    if recursearg not in ('recurse', 'norecurse'):\n      raise django_template.TemplateSyntaxError(",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "documentation": {}
    },
    {
        "label": "DoCommentIf",
        "kind": 2,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "peekOfCode": "def DoCommentIf(unused_parser, token):\n  \"\"\"If a variable has content, emit it as a comment.\"\"\"\n  variable_name = _GetArgFromToken(token)\n  return CommentIfNode(variable_name)\n@register.tag(name='doc_comment_if')\ndef DoDocCommentIf(unused_parser, token):\n  \"\"\"If a variable has content, emit it as a document compatible comment.\"\"\"\n  variable_name = _GetArgFromToken(token)\n  return CommentIfNode(variable_name, comment_type='doc')\n@register.tag(name='doc_comment')",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "documentation": {}
    },
    {
        "label": "DoDocCommentIf",
        "kind": 2,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "peekOfCode": "def DoDocCommentIf(unused_parser, token):\n  \"\"\"If a variable has content, emit it as a document compatible comment.\"\"\"\n  variable_name = _GetArgFromToken(token)\n  return CommentIfNode(variable_name, comment_type='doc')\n@register.tag(name='doc_comment')\ndef DoDocComment(parser, token):\n  \"\"\"A block tag for documentation comments.\n  Example usage:\n    {% doc_comment noblock %}\n    With the noblock parameter, line returns will be considered hard returns",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "documentation": {}
    },
    {
        "label": "DoDocComment",
        "kind": 2,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "peekOfCode": "def DoDocComment(parser, token):\n  \"\"\"A block tag for documentation comments.\n  Example usage:\n    {% doc_comment noblock %}\n    With the noblock parameter, line returns will be considered hard returns\n    and kept in the output, although long lines will be wrapped.\n    Without noblock, contiguous non-empty lines will be wrapped together as\n    paragraphs.\n    {% enddoc_comment %}\n  Args:",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "documentation": {}
    },
    {
        "label": "DoCamelCase",
        "kind": 2,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "peekOfCode": "def DoCamelCase(unused_parser, token):\n  variable_name = _GetArgFromToken(token)\n  return CamelCaseNode(variable_name)\nclass ParameterGetterChainNode(django_template.Node):\n  \"\"\"Node for returning the parameter getter chain of methods.\n  The parameter getter chain here refers to the sequence of getters necessary\n  to return the specified parameter. For example, for parameter xyz this method\n  could return: \".getParent1().getParent2().getParent1().getXyz()\".\n  The chain is as long as the number of ancestors of the specified parameter.\n  \"\"\"",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "documentation": {}
    },
    {
        "label": "DoParameterGetterChain",
        "kind": 2,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "peekOfCode": "def DoParameterGetterChain(unused_parser, token):\n  variable_name = _GetArgFromToken(token)\n  return ParameterGetterChainNode(variable_name)\nclass ImportsNode(django_template.Node):\n  \"\"\"Node for outputting language specific imports.\"\"\"\n  def __init__(self, nodelist, element):\n    self._nodelist = nodelist\n    self._element = element\n  def render(self, context):  # pylint: disable=g-bad-name\n    \"\"\"Render the node.\"\"\"",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "documentation": {}
    },
    {
        "label": "Imports",
        "kind": 2,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "peekOfCode": "def Imports(parser, token):\n  \"\"\"If an element has importLists emit them, else emit existing imports.\"\"\"\n  element = _GetArgFromToken(token)\n  nodelist = parser.parse(('endimports',))\n  parser.delete_first_token()\n  return ImportsNode(nodelist, element)\nclass ParameterListNode(django_template.Node):\n  \"\"\"Node for parameter_list blocks.\"\"\"\n  def __init__(self, nodelist, separator, append=False):\n    super(ParameterListNode, self).__init__()",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "documentation": {}
    },
    {
        "label": "DoParameterList",
        "kind": 2,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "peekOfCode": "def DoParameterList(parser, token):\n  r\"\"\"Gather a list of parameter declarations and join them with ','.\n  Gathers all 'parameter' nodes until the 'end_parameter_list' tag and joins\n  them together with a ', ' separator. Extra white space between nodes is\n  removed, but other text is left intact, joined to the end of the preceding\n  parameter node. Blank parameters are omitted from the list.\n  Usage:\n    foo({% parameter_list [separator [append]] %}{% for p in m.parameters %}\n        {% parameter %}\n          {{ p.type }} {{ p.name }}",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "documentation": {}
    },
    {
        "label": "DoParameter",
        "kind": 2,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "peekOfCode": "def DoParameter(parser, unused_token):\n  \"\"\"A single parameter in a parameter_list.\n  See DoParameterList for a description.\n  Args:\n    parser: (parser) the Django parser context.\n    unused_token: (django.template.Token) the token holding this tag\n  Returns:\n    a ParameterNode\n  \"\"\"\n  nodelist = parser.parse(('end_parameter',))",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "documentation": {}
    },
    {
        "label": "CallTemplate",
        "kind": 2,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "peekOfCode": "def CallTemplate(unused_parser, token):\n  \"\"\"Interpret a template with an additional set of variable bindings.\n  Evaluates the template named 'template_name.tmpl' with the variables 'name1',\n  'name2', etc., bound to the values of the variables 'val1', 'val2'.\n  Usage -- either:\n    {% call_template template_name name1=val1 name2=val2 %}\n  or (for backwards compatibility):\n    {% call_template template_name name1 val1 name2 val2 %}\n  Mixing the two styles is not allowed.\n  Args:",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "documentation": {}
    },
    {
        "label": "DoEmitParameterDoc",
        "kind": 2,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "peekOfCode": "def DoEmitParameterDoc(unused_parser, token):\n  \"\"\"Emit a parameter definition through a language specific template.\n  Evaluates a template named '_parameter.tmpl' with the variable 'parameter'\n  bound to the specified value.\n  Usage:\n    {% emit_parameter_doc parameter %}\n  Args:\n    unused_parser: (parser) the Django parser context\n    token: (django.template.Token) the token holding this tag\n  Returns:",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "documentation": {}
    },
    {
        "label": "DoCopyrightBlock",
        "kind": 2,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "peekOfCode": "def DoCopyrightBlock(parser, unused_token):\n  \"\"\"Emit a copyright block through a language specific template.\n  Emits a copyright and license block. The copyright text is pulled from the\n  variable api.copyright at rendering time.\n  Usage:\n    {% copyright_block %}\n  Args:\n    parser: (parser) the Django parser context.\n    unused_token: (django.template.Token) the token holding this tag\n  Returns:",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "documentation": {}
    },
    {
        "label": "DoLiteralString",
        "kind": 2,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "peekOfCode": "def DoLiteralString(unused_parser, token):\n  r\"\"\"Emit a variable as a string literal, escaped for the current language.\n  A variable foo containing 'ab<newline>c' would be emitted as \"ab\\\\nc\"\n  (with no literal newline character). Multiple variables are concatenated.\n  Usage:\n    {% literal somevar anothervar %}\n  Args:\n    unused_parser: (parser) the Django parser context\n    token: (django.template.Token) the token holding this tag and arguments\n  Returns:",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "documentation": {}
    },
    {
        "label": "GetValueOf",
        "kind": 2,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "peekOfCode": "def GetValueOf(unused_parser, token):\n  \"\"\"Appropriately wrap DataValue objects for eventual rendering.\"\"\"\n  return DataContextNode(_GetArgFromToken(token))\nclass BoolNode(django_template.Node):\n  \"\"\"A node for outputting bool values.\"\"\"\n  def __init__(self, variable):\n    self._variable = variable\n  def render(self, context):  # pylint:disable=g-bad-name\n    data = bool(django_template.Variable(self._variable).resolve(context))\n    return _GetFromContext(context, _BOOLEAN_LITERALS)[data]",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "documentation": {}
    },
    {
        "label": "DoBoolTag",
        "kind": 2,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "peekOfCode": "def DoBoolTag(unused_parser, token):\n  return BoolNode(_GetArgFromToken(token))\nclass DivChecksumNode(django_template.Node):\n  \"\"\"A node for calculating a sha-1 checksum for HTML contents.\"\"\"\n  def __init__(self, id_nodes, body_nodes):\n    self._id_nodes = id_nodes\n    self._body_nodes = body_nodes\n  def render(self, context):  # pylint:disable=g-bad-name\n    body = self._body_nodes.render(context)\n    element_id = self._id_nodes.render(context)",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "documentation": {}
    },
    {
        "label": "DoDivChecksumTag",
        "kind": 2,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "peekOfCode": "def DoDivChecksumTag(parser, unused_token):\n  \"\"\"Wraps HTML in a div with its checksum as an attribute.\"\"\"\n  id_nodes = parser.parse(('divbody',))\n  parser.delete_first_token()\n  body_nodes = parser.parse(('endchecksummed_div',))\n  parser.delete_first_token()\n  return DivChecksumNode(id_nodes, body_nodes)\nclass WriteNode(django_template.Node):\n  \"\"\"A node which writes its contents to a file.\n  A Node which evaluates its children and writes that result to a file rather",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "documentation": {}
    },
    {
        "label": "DoWrite",
        "kind": 2,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "peekOfCode": "def DoWrite(parser, token):\n  \"\"\"Construct a WriteNode.\n  write is a block tag which diverts the rendered content to a file rather than\n  into the current output document.\n  Usage:\n    {% write file_path_variable %} ... {% endwrite %}\n  Args:\n    parser: (parser) the Django parser context.\n    token: (django.template.Token) the token holding this tag\n  Returns:",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "peekOfCode": "__author__ = 'aiuto@google.com (Tony Aiuto)'\nimport contextlib\nimport hashlib\nimport logging\nimport os\nimport re\nimport string\nimport textwrap\nimport threading\nimport django.template as django_template  # pylint: disable=g-bad-import-order",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "peekOfCode": "register = django_template.Library()\n# NOTE: Do not edit this text unless you understand the ramifications.\n_LICENSE_TEXT = \"\"\"\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may\nnot use this file except in compliance with the License. You may obtain\na copy of the License at\nhttp://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\nWARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "documentation": {}
    },
    {
        "label": "_LICENSE_TEXT",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "peekOfCode": "_LICENSE_TEXT = \"\"\"\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may\nnot use this file except in compliance with the License. You may obtain\na copy of the License at\nhttp://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\nWARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\nLicense for the specific language governing permissions and limitations\nunder the License.",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "documentation": {}
    },
    {
        "label": "_LANGUAGE",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "peekOfCode": "_LANGUAGE = '_LANGUAGE'\n_LINE_BREAK_INDENT = '_LINE_BREAK_INDENT'\n_LINE_WIDTH = '_LINE_WIDTH'\n_PARAMETER_INDENT = '_PARAMETER_INDENT'\n_LEVEL_INDENT = '_LEVEL_INDENT'\n_COMMENT_START = '_COMMENT_START'\n_COMMENT_CONTINUE = '_COMMENT_CONTINUE'\n_COMMENT_END = '_COMMENT_END'\n_DOC_COMMENT_START = '_DOC_COMMENT_START'\n_DOC_COMMENT_CONTINUE = '_DOC_COMMENT_CONTINUE'",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "documentation": {}
    },
    {
        "label": "_LINE_BREAK_INDENT",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "peekOfCode": "_LINE_BREAK_INDENT = '_LINE_BREAK_INDENT'\n_LINE_WIDTH = '_LINE_WIDTH'\n_PARAMETER_INDENT = '_PARAMETER_INDENT'\n_LEVEL_INDENT = '_LEVEL_INDENT'\n_COMMENT_START = '_COMMENT_START'\n_COMMENT_CONTINUE = '_COMMENT_CONTINUE'\n_COMMENT_END = '_COMMENT_END'\n_DOC_COMMENT_START = '_DOC_COMMENT_START'\n_DOC_COMMENT_CONTINUE = '_DOC_COMMENT_CONTINUE'\n_DOC_COMMENT_END = '_DOC_COMMENT_END'",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "documentation": {}
    },
    {
        "label": "_LINE_WIDTH",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "peekOfCode": "_LINE_WIDTH = '_LINE_WIDTH'\n_PARAMETER_INDENT = '_PARAMETER_INDENT'\n_LEVEL_INDENT = '_LEVEL_INDENT'\n_COMMENT_START = '_COMMENT_START'\n_COMMENT_CONTINUE = '_COMMENT_CONTINUE'\n_COMMENT_END = '_COMMENT_END'\n_DOC_COMMENT_START = '_DOC_COMMENT_START'\n_DOC_COMMENT_CONTINUE = '_DOC_COMMENT_CONTINUE'\n_DOC_COMMENT_END = '_DOC_COMMENT_END'\n# The begin/end tags are parts of a doc comment that surround the text, but",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "documentation": {}
    },
    {
        "label": "_PARAMETER_INDENT",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "peekOfCode": "_PARAMETER_INDENT = '_PARAMETER_INDENT'\n_LEVEL_INDENT = '_LEVEL_INDENT'\n_COMMENT_START = '_COMMENT_START'\n_COMMENT_CONTINUE = '_COMMENT_CONTINUE'\n_COMMENT_END = '_COMMENT_END'\n_DOC_COMMENT_START = '_DOC_COMMENT_START'\n_DOC_COMMENT_CONTINUE = '_DOC_COMMENT_CONTINUE'\n_DOC_COMMENT_END = '_DOC_COMMENT_END'\n# The begin/end tags are parts of a doc comment that surround the text, but\n# are not really part of the comment tags",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "documentation": {}
    },
    {
        "label": "_LEVEL_INDENT",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "peekOfCode": "_LEVEL_INDENT = '_LEVEL_INDENT'\n_COMMENT_START = '_COMMENT_START'\n_COMMENT_CONTINUE = '_COMMENT_CONTINUE'\n_COMMENT_END = '_COMMENT_END'\n_DOC_COMMENT_START = '_DOC_COMMENT_START'\n_DOC_COMMENT_CONTINUE = '_DOC_COMMENT_CONTINUE'\n_DOC_COMMENT_END = '_DOC_COMMENT_END'\n# The begin/end tags are parts of a doc comment that surround the text, but\n# are not really part of the comment tags\n_DOC_COMMENT_BEGIN_TAG = '_DOC_COMMENT_BEGIN_TAG'",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "documentation": {}
    },
    {
        "label": "_COMMENT_START",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "peekOfCode": "_COMMENT_START = '_COMMENT_START'\n_COMMENT_CONTINUE = '_COMMENT_CONTINUE'\n_COMMENT_END = '_COMMENT_END'\n_DOC_COMMENT_START = '_DOC_COMMENT_START'\n_DOC_COMMENT_CONTINUE = '_DOC_COMMENT_CONTINUE'\n_DOC_COMMENT_END = '_DOC_COMMENT_END'\n# The begin/end tags are parts of a doc comment that surround the text, but\n# are not really part of the comment tags\n_DOC_COMMENT_BEGIN_TAG = '_DOC_COMMENT_BEGIN_TAG'\n_DOC_COMMENT_END_TAG = '_DOC_COMMENT_END_TAG'",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "documentation": {}
    },
    {
        "label": "_COMMENT_CONTINUE",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "peekOfCode": "_COMMENT_CONTINUE = '_COMMENT_CONTINUE'\n_COMMENT_END = '_COMMENT_END'\n_DOC_COMMENT_START = '_DOC_COMMENT_START'\n_DOC_COMMENT_CONTINUE = '_DOC_COMMENT_CONTINUE'\n_DOC_COMMENT_END = '_DOC_COMMENT_END'\n# The begin/end tags are parts of a doc comment that surround the text, but\n# are not really part of the comment tags\n_DOC_COMMENT_BEGIN_TAG = '_DOC_COMMENT_BEGIN_TAG'\n_DOC_COMMENT_END_TAG = '_DOC_COMMENT_END_TAG'\n_LITERAL_QUOTE_START = '_LITERAL_QUOTE_START'",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "documentation": {}
    },
    {
        "label": "_COMMENT_END",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "peekOfCode": "_COMMENT_END = '_COMMENT_END'\n_DOC_COMMENT_START = '_DOC_COMMENT_START'\n_DOC_COMMENT_CONTINUE = '_DOC_COMMENT_CONTINUE'\n_DOC_COMMENT_END = '_DOC_COMMENT_END'\n# The begin/end tags are parts of a doc comment that surround the text, but\n# are not really part of the comment tags\n_DOC_COMMENT_BEGIN_TAG = '_DOC_COMMENT_BEGIN_TAG'\n_DOC_COMMENT_END_TAG = '_DOC_COMMENT_END_TAG'\n_LITERAL_QUOTE_START = '_LITERAL_QUOTE_START'\n_LITERAL_QUOTE_END = '_LITERAL_QUOTE_END'",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "documentation": {}
    },
    {
        "label": "_DOC_COMMENT_START",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "peekOfCode": "_DOC_COMMENT_START = '_DOC_COMMENT_START'\n_DOC_COMMENT_CONTINUE = '_DOC_COMMENT_CONTINUE'\n_DOC_COMMENT_END = '_DOC_COMMENT_END'\n# The begin/end tags are parts of a doc comment that surround the text, but\n# are not really part of the comment tags\n_DOC_COMMENT_BEGIN_TAG = '_DOC_COMMENT_BEGIN_TAG'\n_DOC_COMMENT_END_TAG = '_DOC_COMMENT_END_TAG'\n_LITERAL_QUOTE_START = '_LITERAL_QUOTE_START'\n_LITERAL_QUOTE_END = '_LITERAL_QUOTE_END'\n_LITERAL_ESCAPE = '_LITERAL_ESCAPE'",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "documentation": {}
    },
    {
        "label": "_DOC_COMMENT_CONTINUE",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "peekOfCode": "_DOC_COMMENT_CONTINUE = '_DOC_COMMENT_CONTINUE'\n_DOC_COMMENT_END = '_DOC_COMMENT_END'\n# The begin/end tags are parts of a doc comment that surround the text, but\n# are not really part of the comment tags\n_DOC_COMMENT_BEGIN_TAG = '_DOC_COMMENT_BEGIN_TAG'\n_DOC_COMMENT_END_TAG = '_DOC_COMMENT_END_TAG'\n_LITERAL_QUOTE_START = '_LITERAL_QUOTE_START'\n_LITERAL_QUOTE_END = '_LITERAL_QUOTE_END'\n_LITERAL_ESCAPE = '_LITERAL_ESCAPE'\n_LITERAL_FLOAT_SUFFIX = '_LITERAL_FLOAT_SUFFIX'",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "documentation": {}
    },
    {
        "label": "_DOC_COMMENT_END",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "peekOfCode": "_DOC_COMMENT_END = '_DOC_COMMENT_END'\n# The begin/end tags are parts of a doc comment that surround the text, but\n# are not really part of the comment tags\n_DOC_COMMENT_BEGIN_TAG = '_DOC_COMMENT_BEGIN_TAG'\n_DOC_COMMENT_END_TAG = '_DOC_COMMENT_END_TAG'\n_LITERAL_QUOTE_START = '_LITERAL_QUOTE_START'\n_LITERAL_QUOTE_END = '_LITERAL_QUOTE_END'\n_LITERAL_ESCAPE = '_LITERAL_ESCAPE'\n_LITERAL_FLOAT_SUFFIX = '_LITERAL_FLOAT_SUFFIX'\n_CURRENT_INDENT = '_CURRENT_INDENT'  # The actual indent we are at",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "documentation": {}
    },
    {
        "label": "_DOC_COMMENT_BEGIN_TAG",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "peekOfCode": "_DOC_COMMENT_BEGIN_TAG = '_DOC_COMMENT_BEGIN_TAG'\n_DOC_COMMENT_END_TAG = '_DOC_COMMENT_END_TAG'\n_LITERAL_QUOTE_START = '_LITERAL_QUOTE_START'\n_LITERAL_QUOTE_END = '_LITERAL_QUOTE_END'\n_LITERAL_ESCAPE = '_LITERAL_ESCAPE'\n_LITERAL_FLOAT_SUFFIX = '_LITERAL_FLOAT_SUFFIX'\n_CURRENT_INDENT = '_CURRENT_INDENT'  # The actual indent we are at\n_CURRENT_LEVEL = '_CURRENT_LEVEL'  # The current indent level we are at\n_PARAMETER_DOC_INDENT = '_PARAMETER_DOC_INDENT'\n_IMPORT_REGEX = '_IMPORT_REGEX'",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "documentation": {}
    },
    {
        "label": "_DOC_COMMENT_END_TAG",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "peekOfCode": "_DOC_COMMENT_END_TAG = '_DOC_COMMENT_END_TAG'\n_LITERAL_QUOTE_START = '_LITERAL_QUOTE_START'\n_LITERAL_QUOTE_END = '_LITERAL_QUOTE_END'\n_LITERAL_ESCAPE = '_LITERAL_ESCAPE'\n_LITERAL_FLOAT_SUFFIX = '_LITERAL_FLOAT_SUFFIX'\n_CURRENT_INDENT = '_CURRENT_INDENT'  # The actual indent we are at\n_CURRENT_LEVEL = '_CURRENT_LEVEL'  # The current indent level we are at\n_PARAMETER_DOC_INDENT = '_PARAMETER_DOC_INDENT'\n_IMPORT_REGEX = '_IMPORT_REGEX'\n_IMPORT_TEMPLATE = '_IMPORT_TEMPLATE'",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "documentation": {}
    },
    {
        "label": "_LITERAL_QUOTE_START",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "peekOfCode": "_LITERAL_QUOTE_START = '_LITERAL_QUOTE_START'\n_LITERAL_QUOTE_END = '_LITERAL_QUOTE_END'\n_LITERAL_ESCAPE = '_LITERAL_ESCAPE'\n_LITERAL_FLOAT_SUFFIX = '_LITERAL_FLOAT_SUFFIX'\n_CURRENT_INDENT = '_CURRENT_INDENT'  # The actual indent we are at\n_CURRENT_LEVEL = '_CURRENT_LEVEL'  # The current indent level we are at\n_PARAMETER_DOC_INDENT = '_PARAMETER_DOC_INDENT'\n_IMPORT_REGEX = '_IMPORT_REGEX'\n_IMPORT_TEMPLATE = '_IMPORT_TEMPLATE'\n_BOOLEAN_LITERALS = '_BOOLEAN_LITERALS'",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "documentation": {}
    },
    {
        "label": "_LITERAL_QUOTE_END",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "peekOfCode": "_LITERAL_QUOTE_END = '_LITERAL_QUOTE_END'\n_LITERAL_ESCAPE = '_LITERAL_ESCAPE'\n_LITERAL_FLOAT_SUFFIX = '_LITERAL_FLOAT_SUFFIX'\n_CURRENT_INDENT = '_CURRENT_INDENT'  # The actual indent we are at\n_CURRENT_LEVEL = '_CURRENT_LEVEL'  # The current indent level we are at\n_PARAMETER_DOC_INDENT = '_PARAMETER_DOC_INDENT'\n_IMPORT_REGEX = '_IMPORT_REGEX'\n_IMPORT_TEMPLATE = '_IMPORT_TEMPLATE'\n_BOOLEAN_LITERALS = '_BOOLEAN_LITERALS'\n# The name of the context variable holding a file writer for the 'write' tag to",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "documentation": {}
    },
    {
        "label": "_LITERAL_ESCAPE",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "peekOfCode": "_LITERAL_ESCAPE = '_LITERAL_ESCAPE'\n_LITERAL_FLOAT_SUFFIX = '_LITERAL_FLOAT_SUFFIX'\n_CURRENT_INDENT = '_CURRENT_INDENT'  # The actual indent we are at\n_CURRENT_LEVEL = '_CURRENT_LEVEL'  # The current indent level we are at\n_PARAMETER_DOC_INDENT = '_PARAMETER_DOC_INDENT'\n_IMPORT_REGEX = '_IMPORT_REGEX'\n_IMPORT_TEMPLATE = '_IMPORT_TEMPLATE'\n_BOOLEAN_LITERALS = '_BOOLEAN_LITERALS'\n# The name of the context variable holding a file writer for the 'write' tag to\n# use. The file writer is a method with the signature func(path, content).",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "documentation": {}
    },
    {
        "label": "_LITERAL_FLOAT_SUFFIX",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "peekOfCode": "_LITERAL_FLOAT_SUFFIX = '_LITERAL_FLOAT_SUFFIX'\n_CURRENT_INDENT = '_CURRENT_INDENT'  # The actual indent we are at\n_CURRENT_LEVEL = '_CURRENT_LEVEL'  # The current indent level we are at\n_PARAMETER_DOC_INDENT = '_PARAMETER_DOC_INDENT'\n_IMPORT_REGEX = '_IMPORT_REGEX'\n_IMPORT_TEMPLATE = '_IMPORT_TEMPLATE'\n_BOOLEAN_LITERALS = '_BOOLEAN_LITERALS'\n# The name of the context variable holding a file writer for the 'write' tag to\n# use. The file writer is a method with the signature func(path, content).\nFILE_WRITER = '_FILE_WRITER'",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "documentation": {}
    },
    {
        "label": "_CURRENT_INDENT",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "peekOfCode": "_CURRENT_INDENT = '_CURRENT_INDENT'  # The actual indent we are at\n_CURRENT_LEVEL = '_CURRENT_LEVEL'  # The current indent level we are at\n_PARAMETER_DOC_INDENT = '_PARAMETER_DOC_INDENT'\n_IMPORT_REGEX = '_IMPORT_REGEX'\n_IMPORT_TEMPLATE = '_IMPORT_TEMPLATE'\n_BOOLEAN_LITERALS = '_BOOLEAN_LITERALS'\n# The name of the context variable holding a file writer for the 'write' tag to\n# use. The file writer is a method with the signature func(path, content).\nFILE_WRITER = '_FILE_WRITER'\n_defaults = {",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "documentation": {}
    },
    {
        "label": "_CURRENT_LEVEL",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "peekOfCode": "_CURRENT_LEVEL = '_CURRENT_LEVEL'  # The current indent level we are at\n_PARAMETER_DOC_INDENT = '_PARAMETER_DOC_INDENT'\n_IMPORT_REGEX = '_IMPORT_REGEX'\n_IMPORT_TEMPLATE = '_IMPORT_TEMPLATE'\n_BOOLEAN_LITERALS = '_BOOLEAN_LITERALS'\n# The name of the context variable holding a file writer for the 'write' tag to\n# use. The file writer is a method with the signature func(path, content).\nFILE_WRITER = '_FILE_WRITER'\n_defaults = {\n    _LINE_BREAK_INDENT: 2,",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "documentation": {}
    },
    {
        "label": "_PARAMETER_DOC_INDENT",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "peekOfCode": "_PARAMETER_DOC_INDENT = '_PARAMETER_DOC_INDENT'\n_IMPORT_REGEX = '_IMPORT_REGEX'\n_IMPORT_TEMPLATE = '_IMPORT_TEMPLATE'\n_BOOLEAN_LITERALS = '_BOOLEAN_LITERALS'\n# The name of the context variable holding a file writer for the 'write' tag to\n# use. The file writer is a method with the signature func(path, content).\nFILE_WRITER = '_FILE_WRITER'\n_defaults = {\n    _LINE_BREAK_INDENT: 2,\n    _LINE_WIDTH: 40,",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "documentation": {}
    },
    {
        "label": "_IMPORT_REGEX",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "peekOfCode": "_IMPORT_REGEX = '_IMPORT_REGEX'\n_IMPORT_TEMPLATE = '_IMPORT_TEMPLATE'\n_BOOLEAN_LITERALS = '_BOOLEAN_LITERALS'\n# The name of the context variable holding a file writer for the 'write' tag to\n# use. The file writer is a method with the signature func(path, content).\nFILE_WRITER = '_FILE_WRITER'\n_defaults = {\n    _LINE_BREAK_INDENT: 2,\n    _LINE_WIDTH: 40,\n    _PARAMETER_INDENT: 4,",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "documentation": {}
    },
    {
        "label": "_IMPORT_TEMPLATE",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "peekOfCode": "_IMPORT_TEMPLATE = '_IMPORT_TEMPLATE'\n_BOOLEAN_LITERALS = '_BOOLEAN_LITERALS'\n# The name of the context variable holding a file writer for the 'write' tag to\n# use. The file writer is a method with the signature func(path, content).\nFILE_WRITER = '_FILE_WRITER'\n_defaults = {\n    _LINE_BREAK_INDENT: 2,\n    _LINE_WIDTH: 40,\n    _PARAMETER_INDENT: 4,\n    _LEVEL_INDENT: 2,",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "documentation": {}
    },
    {
        "label": "_BOOLEAN_LITERALS",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "peekOfCode": "_BOOLEAN_LITERALS = '_BOOLEAN_LITERALS'\n# The name of the context variable holding a file writer for the 'write' tag to\n# use. The file writer is a method with the signature func(path, content).\nFILE_WRITER = '_FILE_WRITER'\n_defaults = {\n    _LINE_BREAK_INDENT: 2,\n    _LINE_WIDTH: 40,\n    _PARAMETER_INDENT: 4,\n    _LEVEL_INDENT: 2,\n    _COMMENT_START: '# ',",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "documentation": {}
    },
    {
        "label": "FILE_WRITER",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "peekOfCode": "FILE_WRITER = '_FILE_WRITER'\n_defaults = {\n    _LINE_BREAK_INDENT: 2,\n    _LINE_WIDTH: 40,\n    _PARAMETER_INDENT: 4,\n    _LEVEL_INDENT: 2,\n    _COMMENT_START: '# ',\n    _COMMENT_CONTINUE: '# ',\n    _COMMENT_END: '',\n    _DOC_COMMENT_START: '# ',",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "documentation": {}
    },
    {
        "label": "_defaults",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "peekOfCode": "_defaults = {\n    _LINE_BREAK_INDENT: 2,\n    _LINE_WIDTH: 40,\n    _PARAMETER_INDENT: 4,\n    _LEVEL_INDENT: 2,\n    _COMMENT_START: '# ',\n    _COMMENT_CONTINUE: '# ',\n    _COMMENT_END: '',\n    _DOC_COMMENT_START: '# ',\n    _PARAMETER_DOC_INDENT: 6,",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "documentation": {}
    },
    {
        "label": "_language_defaults",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "peekOfCode": "_language_defaults = {\n    'cpp': {\n        _LINE_WIDTH: 80,\n        _PARAMETER_INDENT: 4,\n        _LEVEL_INDENT: 2,\n        _COMMENT_START: '// ',\n        _COMMENT_CONTINUE: '// ',\n        _COMMENT_END: '',\n        _DOC_COMMENT_START: '/** ',\n        _DOC_COMMENT_CONTINUE: ' * ',",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "documentation": {}
    },
    {
        "label": "_TEMPLATE_GLOBALS",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "peekOfCode": "_TEMPLATE_GLOBALS = threading.local()\n_TEMPLATE_GLOBALS.current_context = None\n_ENGINE = django_template.engine.Engine(\n    builtins=['googleapis.codegen.template_helpers'])\ndef DjangoTemplate(source):\n  \"\"\"Returns a template configured for our default engine.\n  Args:\n    source: (str) Template source.\n  Returns:\n    (django.template.Template)",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "documentation": {}
    },
    {
        "label": "_TEMPLATE_GLOBALS.current_context",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "peekOfCode": "_TEMPLATE_GLOBALS.current_context = None\n_ENGINE = django_template.engine.Engine(\n    builtins=['googleapis.codegen.template_helpers'])\ndef DjangoTemplate(source):\n  \"\"\"Returns a template configured for our default engine.\n  Args:\n    source: (str) Template source.\n  Returns:\n    (django.template.Template)\n  \"\"\"",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "documentation": {}
    },
    {
        "label": "_ENGINE",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "peekOfCode": "_ENGINE = django_template.engine.Engine(\n    builtins=['googleapis.codegen.template_helpers'])\ndef DjangoTemplate(source):\n  \"\"\"Returns a template configured for our default engine.\n  Args:\n    source: (str) Template source.\n  Returns:\n    (django.template.Template)\n  \"\"\"\n  return django_template.Template(source, engine=_ENGINE)",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "documentation": {}
    },
    {
        "label": "_TEMPLATE_LOADER",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "peekOfCode": "_TEMPLATE_LOADER = CachingTemplateLoader()\ndef _RenderToString(template_path, context):\n  \"\"\"Renders a template specified by a file path with a give values dict.\n  NOTE: This routine is essentially a copy of what is in django_helpers.\n  We duplicate it here rather than call that one to avoid a mutual recursion\n  in the strange django loading process.\n  Args:\n    template_path: (str) Path to file.\n    context: (Context) A django Context.\n  Returns:",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "documentation": {}
    },
    {
        "label": "EOL_MARKER",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "peekOfCode": "EOL_MARKER = '\\x00eol\\x00'\nSPACE_MARKER = '\\x00sp\\x00'\nNOBLANK_STACK = '___noblank__stack___'\n@register.simple_tag(takes_context=True)\ndef eol(context):  # pylint:disable=g-bad-name\n  # Inside a noblock node, return special marker\n  if  context.get(NOBLANK_STACK):\n    return EOL_MARKER\n  return '\\n'\n@register.simple_tag(takes_context=True)",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "documentation": {}
    },
    {
        "label": "SPACE_MARKER",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "peekOfCode": "SPACE_MARKER = '\\x00sp\\x00'\nNOBLANK_STACK = '___noblank__stack___'\n@register.simple_tag(takes_context=True)\ndef eol(context):  # pylint:disable=g-bad-name\n  # Inside a noblock node, return special marker\n  if  context.get(NOBLANK_STACK):\n    return EOL_MARKER\n  return '\\n'\n@register.simple_tag(takes_context=True)\ndef sp(context):  # pylint:disable=g-bad-name",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "documentation": {}
    },
    {
        "label": "NOBLANK_STACK",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "peekOfCode": "NOBLANK_STACK = '___noblank__stack___'\n@register.simple_tag(takes_context=True)\ndef eol(context):  # pylint:disable=g-bad-name\n  # Inside a noblock node, return special marker\n  if  context.get(NOBLANK_STACK):\n    return EOL_MARKER\n  return '\\n'\n@register.simple_tag(takes_context=True)\ndef sp(context):  # pylint:disable=g-bad-name\n  # Inside a noblock node, return special marker",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_helpers",
        "documentation": {}
    },
    {
        "label": "UseableInTemplates",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_objects",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_objects",
        "peekOfCode": "class UseableInTemplates(object):\n  \"\"\"Base class for any object usable in templates.\n  The important feature is that they function as dicts, so that their properties\n  can be referenced from django templates.\n  \"\"\"\n  def __init__(self, def_dict):\n    \"\"\"Construct a UseableInTemplates object.\n    Args:\n      def_dict: The discovery dictionary for this element. All the values in it\n          are exposed to the template expander.",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_objects",
        "documentation": {}
    },
    {
        "label": "CodeObject",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_objects",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_objects",
        "peekOfCode": "class CodeObject(UseableInTemplates):\n  \"\"\"Template objects which represents an element that might be in code.\n  This is the base class for things which might be code elements, such as\n  classes, variables and methods.\n  \"\"\"\n  _validator = name_validator\n  def __init__(self, def_dict, api, parent=None, wire_name=None,\n               language_model=None):\n    \"\"\"Construct a CodeObject.\n    Args:",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_objects",
        "documentation": {}
    },
    {
        "label": "Module",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_objects",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_objects",
        "peekOfCode": "class Module(CodeObject):\n  \"\"\"A code object which represents the concept of a module.\n  A Module has two properties available for use in templates:\n    name: The full name of this module, including the parent of this Module.\n    path: The file path where this module would be stored in a full generated\n          code layout. Since the templates can not open files for writing, this\n          is intended for use inside documentation.\n  These values are derived from elements defining the owner of the API or\n  shared data type.\n  Typically, a code generator will create a model (e.g. an Api) and assign a",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_objects",
        "documentation": {}
    },
    {
        "label": "Constant",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_objects",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_objects",
        "peekOfCode": "class Constant(CodeObject):\n  \"\"\"A code object which represents a constant value.\n  Constants have a value and, optionally, a name and description.  The name of\n  a constant is the identifier we would use in a program..  We typically use\n  constants to represent the possible values of an Enum data type.\n  \"\"\"\n  def __init__(self, value, name=None, description=None,\n               parent=None, language_model=None):\n    \"\"\"Construct a Module.\n    Args:",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_objects",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_objects",
        "description": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_objects",
        "peekOfCode": "__author__ = 'aiuto@google.com (Tony Aiuto)'\nimport copy\nfrom googleapis.codegen import utilities\nfrom googleapis.codegen.django_helpers import MarkSafe\nfrom googleapis.codegen.utilities import html_stripper\nfrom googleapis.codegen.utilities import name_validator\nclass UseableInTemplates(object):\n  \"\"\"Base class for any object usable in templates.\n  The important feature is that they function as dicts, so that their properties\n  can be referenced from django templates.",
        "detail": "vendor.google.apiclient-services.generator.src.googleapis.codegen.template_objects",
        "documentation": {}
    },
    {
        "label": "FilesTest",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.tests.filesys.files_test",
        "description": "vendor.google.apiclient-services.generator.tests.filesys.files_test",
        "peekOfCode": "class FilesTest(absltest.TestCase):\n  def setUp(self):\n    self.tempdir = tempfile.mkdtemp()\n    for name in 'abc':\n      open(os.path.join(self.tempdir, name), 'w').write(name)\n  def tearDown(self):\n    shutil.rmtree(self.tempdir)\n  def testGetFileContentsLocal(self):\n    filename = os.path.join(self.tempdir, 'a')\n    contents = files.GetFileContents(filename)",
        "detail": "vendor.google.apiclient-services.generator.tests.filesys.files_test",
        "documentation": {}
    },
    {
        "label": "SingleFileLibraryPackageTest",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.tests.filesys.single_file_library_package_test",
        "description": "vendor.google.apiclient-services.generator.tests.filesys.single_file_library_package_test",
        "peekOfCode": "class SingleFileLibraryPackageTest(absltest.TestCase):\n  def setUp(self):\n    self._output_stream = io.StringIO()\n    self._package = single_file_library_package.SingleFileLibraryPackage(\n        self._output_stream)\n  def tearDown(self):\n    pass\n  def testBasicWriteFile(self):\n    name1 = 'def'\n    content1 = 'contents of def'",
        "detail": "vendor.google.apiclient-services.generator.tests.filesys.single_file_library_package_test",
        "documentation": {}
    },
    {
        "label": "FLAGS",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.tests.filesys.single_file_library_package_test",
        "description": "vendor.google.apiclient-services.generator.tests.filesys.single_file_library_package_test",
        "peekOfCode": "FLAGS = flags.FLAGS\nclass SingleFileLibraryPackageTest(absltest.TestCase):\n  def setUp(self):\n    self._output_stream = io.StringIO()\n    self._package = single_file_library_package.SingleFileLibraryPackage(\n        self._output_stream)\n  def tearDown(self):\n    pass\n  def testBasicWriteFile(self):\n    name1 = 'def'",
        "detail": "vendor.google.apiclient-services.generator.tests.filesys.single_file_library_package_test",
        "documentation": {}
    },
    {
        "label": "TarLibraryPackageTest",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.tests.filesys.tar_library_package_test",
        "description": "vendor.google.apiclient-services.generator.tests.filesys.tar_library_package_test",
        "peekOfCode": "class TarLibraryPackageTest(absltest.TestCase):\n  _FILE_NAME = 'a_test'\n  _DISALLOWED_FILE_NAME = 'unicode_☃☄'\n  _FILE_CONTENTS = u'this is a test - ☃☄'\n  _TEST_DATA_DIR = os.path.join(os.path.dirname(__file__), 'testdata')\n  def setUp(self):\n    self._output_stream = BytesIO()\n    self._package = tar_library_package.TarLibraryPackage(\n        self._output_stream)\n  def tearDown(self):",
        "detail": "vendor.google.apiclient-services.generator.tests.filesys.tar_library_package_test",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.tests.filesys.tar_library_package_test",
        "description": "vendor.google.apiclient-services.generator.tests.filesys.tar_library_package_test",
        "peekOfCode": "__author__ = 'sammccall@google.com (Sam McCall)'\nfrom io import BytesIO\nimport os\nimport tarfile\nimport six\nfrom absl import flags\nfrom absl.testing import absltest\nfrom googleapis.codegen.filesys import tar_library_package\nFLAGS = flags.FLAGS\nclass TarLibraryPackageTest(absltest.TestCase):",
        "detail": "vendor.google.apiclient-services.generator.tests.filesys.tar_library_package_test",
        "documentation": {}
    },
    {
        "label": "FLAGS",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.tests.filesys.tar_library_package_test",
        "description": "vendor.google.apiclient-services.generator.tests.filesys.tar_library_package_test",
        "peekOfCode": "FLAGS = flags.FLAGS\nclass TarLibraryPackageTest(absltest.TestCase):\n  _FILE_NAME = 'a_test'\n  _DISALLOWED_FILE_NAME = 'unicode_☃☄'\n  _FILE_CONTENTS = u'this is a test - ☃☄'\n  _TEST_DATA_DIR = os.path.join(os.path.dirname(__file__), 'testdata')\n  def setUp(self):\n    self._output_stream = BytesIO()\n    self._package = tar_library_package.TarLibraryPackage(\n        self._output_stream)",
        "detail": "vendor.google.apiclient-services.generator.tests.filesys.tar_library_package_test",
        "documentation": {}
    },
    {
        "label": "ZipLibraryPackageTest",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.tests.filesys.zip_library_package_test",
        "description": "vendor.google.apiclient-services.generator.tests.filesys.zip_library_package_test",
        "peekOfCode": "class ZipLibraryPackageTest(absltest.TestCase):\n  _FILE_NAME = 'a_test'\n  _DISALLOWED_FILE_NAME = 'unicode_☃☄'\n  _FILE_CONTENTS = u'this is a test - ☃☄'\n  _TEST_DATA_DIR = os.path.join(os.path.dirname(__file__), 'testdata')\n  def setUp(self):\n    self._output_stream = io.BytesIO()\n    self._package = zip_library_package.ZipLibraryPackage(self._output_stream)\n  def tearDown(self):\n    pass",
        "detail": "vendor.google.apiclient-services.generator.tests.filesys.zip_library_package_test",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.tests.filesys.zip_library_package_test",
        "description": "vendor.google.apiclient-services.generator.tests.filesys.zip_library_package_test",
        "peekOfCode": "__author__ = 'aiuto@google.com (Tony Aiuto)'\nimport io\nimport os\nimport zipfile\nimport six\nfrom absl import flags\nfrom absl.testing import absltest\nfrom googleapis.codegen.filesys import zip_library_package\nFLAGS = flags.FLAGS\nclass ZipLibraryPackageTest(absltest.TestCase):",
        "detail": "vendor.google.apiclient-services.generator.tests.filesys.zip_library_package_test",
        "documentation": {}
    },
    {
        "label": "FLAGS",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.tests.filesys.zip_library_package_test",
        "description": "vendor.google.apiclient-services.generator.tests.filesys.zip_library_package_test",
        "peekOfCode": "FLAGS = flags.FLAGS\nclass ZipLibraryPackageTest(absltest.TestCase):\n  _FILE_NAME = 'a_test'\n  _DISALLOWED_FILE_NAME = 'unicode_☃☄'\n  _FILE_CONTENTS = u'this is a test - ☃☄'\n  _TEST_DATA_DIR = os.path.join(os.path.dirname(__file__), 'testdata')\n  def setUp(self):\n    self._output_stream = io.BytesIO()\n    self._package = zip_library_package.ZipLibraryPackage(self._output_stream)\n  def tearDown(self):",
        "detail": "vendor.google.apiclient-services.generator.tests.filesys.zip_library_package_test",
        "documentation": {}
    },
    {
        "label": "ConvertSizeTest",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.tests.utilities.convert_size_test",
        "description": "vendor.google.apiclient-services.generator.tests.utilities.convert_size_test",
        "peekOfCode": "class ConvertSizeTest(absltest.TestCase):\n  \"\"\"Test for unit conversion.\"\"\"\n  def testConvertSize(self):\n    self.assertEqual(None, convert_size.ConvertSize(None))\n    self.assertEqual(None, convert_size.ConvertSize('4'))\n    self.assertEqual(None, convert_size.ConvertSize('4C'))\n    self.assertEqual(4, convert_size.ConvertSize('4B'))\n    self.assertEqual(4 * 2 ** 10, convert_size.ConvertSize('4KB'))\n    self.assertEqual(12 * 2 ** 20, convert_size.ConvertSize('12MB'))\n    self.assertEqual(10 * 2 ** 30, convert_size.ConvertSize('10GB'))",
        "detail": "vendor.google.apiclient-services.generator.tests.utilities.convert_size_test",
        "documentation": {}
    },
    {
        "label": "JsonExpanderTest",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.tests.utilities.json_expander_test",
        "description": "vendor.google.apiclient-services.generator.tests.utilities.json_expander_test",
        "peekOfCode": "class JsonExpanderTest(absltest.TestCase):\n  def testExpand(self):\n    x_val = \"foo\"\n    y_val = \"bar\"\n    d = dict(x=x_val, y=y_val, t1=\"$x\", t2=\"${y}\",\n             r={\"t\": \"$x$y\", \"l\": [3, \"$x\"]})\n    expanded = json_expander.ExpandJsonTemplate(d)\n    self.assertEqual(x_val, expanded[\"t1\"])\n    self.assertEqual(y_val, expanded[\"t2\"])\n    self.assertEqual(x_val + y_val, expanded[\"r\"][\"t\"])",
        "detail": "vendor.google.apiclient-services.generator.tests.utilities.json_expander_test",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.tests.utilities.json_expander_test",
        "description": "vendor.google.apiclient-services.generator.tests.utilities.json_expander_test",
        "peekOfCode": "__author__ = \"smulloni@google.com (Jacob Smullyan)\"\nfrom absl.testing import absltest\nfrom googleapis.codegen.utilities import json_expander\nclass JsonExpanderTest(absltest.TestCase):\n  def testExpand(self):\n    x_val = \"foo\"\n    y_val = \"bar\"\n    d = dict(x=x_val, y=y_val, t1=\"$x\", t2=\"${y}\",\n             r={\"t\": \"$x$y\", \"l\": [3, \"$x\"]})\n    expanded = json_expander.ExpandJsonTemplate(d)",
        "detail": "vendor.google.apiclient-services.generator.tests.utilities.json_expander_test",
        "documentation": {}
    },
    {
        "label": "JsonWithCommentsTest",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.tests.utilities.json_with_comments_test",
        "description": "vendor.google.apiclient-services.generator.tests.utilities.json_with_comments_test",
        "peekOfCode": "class JsonWithCommentsTest(absltest.TestCase):\n  SOME_JSON_WITH_COMMENTS = \"\"\"\n    # Garlic and sapphires in the mud\n    # Clot the bedded axle-tree.\n    {\"author\": \"Timmy\",\n     \"books\": [\n       # Diet classic\n       \"The Waist Band\"\n     ]\n    }",
        "detail": "vendor.google.apiclient-services.generator.tests.utilities.json_with_comments_test",
        "documentation": {}
    },
    {
        "label": "NameValidatorTest",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.tests.utilities.name_validator_test",
        "description": "vendor.google.apiclient-services.generator.tests.utilities.name_validator_test",
        "peekOfCode": "class NameValidatorTest(absltest.TestCase):\n  def testVariableNameValidator(self):\n    good_names = ['$ref', '_a', '_private', 'a_var.name', 't1', 'max-results',\n                  'slashes/are/allowed', '/even/at/the/start/and/end/',\n                  'now_valid.', '@foo', 'foo$bar']\n    bad_names = ['$', '1st_result', '^test', '.variable', '1', '_', 'no spaces',\n                 'foo@']\n    for varname in good_names:\n      name_validator.Validate(varname)\n    for varname in bad_names:",
        "detail": "vendor.google.apiclient-services.generator.tests.utilities.name_validator_test",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.tests.utilities.name_validator_test",
        "description": "vendor.google.apiclient-services.generator.tests.utilities.name_validator_test",
        "peekOfCode": "__author__ = 'wclarkso@google.com (Will Clarkson)'\nimport six\nfrom absl.testing import absltest\nfrom googleapis.codegen.utilities import name_validator\nclass NameValidatorTest(absltest.TestCase):\n  def testVariableNameValidator(self):\n    good_names = ['$ref', '_a', '_private', 'a_var.name', 't1', 'max-results',\n                  'slashes/are/allowed', '/even/at/the/start/and/end/',\n                  'now_valid.', '@foo', 'foo$bar']\n    bad_names = ['$', '1st_result', '^test', '.variable', '1', '_', 'no spaces',",
        "detail": "vendor.google.apiclient-services.generator.tests.utilities.name_validator_test",
        "documentation": {}
    },
    {
        "label": "OrderedSetTest",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.tests.utilities.ordered_set_test",
        "description": "vendor.google.apiclient-services.generator.tests.utilities.ordered_set_test",
        "peekOfCode": "class OrderedSetTest(absltest.TestCase):\n  def testFrozenSet(self):\n    s = ordered_set.FrozenOrderedSet(range(5))\n    self.assertEqual(5, len(s))\n    self.assertTrue(4 in s)\n    self.assertEqual([x for x in range(5)], list(s))\n  def testMutableSet(self):\n    s = ordered_set.MutableOrderedSet()\n    for i in range(5):\n      s.add(i)",
        "detail": "vendor.google.apiclient-services.generator.tests.utilities.ordered_set_test",
        "documentation": {}
    },
    {
        "label": "UtilitiesTest",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.tests.utilities.utilities_test",
        "description": "vendor.google.apiclient-services.generator.tests.utilities.utilities_test",
        "peekOfCode": "class UtilitiesTest(absltest.TestCase):\n  def testCamelCase(self):\n    \"\"\"Basic CamelCase functionality.\"\"\"\n    self.assertEqual('HelloWorld', utilities.CamelCase('hello_world'))\n    self.assertEqual('HelloWorld', utilities.CamelCase('hello-world'))\n    self.assertEqual('HelloWorld', utilities.CamelCase('helloWorld'))\n    self.assertEqual('HelloWorld', utilities.CamelCase('Hello_world'))\n    self.assertEqual('HelloWorld', utilities.CamelCase('_hello_world'))\n    self.assertEqual('HelloWorld', utilities.CamelCase('helloWorld'))\n    self.assertEqual('HelloWorld', utilities.CamelCase('hello.world'))",
        "detail": "vendor.google.apiclient-services.generator.tests.utilities.utilities_test",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.tests.utilities.utilities_test",
        "description": "vendor.google.apiclient-services.generator.tests.utilities.utilities_test",
        "peekOfCode": "__author__ = 'aiuto@google.com (Tony Aiuto)'\nfrom absl.testing import absltest\nimport googleapis.codegen.utilities as utilities\nclass UtilitiesTest(absltest.TestCase):\n  def testCamelCase(self):\n    \"\"\"Basic CamelCase functionality.\"\"\"\n    self.assertEqual('HelloWorld', utilities.CamelCase('hello_world'))\n    self.assertEqual('HelloWorld', utilities.CamelCase('hello-world'))\n    self.assertEqual('HelloWorld', utilities.CamelCase('helloWorld'))\n    self.assertEqual('HelloWorld', utilities.CamelCase('Hello_world'))",
        "detail": "vendor.google.apiclient-services.generator.tests.utilities.utilities_test",
        "documentation": {}
    },
    {
        "label": "ApiExceptionTest",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.tests.api_exception_test",
        "description": "vendor.google.apiclient-services.generator.tests.api_exception_test",
        "peekOfCode": "class ApiExceptionTest(absltest.TestCase):\n  def testExceptionStr(self):\n    e = ApiException('foo')\n    self.assertEqual('foo', str(e))\n    e = ApiException('foo', {'bar': 1})\n    self.assertEqual(\"\"\"foo: {'bar': 1}\"\"\", str(e))\nif __name__ == '__main__':\n  absltest.main()",
        "detail": "vendor.google.apiclient-services.generator.tests.api_exception_test",
        "documentation": {}
    },
    {
        "label": "FakeLanguageModel",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.tests.api_test",
        "description": "vendor.google.apiclient-services.generator.tests.api_test",
        "peekOfCode": "class FakeLanguageModel(language_model.LanguageModel):\n  def GetCodeTypeFromDictionary(self, def_dict):\n    return def_dict.get('type')\n  def ArrayOf(self, unused_var, s):\n    return 'Array[%s]' % s\nclass ApiTest(absltest.TestCase):\n  # The base discovery doc for most tests.\n  _TEST_DISCOVERY_DOC = 'sample_discovery.json'\n  _TEST_DISCOVERY_RPC_DOC = 'sample_discovery.rpc.json'\n  _TEST_SHARED_TYPES_DOC = 'sample_shared.json'",
        "detail": "vendor.google.apiclient-services.generator.tests.api_test",
        "documentation": {}
    },
    {
        "label": "ApiTest",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.tests.api_test",
        "description": "vendor.google.apiclient-services.generator.tests.api_test",
        "peekOfCode": "class ApiTest(absltest.TestCase):\n  # The base discovery doc for most tests.\n  _TEST_DISCOVERY_DOC = 'sample_discovery.json'\n  _TEST_DISCOVERY_RPC_DOC = 'sample_discovery.rpc.json'\n  _TEST_SHARED_TYPES_DOC = 'sample_shared.json'\n  _TEST_VERSIONED_DOC = 'versioned_sample_discovery.json'\n  def ApiFromDiscoveryDoc(self, path):\n    \"\"\"Load a discovery doc from a file and creates a library Api.\n    Args:\n      path: (str) The path to the document.",
        "detail": "vendor.google.apiclient-services.generator.tests.api_test",
        "documentation": {}
    },
    {
        "label": "ApiModulesTest",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.tests.api_test",
        "description": "vendor.google.apiclient-services.generator.tests.api_test",
        "peekOfCode": "class ApiModulesTest(absltest.TestCase):\n  def setUp(self):\n    self.discovery_doc = json.loads(\n        \"\"\"\n        {\n         \"name\": \"fake\",\n         \"version\": \"v1\",\n         \"schemas\": {},\n         \"resources\": {}\n        }",
        "detail": "vendor.google.apiclient-services.generator.tests.api_test",
        "documentation": {}
    },
    {
        "label": "FindByWireName",
        "kind": 2,
        "importPath": "vendor.google.apiclient-services.generator.tests.api_test",
        "description": "vendor.google.apiclient-services.generator.tests.api_test",
        "peekOfCode": "def FindByWireName(list_of_resource_or_method, wire_name):\n  \"\"\"Find an element in a list by its \"wireName\".\n  The \"wireName\" is the name of the method \"on the wire\", which is the raw name\n  as it appears in the JSON.\n  Args:\n    list_of_resource_or_method: A list of resource or methods as annotated by\n      the Api.\n    wire_name: (str): the name to fine.\n  Returns:\n    dict or None",
        "detail": "vendor.google.apiclient-services.generator.tests.api_test",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.tests.api_test",
        "description": "vendor.google.apiclient-services.generator.tests.api_test",
        "peekOfCode": "__author__ = 'aiuto@google.com (Tony Aiuto)'\nimport json\nimport os\nfrom absl import flags\nfrom absl.testing import absltest\nfrom googleapis.codegen import data_types\nfrom googleapis.codegen import language_model\nfrom googleapis.codegen.api import Api\nfrom googleapis.codegen.api import AuthScope\nfrom googleapis.codegen.api import Method",
        "detail": "vendor.google.apiclient-services.generator.tests.api_test",
        "documentation": {}
    },
    {
        "label": "FLAGS",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.tests.api_test",
        "description": "vendor.google.apiclient-services.generator.tests.api_test",
        "peekOfCode": "FLAGS = flags.FLAGS\nclass FakeLanguageModel(language_model.LanguageModel):\n  def GetCodeTypeFromDictionary(self, def_dict):\n    return def_dict.get('type')\n  def ArrayOf(self, unused_var, s):\n    return 'Array[%s]' % s\nclass ApiTest(absltest.TestCase):\n  # The base discovery doc for most tests.\n  _TEST_DISCOVERY_DOC = 'sample_discovery.json'\n  _TEST_DISCOVERY_RPC_DOC = 'sample_discovery.rpc.json'",
        "detail": "vendor.google.apiclient-services.generator.tests.api_test",
        "documentation": {}
    },
    {
        "label": "ConfigurationTest",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.tests.configuration_test",
        "description": "vendor.google.apiclient-services.generator.tests.configuration_test",
        "peekOfCode": "class ConfigurationTest(absltest.TestCase):\n  _SRC_DATA_DIR = os.path.dirname(__file__)\n  @staticmethod\n  def WalkFileTree(pattern, root=_SRC_DATA_DIR):\n    \"\"\"Walk the source file tree and return file paths matching the pattern.\n    Args:\n      pattern: (str) A regex for a file pattern.\n      root: (str) root of search tree.\n    Yields:\n      (str) list of path names",
        "detail": "vendor.google.apiclient-services.generator.tests.configuration_test",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.tests.configuration_test",
        "description": "vendor.google.apiclient-services.generator.tests.configuration_test",
        "peekOfCode": "__author__ = 'aiuto@google.com (Tony Aiuto)'\nimport os\nimport re\nfrom absl.testing import absltest\nfrom googleapis.codegen.utilities import json_expander\nfrom googleapis.codegen.utilities import json_with_comments\nclass ConfigurationTest(absltest.TestCase):\n  _SRC_DATA_DIR = os.path.dirname(__file__)\n  @staticmethod\n  def WalkFileTree(pattern, root=_SRC_DATA_DIR):",
        "detail": "vendor.google.apiclient-services.generator.tests.configuration_test",
        "documentation": {}
    },
    {
        "label": "DataTypesTest",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.tests.data_types_test",
        "description": "vendor.google.apiclient-services.generator.tests.data_types_test",
        "peekOfCode": "class DataTypesTest(absltest.TestCase):\n  def testVoidDataTypeDefault(self):\n    api = template_objects.CodeObject({}, None)\n    void = data_types.Void(api)\n    api.SetLanguageModel(language_model.LanguageModel())\n    self.assertEqual('void', void.code_type)\n  def testVoidDataTypeOverride(self):\n    class FakeLM(language_model.LanguageModel):\n      def CodeTypeForVoid(self):\n        return 'the absence of all'",
        "detail": "vendor.google.apiclient-services.generator.tests.data_types_test",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.tests.data_types_test",
        "description": "vendor.google.apiclient-services.generator.tests.data_types_test",
        "peekOfCode": "__author__ = 'aiuto@google.com (Tony Aiuto)'\nfrom absl.testing import absltest\nfrom googleapis.codegen import data_types\nfrom googleapis.codegen import language_model\nfrom googleapis.codegen import template_objects\nclass DataTypesTest(absltest.TestCase):\n  def testVoidDataTypeDefault(self):\n    api = template_objects.CodeObject({}, None)\n    void = data_types.Void(api)\n    api.SetLanguageModel(language_model.LanguageModel())",
        "detail": "vendor.google.apiclient-services.generator.tests.data_types_test",
        "documentation": {}
    },
    {
        "label": "DataValueTest",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.tests.data_value_test",
        "description": "vendor.google.apiclient-services.generator.tests.data_value_test",
        "peekOfCode": "class DataValueTest(absltest.TestCase):\n  def setUp(self):\n    super(DataValueTest, self).setUp()\n    self.language_model = language_model.LanguageModel(class_name_delimiter='|')\n  def testDataValue(self):\n    foo_def_dict = {\n        'className': 'Foo',\n        'type': 'string',\n        }\n    prototype = data_types.DataType(",
        "detail": "vendor.google.apiclient-services.generator.tests.data_value_test",
        "documentation": {}
    },
    {
        "label": "DataValueRenderingTest",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.tests.data_value_test",
        "description": "vendor.google.apiclient-services.generator.tests.data_value_test",
        "peekOfCode": "class DataValueRenderingTest(absltest.TestCase):\n  \"\"\"Tests for DataValue rendering methods in template_helpers.\"\"\"\n  def _GetContext(self, data=None):\n    return django_template.Context(data or {})\n  def testDataContextNode(self):\n    # This happens to test the \"value_of\" tag as well.\n    lang_model = language_model.LanguageModel('|')\n    foo_def_dict = {\n        'className': 'Foo',\n        'type': 'string',",
        "detail": "vendor.google.apiclient-services.generator.tests.data_value_test",
        "documentation": {}
    },
    {
        "label": "DocumentingLanguageModelTest",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.tests.documenting_language_model_test",
        "description": "vendor.google.apiclient-services.generator.tests.documenting_language_model_test",
        "peekOfCode": "class DocumentingLanguageModelTest(absltest.TestCase):\n  def testDocumentingLanguageModel(self):\n    dlm = language_model.DocumentingLanguageModel()\n    self.assertEqual('Array<foo>', dlm.ArrayOf(None, 'foo'))\n    self.assertEqual('Map<string, foo>', dlm.MapOf(None, 'foo'))\n    self.assertEqual('foo', dlm.GetCodeTypeFromDictionary({'type': 'foo'}))\n    self.assertEqual('foo (int)', dlm.GetCodeTypeFromDictionary({\n        'type': 'foo', 'format': 'int'}))\nif __name__ == '__main__':\n  absltest.main()",
        "detail": "vendor.google.apiclient-services.generator.tests.documenting_language_model_test",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.tests.documenting_language_model_test",
        "description": "vendor.google.apiclient-services.generator.tests.documenting_language_model_test",
        "peekOfCode": "__author__ = 'aiuto@google.com (Tony Aiuto)'\nfrom absl.testing import absltest\nfrom googleapis.codegen import language_model\nclass DocumentingLanguageModelTest(absltest.TestCase):\n  def testDocumentingLanguageModel(self):\n    dlm = language_model.DocumentingLanguageModel()\n    self.assertEqual('Array<foo>', dlm.ArrayOf(None, 'foo'))\n    self.assertEqual('Map<string, foo>', dlm.MapOf(None, 'foo'))\n    self.assertEqual('foo', dlm.GetCodeTypeFromDictionary({'type': 'foo'}))\n    self.assertEqual('foo (int)', dlm.GetCodeTypeFromDictionary({",
        "detail": "vendor.google.apiclient-services.generator.tests.documenting_language_model_test",
        "documentation": {}
    },
    {
        "label": "GenerateLibraryTest",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.tests.generate_library_test",
        "description": "vendor.google.apiclient-services.generator.tests.generate_library_test",
        "peekOfCode": "class GenerateLibraryTest(absltest.TestCase):\n  def AssertRaisesContainingText(self, expected_exception, function,\n                                 expected_text):\n    expected_exception_name = expected_exception.__class__.__name__\n    try:\n      function()\n    except expected_exception as got:\n      if str(got).find(expected_text) < 0:\n        self.fail('Expected %s in exception. Got: %s' % (expected_text, got))\n    except Exception as got:",
        "detail": "vendor.google.apiclient-services.generator.tests.generate_library_test",
        "documentation": {}
    },
    {
        "label": "CallGeneratorMain",
        "kind": 2,
        "importPath": "vendor.google.apiclient-services.generator.tests.generate_library_test",
        "description": "vendor.google.apiclient-services.generator.tests.generate_library_test",
        "peekOfCode": "def CallGeneratorMain():\n  generate_library.main([])\nclass GenerateLibraryTest(absltest.TestCase):\n  def AssertRaisesContainingText(self, expected_exception, function,\n                                 expected_text):\n    expected_exception_name = expected_exception.__class__.__name__\n    try:\n      function()\n    except expected_exception as got:\n      if str(got).find(expected_text) < 0:",
        "detail": "vendor.google.apiclient-services.generator.tests.generate_library_test",
        "documentation": {}
    },
    {
        "label": "FLAGS",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.tests.generate_library_test",
        "description": "vendor.google.apiclient-services.generator.tests.generate_library_test",
        "peekOfCode": "FLAGS = flags.FLAGS\ndef CallGeneratorMain():\n  generate_library.main([])\nclass GenerateLibraryTest(absltest.TestCase):\n  def AssertRaisesContainingText(self, expected_exception, function,\n                                 expected_text):\n    expected_exception_name = expected_exception.__class__.__name__\n    try:\n      function()\n    except expected_exception as got:",
        "detail": "vendor.google.apiclient-services.generator.tests.generate_library_test",
        "documentation": {}
    },
    {
        "label": "GeneratorLookupTest",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.tests.generator_lookup_test",
        "description": "vendor.google.apiclient-services.generator.tests.generator_lookup_test",
        "peekOfCode": "class GeneratorLookupTest(absltest.TestCase):\n  def testDetermineGenerator(self):\n    test_gen = generator_lookup.GetGeneratorByLanguage('php')\n    self.assertEqual(php_generator.PHPGenerator, test_gen)\n    self.assertRaises(\n        ValueError, generator_lookup.GetGeneratorByLanguage,\n        'I\\'m an invalid language!')\n  def testSupportedLanguage(self):\n    languages = generator_lookup.SupportedLanguages()\n    self.assertContainsSubset(['php'], languages)",
        "detail": "vendor.google.apiclient-services.generator.tests.generator_lookup_test",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.tests.generator_lookup_test",
        "description": "vendor.google.apiclient-services.generator.tests.generator_lookup_test",
        "peekOfCode": "__author__ = 'akesling@google.com (Alex Kesling)'\nimport json\nimport os\nfrom absl.testing import absltest\nfrom googleapis.codegen import generator_lookup\nfrom googleapis.codegen import php_generator\nfrom googleapis.codegen import targets\nclass GeneratorLookupTest(absltest.TestCase):\n  def testDetermineGenerator(self):\n    test_gen = generator_lookup.GetGeneratorByLanguage('php')",
        "detail": "vendor.google.apiclient-services.generator.tests.generator_lookup_test",
        "documentation": {}
    },
    {
        "label": "GeneratorTest",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.tests.generator_test",
        "description": "vendor.google.apiclient-services.generator.tests.generator_test",
        "peekOfCode": "class GeneratorTest(absltest.TestCase):\n  _TEST_DATA_DIR = os.path.abspath(\n    os.path.join(os.path.dirname(__file__), 'testdata')\n  )\n  def setUp(self):\n    self._output_stream = io.BytesIO()\n    self._package = zip_library_package.ZipLibraryPackage(self._output_stream)\n    self._path_replacements = {\n        '___package_path___': 'pp'\n        }",
        "detail": "vendor.google.apiclient-services.generator.tests.generator_test",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.tests.generator_test",
        "description": "vendor.google.apiclient-services.generator.tests.generator_test",
        "peekOfCode": "__author__ = 'aiuto@google.com (Tony Aiuto)'\nimport io\nimport logging\nimport os\nimport zipfile\nfrom absl.testing import absltest\nfrom googleapis.codegen import generator\nfrom googleapis.codegen.filesys import zip_library_package\nclass GeneratorTest(absltest.TestCase):\n  _TEST_DATA_DIR = os.path.abspath(",
        "detail": "vendor.google.apiclient-services.generator.tests.generator_test",
        "documentation": {}
    },
    {
        "label": "GoldenTest",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.tests.golden_test",
        "description": "vendor.google.apiclient-services.generator.tests.golden_test",
        "peekOfCode": "class GoldenTest(absltest.TestCase):\n  def FindTests(self):\n    \"\"\"Finds golden files and returns Test cases for each.\"\"\"\n    for root, _, files in os.walk(GOLDEN_CASES_DIR):\n      print(root)\n      print(files)\n      path_parts = root.split('/')\n      if path_parts[-3] == 'golden':\n        language = path_parts[-2]\n        variant = path_parts[-1]",
        "detail": "vendor.google.apiclient-services.generator.tests.golden_test",
        "documentation": {}
    },
    {
        "label": "test_dir",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.tests.golden_test",
        "description": "vendor.google.apiclient-services.generator.tests.golden_test",
        "peekOfCode": "test_dir = os.path.dirname(os.path.realpath(__file__))\nGOLDEN_CASES_DIR = test_dir + '/testdata/golden'\nGOLDEN_DISCOVERY_DIR = test_dir + '/testdata/golden_discovery'\nCODEGEN_DIR = test_dir + '/../src/googleapis/codegen'\nVERBOSE = False\nTest = namedtuple('Test', [\n    'language',\n    'variant',\n    'input',\n    'options',",
        "detail": "vendor.google.apiclient-services.generator.tests.golden_test",
        "documentation": {}
    },
    {
        "label": "GOLDEN_CASES_DIR",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.tests.golden_test",
        "description": "vendor.google.apiclient-services.generator.tests.golden_test",
        "peekOfCode": "GOLDEN_CASES_DIR = test_dir + '/testdata/golden'\nGOLDEN_DISCOVERY_DIR = test_dir + '/testdata/golden_discovery'\nCODEGEN_DIR = test_dir + '/../src/googleapis/codegen'\nVERBOSE = False\nTest = namedtuple('Test', [\n    'language',\n    'variant',\n    'input',\n    'options',\n    'golden_file'])",
        "detail": "vendor.google.apiclient-services.generator.tests.golden_test",
        "documentation": {}
    },
    {
        "label": "GOLDEN_DISCOVERY_DIR",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.tests.golden_test",
        "description": "vendor.google.apiclient-services.generator.tests.golden_test",
        "peekOfCode": "GOLDEN_DISCOVERY_DIR = test_dir + '/testdata/golden_discovery'\nCODEGEN_DIR = test_dir + '/../src/googleapis/codegen'\nVERBOSE = False\nTest = namedtuple('Test', [\n    'language',\n    'variant',\n    'input',\n    'options',\n    'golden_file'])\nclass GoldenTest(absltest.TestCase):",
        "detail": "vendor.google.apiclient-services.generator.tests.golden_test",
        "documentation": {}
    },
    {
        "label": "CODEGEN_DIR",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.tests.golden_test",
        "description": "vendor.google.apiclient-services.generator.tests.golden_test",
        "peekOfCode": "CODEGEN_DIR = test_dir + '/../src/googleapis/codegen'\nVERBOSE = False\nTest = namedtuple('Test', [\n    'language',\n    'variant',\n    'input',\n    'options',\n    'golden_file'])\nclass GoldenTest(absltest.TestCase):\n  def FindTests(self):",
        "detail": "vendor.google.apiclient-services.generator.tests.golden_test",
        "documentation": {}
    },
    {
        "label": "VERBOSE",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.tests.golden_test",
        "description": "vendor.google.apiclient-services.generator.tests.golden_test",
        "peekOfCode": "VERBOSE = False\nTest = namedtuple('Test', [\n    'language',\n    'variant',\n    'input',\n    'options',\n    'golden_file'])\nclass GoldenTest(absltest.TestCase):\n  def FindTests(self):\n    \"\"\"Finds golden files and returns Test cases for each.\"\"\"",
        "detail": "vendor.google.apiclient-services.generator.tests.golden_test",
        "documentation": {}
    },
    {
        "label": "Test",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.tests.golden_test",
        "description": "vendor.google.apiclient-services.generator.tests.golden_test",
        "peekOfCode": "Test = namedtuple('Test', [\n    'language',\n    'variant',\n    'input',\n    'options',\n    'golden_file'])\nclass GoldenTest(absltest.TestCase):\n  def FindTests(self):\n    \"\"\"Finds golden files and returns Test cases for each.\"\"\"\n    for root, _, files in os.walk(GOLDEN_CASES_DIR):",
        "detail": "vendor.google.apiclient-services.generator.tests.golden_test",
        "documentation": {}
    },
    {
        "label": "LanguageModelTest",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.tests.language_model_test",
        "description": "vendor.google.apiclient-services.generator.tests.language_model_test",
        "peekOfCode": "class LanguageModelTest(absltest.TestCase):\n  def setUp(self):\n    self.language_model = language_model.LanguageModel()\n  def _CreateDataValue(self, value, val_type):\n    def_dict = {\n        'className': 'Foo',\n        'type': val_type,\n        }\n    prototype = data_types.DataType(\n        def_dict, None, language_model=self.language_model)",
        "detail": "vendor.google.apiclient-services.generator.tests.language_model_test",
        "documentation": {}
    },
    {
        "label": "LanguagePolicyTest",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.tests.language_model_test",
        "description": "vendor.google.apiclient-services.generator.tests.language_model_test",
        "peekOfCode": "class LanguagePolicyTest(absltest.TestCase):\n  def testApplyCaseTransform(self):\n    class TestLanguageModel(language_model.LanguageModel):\n      allowed_characters = '#'\n      def __init__(self, **kwargs):\n        super(TestLanguageModel, self).__init__(**kwargs)\n    m = TestLanguageModel()\n    # An identifier with several bad characters, including one at the end\n    # which we expect to strip off.\n    s = 'I-am -a_tesT@'",
        "detail": "vendor.google.apiclient-services.generator.tests.language_model_test",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.tests.language_model_test",
        "description": "vendor.google.apiclient-services.generator.tests.language_model_test",
        "peekOfCode": "__author__ = 'akesling@google.com (Alex Kesling)'\nfrom absl.testing import absltest\nfrom googleapis.codegen import data_types\nfrom googleapis.codegen import data_value\nfrom googleapis.codegen import language_model\nfrom googleapis.codegen.template_objects import CodeObject\nclass LanguageModelTest(absltest.TestCase):\n  def setUp(self):\n    self.language_model = language_model.LanguageModel()\n  def _CreateDataValue(self, value, val_type):",
        "detail": "vendor.google.apiclient-services.generator.tests.language_model_test",
        "documentation": {}
    },
    {
        "label": "FakeLanguageModel",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.tests.schema_test",
        "description": "vendor.google.apiclient-services.generator.tests.schema_test",
        "peekOfCode": "class FakeLanguageModel(language_model.LanguageModel):\n  language = 'fake'\n  def GetCodeTypeFromDictionary(self, def_dict):\n    return def_dict.get('type')\n  def ArrayOf(self, unused_var, s):\n    return 'Array[%s]' % s\n  def ToMemberName(self, s, unused_api):\n    return s.replace('-', '_')\ndef MakeApiWithSchemas(schemas):\n  discovery_doc = {",
        "detail": "vendor.google.apiclient-services.generator.tests.schema_test",
        "documentation": {}
    },
    {
        "label": "SchemaTest",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.tests.schema_test",
        "description": "vendor.google.apiclient-services.generator.tests.schema_test",
        "peekOfCode": "class SchemaTest(absltest.TestCase):\n  \"\"\"Tests for the Schema class.\"\"\"\n  def testArrayOfArray(self):\n    api = MakeApiWithSchemas({\n        'AdsenseReportsGenerateResponse': {\n            'id': 'AdsenseReportsGenerateResponse',\n            'type': 'object',\n            'properties': {\n                'basic': {\n                    'type': 'string'",
        "detail": "vendor.google.apiclient-services.generator.tests.schema_test",
        "documentation": {}
    },
    {
        "label": "MakeApiWithSchemas",
        "kind": 2,
        "importPath": "vendor.google.apiclient-services.generator.tests.schema_test",
        "description": "vendor.google.apiclient-services.generator.tests.schema_test",
        "peekOfCode": "def MakeApiWithSchemas(schemas):\n  discovery_doc = {\n      'name': 'fake',\n      'version': 'v1',\n      'resources': {},\n      'schemas': schemas\n      }\n  api = Api(discovery_doc)\n  api.VisitAll(lambda o: o.SetLanguageModel(FakeLanguageModel()))\n  return api",
        "detail": "vendor.google.apiclient-services.generator.tests.schema_test",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.tests.schema_test",
        "description": "vendor.google.apiclient-services.generator.tests.schema_test",
        "peekOfCode": "__author__ = 'aiuto@google.com (Tony Aiuto)'\nfrom absl.testing import absltest\nfrom googleapis.codegen import language_model\nfrom googleapis.codegen.api import Api\nfrom googleapis.codegen.api_exception import ApiException\nfrom googleapis.codegen.schema import Schema\nclass FakeLanguageModel(language_model.LanguageModel):\n  language = 'fake'\n  def GetCodeTypeFromDictionary(self, def_dict):\n    return def_dict.get('type')",
        "detail": "vendor.google.apiclient-services.generator.tests.schema_test",
        "documentation": {}
    },
    {
        "label": "BaseTargetsTest",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.tests.targets_test",
        "description": "vendor.google.apiclient-services.generator.tests.targets_test",
        "peekOfCode": "class BaseTargetsTest(absltest.TestCase):\n  def setUp(self):\n    testdata_dir = os.path.join(os.path.dirname(__file__), 'testdata')\n    self.targets = targets.Targets(\n        os.path.join(testdata_dir, 'targets_test.json'),\n        os.path.join(testdata_dir, 'languages'))\nclass TargetsTest(BaseTargetsTest):\n  def testTargetsAccessors(self):\n    rawdata = self.targets.Dict()\n    self.assertTrue('languages' in rawdata)",
        "detail": "vendor.google.apiclient-services.generator.tests.targets_test",
        "documentation": {}
    },
    {
        "label": "TargetsTest",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.tests.targets_test",
        "description": "vendor.google.apiclient-services.generator.tests.targets_test",
        "peekOfCode": "class TargetsTest(BaseTargetsTest):\n  def testTargetsAccessors(self):\n    rawdata = self.targets.Dict()\n    self.assertTrue('languages' in rawdata)\n    self.assertTrue(\n        self.targets.VariationsForLanguage('php').IsValid('preview'))\n    self.assertTrue(\n        self.targets.VariationsForLanguage('python').IsValid('stable'))\n    self.assertTrue('displayName' in self.targets.GetLanguage('php'))\n    self.assertTrue('python' in self.targets.Languages())",
        "detail": "vendor.google.apiclient-services.generator.tests.targets_test",
        "documentation": {}
    },
    {
        "label": "FeaturesLoadingTest",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.tests.targets_test",
        "description": "vendor.google.apiclient-services.generator.tests.targets_test",
        "peekOfCode": "class FeaturesLoadingTest(BaseTargetsTest):\n  def testGetFeatures(self):\n    variations = self.targets.VariationsForLanguage('php')\n    features = variations.GetFeatures('preview')\n    # Something from the top level\n    self.assertEqual(True, features.get('library'))\n    # Something overridden in the variation specific file\n    self.assertEqual('base-client-library', features.get('baseClientLibrary'))\n    self.assertEqual('release-version', features.get('releaseVersion'))\n  def testGetFeaturesWithoutOverride(self):",
        "detail": "vendor.google.apiclient-services.generator.tests.targets_test",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.tests.targets_test",
        "description": "vendor.google.apiclient-services.generator.tests.targets_test",
        "peekOfCode": "__author__ = 'jcgregorio@google.com (Joe Gregorio)'\nimport os\nfrom absl.testing import absltest\nfrom googleapis.codegen import targets\nclass BaseTargetsTest(absltest.TestCase):\n  def setUp(self):\n    testdata_dir = os.path.join(os.path.dirname(__file__), 'testdata')\n    self.targets = targets.Targets(\n        os.path.join(testdata_dir, 'targets_test.json'),\n        os.path.join(testdata_dir, 'languages'))",
        "detail": "vendor.google.apiclient-services.generator.tests.targets_test",
        "documentation": {}
    },
    {
        "label": "TemplateHelpersTest",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.tests.template_helpers_test",
        "description": "vendor.google.apiclient-services.generator.tests.template_helpers_test",
        "peekOfCode": "class TemplateHelpersTest(absltest.TestCase):\n  _TEST_DATA_DIR = os.path.join(os.path.dirname(__file__), 'testdata')\n  def testExtractCommentPrefix(self):\n    self.assertEqual('   *',\n                      template_helpers._ExtractCommentPrefix('   * hello'))\n    self.assertEqual('   *',\n                      template_helpers._ExtractCommentPrefix('   *hello'))\n    self.assertEqual('//',\n                      template_helpers._ExtractCommentPrefix('// hello'))\n    self.assertEqual('#',",
        "detail": "vendor.google.apiclient-services.generator.tests.template_helpers_test",
        "documentation": {}
    },
    {
        "label": "TemplateGlobalsTest",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.tests.template_helpers_test",
        "description": "vendor.google.apiclient-services.generator.tests.template_helpers_test",
        "peekOfCode": "class TemplateGlobalsTest(absltest.TestCase):\n  def testSetContext(self):\n    self.assertIsNone(template_helpers.GetCurrentContext())\n    data = {'key': 'value'}\n    with template_helpers.SetCurrentContext(data):\n      ctxt = template_helpers.GetCurrentContext()\n      self.assertIsNotNone(ctxt)\n      self.assertEqual('value', ctxt['key'])\n    self.assertIsNone(template_helpers.GetCurrentContext())\nif __name__ == '__main__':",
        "detail": "vendor.google.apiclient-services.generator.tests.template_helpers_test",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.tests.template_helpers_test",
        "description": "vendor.google.apiclient-services.generator.tests.template_helpers_test",
        "peekOfCode": "__author__ = 'aiuto@google.com (Tony Aiuto)'\nimport hashlib\nimport os\nimport textwrap\nfrom absl.testing import absltest\n# pylint: disable=unused-import\nfrom googleapis.codegen import django_helpers\nfrom googleapis.codegen import template_helpers\nfrom django import template as django_template  # pylint: disable=g-bad-import-order\nclass TemplateHelpersTest(absltest.TestCase):",
        "detail": "vendor.google.apiclient-services.generator.tests.template_helpers_test",
        "documentation": {}
    },
    {
        "label": "TemplateObjectsTest",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.tests.template_objects_test",
        "description": "vendor.google.apiclient-services.generator.tests.template_objects_test",
        "peekOfCode": "class TemplateObjectsTest(absltest.TestCase):\n  def setUp(self):\n    super(TemplateObjectsTest, self).setUp()\n    self.language_model = language_model.LanguageModel(class_name_delimiter='|')\n  def testFullyQualifiedClassName(self):\n    foo = template_objects.CodeObject({'className': 'Foo'}, None,\n                                      language_model=self.language_model)\n    foo._module = template_objects.Module('test',\n                                          language_model=self.language_model)\n    bar = template_objects.CodeObject({'className': 'Bar'}, None, parent=foo)",
        "detail": "vendor.google.apiclient-services.generator.tests.template_objects_test",
        "documentation": {}
    },
    {
        "label": "ConstantTest",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.tests.template_objects_test",
        "description": "vendor.google.apiclient-services.generator.tests.template_objects_test",
        "peekOfCode": "class ConstantTest(absltest.TestCase):\n  def setUp(self):\n    super(ConstantTest, self).setUp()\n    class MyLanguageModel(language_model.LanguageModel):\n      constant_policy = language_model.NamingPolicy(\n          case_transform=language_model.UPPER_CAMEL_CASE, separator='|')\n    self.language_model = MyLanguageModel()\n  def testConstantNameFixer(self):\n    c = template_objects.Constant('hello_world',\n                                  language_model=self.language_model)",
        "detail": "vendor.google.apiclient-services.generator.tests.template_objects_test",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.tests.template_objects_test",
        "description": "vendor.google.apiclient-services.generator.tests.template_objects_test",
        "peekOfCode": "__author__ = 'aiuto@google.com (Tony Aiuto)'\nfrom django import template as django_template  # pylint:disable=g-bad-import-order\nfrom absl.testing import absltest\nfrom googleapis.codegen import language_model\nfrom googleapis.codegen import template_helpers\nfrom googleapis.codegen import template_objects\nclass TemplateObjectsTest(absltest.TestCase):\n  def setUp(self):\n    super(TemplateObjectsTest, self).setUp()\n    self.language_model = language_model.LanguageModel(class_name_delimiter='|')",
        "detail": "vendor.google.apiclient-services.generator.tests.template_objects_test",
        "documentation": {}
    },
    {
        "label": "UnicodeTest",
        "kind": 6,
        "importPath": "vendor.google.apiclient-services.generator.tests.unicode_test",
        "description": "vendor.google.apiclient-services.generator.tests.unicode_test",
        "peekOfCode": "class UnicodeTest(absltest.TestCase):\n  _TEST_DISCOVERY_DOC = 'unicode.json'\n  def ApiFromDiscoveryDoc(self, path):\n    \"\"\"Load a discovery doc from a file and creates a library Api.\n    Args:\n      path: (str) The path to the document.\n    Returns:\n      An Api for that document.\n    \"\"\"\n    with open(os.path.join(os.path.dirname(__file__), 'testdata', path)) as f:",
        "detail": "vendor.google.apiclient-services.generator.tests.unicode_test",
        "documentation": {}
    },
    {
        "label": "FLAGS",
        "kind": 5,
        "importPath": "vendor.google.apiclient-services.generator.tests.unicode_test",
        "description": "vendor.google.apiclient-services.generator.tests.unicode_test",
        "peekOfCode": "FLAGS = flags.FLAGS\nclass UnicodeTest(absltest.TestCase):\n  _TEST_DISCOVERY_DOC = 'unicode.json'\n  def ApiFromDiscoveryDoc(self, path):\n    \"\"\"Load a discovery doc from a file and creates a library Api.\n    Args:\n      path: (str) The path to the document.\n    Returns:\n      An Api for that document.\n    \"\"\"",
        "detail": "vendor.google.apiclient-services.generator.tests.unicode_test",
        "documentation": {}
    },
    {
        "label": "lexers['php']",
        "kind": 5,
        "importPath": "vendor.guzzlehttp.guzzle.docs.conf",
        "description": "vendor.guzzlehttp.guzzle.docs.conf",
        "peekOfCode": "lexers['php'] = PhpLexer(startinline=True, linenos=1)\nlexers['php-annotations'] = PhpLexer(startinline=True, linenos=1)\nprimary_domain = 'php'\nextensions = []\ntemplates_path = ['_templates']\nsource_suffix = '.rst'\nmaster_doc = 'index'\nproject = u'Guzzle'\ncopyright = u'2015, Michael Dowling'\nversion = '7'",
        "detail": "vendor.guzzlehttp.guzzle.docs.conf",
        "documentation": {}
    },
    {
        "label": "lexers['php-annotations']",
        "kind": 5,
        "importPath": "vendor.guzzlehttp.guzzle.docs.conf",
        "description": "vendor.guzzlehttp.guzzle.docs.conf",
        "peekOfCode": "lexers['php-annotations'] = PhpLexer(startinline=True, linenos=1)\nprimary_domain = 'php'\nextensions = []\ntemplates_path = ['_templates']\nsource_suffix = '.rst'\nmaster_doc = 'index'\nproject = u'Guzzle'\ncopyright = u'2015, Michael Dowling'\nversion = '7'\nhtml_title = \"Guzzle Documentation\"",
        "detail": "vendor.guzzlehttp.guzzle.docs.conf",
        "documentation": {}
    },
    {
        "label": "primary_domain",
        "kind": 5,
        "importPath": "vendor.guzzlehttp.guzzle.docs.conf",
        "description": "vendor.guzzlehttp.guzzle.docs.conf",
        "peekOfCode": "primary_domain = 'php'\nextensions = []\ntemplates_path = ['_templates']\nsource_suffix = '.rst'\nmaster_doc = 'index'\nproject = u'Guzzle'\ncopyright = u'2015, Michael Dowling'\nversion = '7'\nhtml_title = \"Guzzle Documentation\"\nhtml_short_title = \"Guzzle 7\"",
        "detail": "vendor.guzzlehttp.guzzle.docs.conf",
        "documentation": {}
    },
    {
        "label": "extensions",
        "kind": 5,
        "importPath": "vendor.guzzlehttp.guzzle.docs.conf",
        "description": "vendor.guzzlehttp.guzzle.docs.conf",
        "peekOfCode": "extensions = []\ntemplates_path = ['_templates']\nsource_suffix = '.rst'\nmaster_doc = 'index'\nproject = u'Guzzle'\ncopyright = u'2015, Michael Dowling'\nversion = '7'\nhtml_title = \"Guzzle Documentation\"\nhtml_short_title = \"Guzzle 7\"\nexclude_patterns = ['_build']",
        "detail": "vendor.guzzlehttp.guzzle.docs.conf",
        "documentation": {}
    },
    {
        "label": "templates_path",
        "kind": 5,
        "importPath": "vendor.guzzlehttp.guzzle.docs.conf",
        "description": "vendor.guzzlehttp.guzzle.docs.conf",
        "peekOfCode": "templates_path = ['_templates']\nsource_suffix = '.rst'\nmaster_doc = 'index'\nproject = u'Guzzle'\ncopyright = u'2015, Michael Dowling'\nversion = '7'\nhtml_title = \"Guzzle Documentation\"\nhtml_short_title = \"Guzzle 7\"\nexclude_patterns = ['_build']\nhtml_static_path = ['_static']",
        "detail": "vendor.guzzlehttp.guzzle.docs.conf",
        "documentation": {}
    },
    {
        "label": "source_suffix",
        "kind": 5,
        "importPath": "vendor.guzzlehttp.guzzle.docs.conf",
        "description": "vendor.guzzlehttp.guzzle.docs.conf",
        "peekOfCode": "source_suffix = '.rst'\nmaster_doc = 'index'\nproject = u'Guzzle'\ncopyright = u'2015, Michael Dowling'\nversion = '7'\nhtml_title = \"Guzzle Documentation\"\nhtml_short_title = \"Guzzle 7\"\nexclude_patterns = ['_build']\nhtml_static_path = ['_static']\n##### Guzzle sphinx theme",
        "detail": "vendor.guzzlehttp.guzzle.docs.conf",
        "documentation": {}
    },
    {
        "label": "master_doc",
        "kind": 5,
        "importPath": "vendor.guzzlehttp.guzzle.docs.conf",
        "description": "vendor.guzzlehttp.guzzle.docs.conf",
        "peekOfCode": "master_doc = 'index'\nproject = u'Guzzle'\ncopyright = u'2015, Michael Dowling'\nversion = '7'\nhtml_title = \"Guzzle Documentation\"\nhtml_short_title = \"Guzzle 7\"\nexclude_patterns = ['_build']\nhtml_static_path = ['_static']\n##### Guzzle sphinx theme\nimport guzzle_sphinx_theme",
        "detail": "vendor.guzzlehttp.guzzle.docs.conf",
        "documentation": {}
    },
    {
        "label": "project",
        "kind": 5,
        "importPath": "vendor.guzzlehttp.guzzle.docs.conf",
        "description": "vendor.guzzlehttp.guzzle.docs.conf",
        "peekOfCode": "project = u'Guzzle'\ncopyright = u'2015, Michael Dowling'\nversion = '7'\nhtml_title = \"Guzzle Documentation\"\nhtml_short_title = \"Guzzle 7\"\nexclude_patterns = ['_build']\nhtml_static_path = ['_static']\n##### Guzzle sphinx theme\nimport guzzle_sphinx_theme\nhtml_translator_class = 'guzzle_sphinx_theme.HTMLTranslator'",
        "detail": "vendor.guzzlehttp.guzzle.docs.conf",
        "documentation": {}
    },
    {
        "label": "copyright",
        "kind": 5,
        "importPath": "vendor.guzzlehttp.guzzle.docs.conf",
        "description": "vendor.guzzlehttp.guzzle.docs.conf",
        "peekOfCode": "copyright = u'2015, Michael Dowling'\nversion = '7'\nhtml_title = \"Guzzle Documentation\"\nhtml_short_title = \"Guzzle 7\"\nexclude_patterns = ['_build']\nhtml_static_path = ['_static']\n##### Guzzle sphinx theme\nimport guzzle_sphinx_theme\nhtml_translator_class = 'guzzle_sphinx_theme.HTMLTranslator'\nhtml_theme_path = guzzle_sphinx_theme.html_theme_path()",
        "detail": "vendor.guzzlehttp.guzzle.docs.conf",
        "documentation": {}
    },
    {
        "label": "version",
        "kind": 5,
        "importPath": "vendor.guzzlehttp.guzzle.docs.conf",
        "description": "vendor.guzzlehttp.guzzle.docs.conf",
        "peekOfCode": "version = '7'\nhtml_title = \"Guzzle Documentation\"\nhtml_short_title = \"Guzzle 7\"\nexclude_patterns = ['_build']\nhtml_static_path = ['_static']\n##### Guzzle sphinx theme\nimport guzzle_sphinx_theme\nhtml_translator_class = 'guzzle_sphinx_theme.HTMLTranslator'\nhtml_theme_path = guzzle_sphinx_theme.html_theme_path()\nhtml_theme = 'guzzle_sphinx_theme'",
        "detail": "vendor.guzzlehttp.guzzle.docs.conf",
        "documentation": {}
    },
    {
        "label": "html_title",
        "kind": 5,
        "importPath": "vendor.guzzlehttp.guzzle.docs.conf",
        "description": "vendor.guzzlehttp.guzzle.docs.conf",
        "peekOfCode": "html_title = \"Guzzle Documentation\"\nhtml_short_title = \"Guzzle 7\"\nexclude_patterns = ['_build']\nhtml_static_path = ['_static']\n##### Guzzle sphinx theme\nimport guzzle_sphinx_theme\nhtml_translator_class = 'guzzle_sphinx_theme.HTMLTranslator'\nhtml_theme_path = guzzle_sphinx_theme.html_theme_path()\nhtml_theme = 'guzzle_sphinx_theme'\n# Custom sidebar templates, maps document names to template names.",
        "detail": "vendor.guzzlehttp.guzzle.docs.conf",
        "documentation": {}
    },
    {
        "label": "html_short_title",
        "kind": 5,
        "importPath": "vendor.guzzlehttp.guzzle.docs.conf",
        "description": "vendor.guzzlehttp.guzzle.docs.conf",
        "peekOfCode": "html_short_title = \"Guzzle 7\"\nexclude_patterns = ['_build']\nhtml_static_path = ['_static']\n##### Guzzle sphinx theme\nimport guzzle_sphinx_theme\nhtml_translator_class = 'guzzle_sphinx_theme.HTMLTranslator'\nhtml_theme_path = guzzle_sphinx_theme.html_theme_path()\nhtml_theme = 'guzzle_sphinx_theme'\n# Custom sidebar templates, maps document names to template names.\nhtml_sidebars = {",
        "detail": "vendor.guzzlehttp.guzzle.docs.conf",
        "documentation": {}
    },
    {
        "label": "exclude_patterns",
        "kind": 5,
        "importPath": "vendor.guzzlehttp.guzzle.docs.conf",
        "description": "vendor.guzzlehttp.guzzle.docs.conf",
        "peekOfCode": "exclude_patterns = ['_build']\nhtml_static_path = ['_static']\n##### Guzzle sphinx theme\nimport guzzle_sphinx_theme\nhtml_translator_class = 'guzzle_sphinx_theme.HTMLTranslator'\nhtml_theme_path = guzzle_sphinx_theme.html_theme_path()\nhtml_theme = 'guzzle_sphinx_theme'\n# Custom sidebar templates, maps document names to template names.\nhtml_sidebars = {\n    '**': ['logo-text.html', 'globaltoc.html', 'searchbox.html']",
        "detail": "vendor.guzzlehttp.guzzle.docs.conf",
        "documentation": {}
    },
    {
        "label": "html_static_path",
        "kind": 5,
        "importPath": "vendor.guzzlehttp.guzzle.docs.conf",
        "description": "vendor.guzzlehttp.guzzle.docs.conf",
        "peekOfCode": "html_static_path = ['_static']\n##### Guzzle sphinx theme\nimport guzzle_sphinx_theme\nhtml_translator_class = 'guzzle_sphinx_theme.HTMLTranslator'\nhtml_theme_path = guzzle_sphinx_theme.html_theme_path()\nhtml_theme = 'guzzle_sphinx_theme'\n# Custom sidebar templates, maps document names to template names.\nhtml_sidebars = {\n    '**': ['logo-text.html', 'globaltoc.html', 'searchbox.html']\n}",
        "detail": "vendor.guzzlehttp.guzzle.docs.conf",
        "documentation": {}
    },
    {
        "label": "html_translator_class",
        "kind": 5,
        "importPath": "vendor.guzzlehttp.guzzle.docs.conf",
        "description": "vendor.guzzlehttp.guzzle.docs.conf",
        "peekOfCode": "html_translator_class = 'guzzle_sphinx_theme.HTMLTranslator'\nhtml_theme_path = guzzle_sphinx_theme.html_theme_path()\nhtml_theme = 'guzzle_sphinx_theme'\n# Custom sidebar templates, maps document names to template names.\nhtml_sidebars = {\n    '**': ['logo-text.html', 'globaltoc.html', 'searchbox.html']\n}\n# Register the theme as an extension to generate a sitemap.xml\nextensions.append(\"guzzle_sphinx_theme\")\n# Guzzle theme options (see theme.conf for more information)",
        "detail": "vendor.guzzlehttp.guzzle.docs.conf",
        "documentation": {}
    },
    {
        "label": "html_theme_path",
        "kind": 5,
        "importPath": "vendor.guzzlehttp.guzzle.docs.conf",
        "description": "vendor.guzzlehttp.guzzle.docs.conf",
        "peekOfCode": "html_theme_path = guzzle_sphinx_theme.html_theme_path()\nhtml_theme = 'guzzle_sphinx_theme'\n# Custom sidebar templates, maps document names to template names.\nhtml_sidebars = {\n    '**': ['logo-text.html', 'globaltoc.html', 'searchbox.html']\n}\n# Register the theme as an extension to generate a sitemap.xml\nextensions.append(\"guzzle_sphinx_theme\")\n# Guzzle theme options (see theme.conf for more information)\nhtml_theme_options = {",
        "detail": "vendor.guzzlehttp.guzzle.docs.conf",
        "documentation": {}
    },
    {
        "label": "html_theme",
        "kind": 5,
        "importPath": "vendor.guzzlehttp.guzzle.docs.conf",
        "description": "vendor.guzzlehttp.guzzle.docs.conf",
        "peekOfCode": "html_theme = 'guzzle_sphinx_theme'\n# Custom sidebar templates, maps document names to template names.\nhtml_sidebars = {\n    '**': ['logo-text.html', 'globaltoc.html', 'searchbox.html']\n}\n# Register the theme as an extension to generate a sitemap.xml\nextensions.append(\"guzzle_sphinx_theme\")\n# Guzzle theme options (see theme.conf for more information)\nhtml_theme_options = {\n    # Set the path to a special layout to include for the homepage",
        "detail": "vendor.guzzlehttp.guzzle.docs.conf",
        "documentation": {}
    },
    {
        "label": "html_sidebars",
        "kind": 5,
        "importPath": "vendor.guzzlehttp.guzzle.docs.conf",
        "description": "vendor.guzzlehttp.guzzle.docs.conf",
        "peekOfCode": "html_sidebars = {\n    '**': ['logo-text.html', 'globaltoc.html', 'searchbox.html']\n}\n# Register the theme as an extension to generate a sitemap.xml\nextensions.append(\"guzzle_sphinx_theme\")\n# Guzzle theme options (see theme.conf for more information)\nhtml_theme_options = {\n    # Set the path to a special layout to include for the homepage\n    # \"index_template\": \"homepage.html\",\n    # Allow a separate homepage from the master_doc",
        "detail": "vendor.guzzlehttp.guzzle.docs.conf",
        "documentation": {}
    },
    {
        "label": "html_theme_options",
        "kind": 5,
        "importPath": "vendor.guzzlehttp.guzzle.docs.conf",
        "description": "vendor.guzzlehttp.guzzle.docs.conf",
        "peekOfCode": "html_theme_options = {\n    # Set the path to a special layout to include for the homepage\n    # \"index_template\": \"homepage.html\",\n    # Allow a separate homepage from the master_doc\n    # homepage = index\n    # Set the name of the project to appear in the nav menu\n    # \"project_nav_name\": \"Guzzle\",\n    # Set your Disqus short name to enable comments\n    # \"disqus_comments_shortname\": \"my_disqus_comments_short_name\",\n    # Set you GA account ID to enable tracking",
        "detail": "vendor.guzzlehttp.guzzle.docs.conf",
        "documentation": {}
    }
]